"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@hashbrownai+google@0.3.0_@google+genai@0.8.0_@hashbrownai+core@0.3.0";
exports.ids = ["vendor-chunks/@hashbrownai+google@0.3.0_@google+genai@0.8.0_@hashbrownai+core@0.3.0"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@hashbrownai+google@0.3.0_@google+genai@0.8.0_@hashbrownai+core@0.3.0/node_modules/@hashbrownai/google/src/index.js":
/*!************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@hashbrownai+google@0.3.0_@google+genai@0.8.0_@hashbrownai+core@0.3.0/node_modules/@hashbrownai/google/src/index.js ***!
  \************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HashbrownGoogle = void 0;\nconst text_fn_1 = __webpack_require__(/*! ./stream/text.fn */ \"(rsc)/./node_modules/.pnpm/@hashbrownai+google@0.3.0_@google+genai@0.8.0_@hashbrownai+core@0.3.0/node_modules/@hashbrownai/google/src/stream/text.fn.js\");\nexports.HashbrownGoogle = {\n    stream: {\n        text: text_fn_1.text,\n    },\n};\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGhhc2hicm93bmFpK2dvb2dsZUAwLjMuMF9AZ29vZ2xlK2dlbmFpQDAuOC4wX0BoYXNoYnJvd25haStjb3JlQDAuMy4wL25vZGVfbW9kdWxlcy9AaGFzaGJyb3duYWkvZ29vZ2xlL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUI7QUFDdkIsa0JBQWtCLG1CQUFPLENBQUMsaUxBQWtCO0FBQzVDLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWEtb2xpdmUtd2ViLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BoYXNoYnJvd25haStnb29nbGVAMC4zLjBfQGdvb2dsZStnZW5haUAwLjguMF9AaGFzaGJyb3duYWkrY29yZUAwLjMuMC9ub2RlX21vZHVsZXMvQGhhc2hicm93bmFpL2dvb2dsZS9zcmMvaW5kZXguanM/MjdmZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSGFzaGJyb3duR29vZ2xlID0gdm9pZCAwO1xuY29uc3QgdGV4dF9mbl8xID0gcmVxdWlyZShcIi4vc3RyZWFtL3RleHQuZm5cIik7XG5leHBvcnRzLkhhc2hicm93bkdvb2dsZSA9IHtcbiAgICBzdHJlYW06IHtcbiAgICAgICAgdGV4dDogdGV4dF9mbl8xLnRleHQsXG4gICAgfSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@hashbrownai+google@0.3.0_@google+genai@0.8.0_@hashbrownai+core@0.3.0/node_modules/@hashbrownai/google/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@hashbrownai+google@0.3.0_@google+genai@0.8.0_@hashbrownai+core@0.3.0/node_modules/@hashbrownai/google/src/stream/text.fn.js":
/*!*********************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@hashbrownai+google@0.3.0_@google+genai@0.8.0_@hashbrownai+core@0.3.0/node_modules/@hashbrownai/google/src/stream/text.fn.js ***!
  \*********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.text = text;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs\");\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst genai_1 = __webpack_require__(/*! @google/genai */ \"(rsc)/./node_modules/.pnpm/@google+genai@0.8.0/node_modules/@google/genai/dist/node/index.js\");\nconst core_1 = __webpack_require__(/*! @hashbrownai/core */ \"(rsc)/./node_modules/.pnpm/@hashbrownai+core@0.3.0/node_modules/@hashbrownai/core/index.esm.js\");\nconst json_schema_to_openapi_schema_1 = __webpack_require__(/*! @openapi-contrib/json-schema-to-openapi-schema */ \"(rsc)/./node_modules/.pnpm/@openapi-contrib+json-schema-to-openapi-schema@3.0.3/node_modules/@openapi-contrib/json-schema-to-openapi-schema/dist/index.js\");\nfunction text(options) {\n    return tslib_1.__asyncGenerator(this, arguments, function* text_1() {\n        var _a, e_1, _b, _c;\n        var _d, _e, _f, _g, _h, _j;\n        const { apiKey, request, transformRequestOptions } = options;\n        const { messages, model, tools, responseFormat, toolChoice, system } = request;\n        const ai = new genai_1.GoogleGenAI({\n            apiKey,\n        });\n        try {\n            const contents = messages.map((message) => {\n                var _a, _b;\n                switch (message.role) {\n                    case 'user':\n                        return {\n                            role: 'user',\n                            parts: [\n                                {\n                                    text: message.content,\n                                },\n                            ],\n                        };\n                    case 'error':\n                        return {\n                            role: 'error',\n                            parts: [\n                                {\n                                    text: message.content,\n                                },\n                            ],\n                        };\n                    case 'assistant': {\n                        return {\n                            role: 'model',\n                            parts: [\n                                ...((_b = (_a = message.toolCalls) === null || _a === void 0 ? void 0 : _a.map((toolCall) => ({\n                                    functionCall: {\n                                        id: toolCall.id,\n                                        name: toolCall.function.name,\n                                        args: JSON.parse(toolCall.function.arguments),\n                                    },\n                                }))) !== null && _b !== void 0 ? _b : []),\n                                ...(message.content\n                                    ? [\n                                        {\n                                            text: typeof message.content !== 'string'\n                                                ? JSON.stringify(message.content)\n                                                : message.content,\n                                        },\n                                    ]\n                                    : []),\n                            ],\n                        };\n                    }\n                    case 'tool':\n                        return {\n                            role: 'user',\n                            parts: [\n                                {\n                                    functionResponse: {\n                                        id: message.toolCallId,\n                                        name: message.toolName,\n                                        response: { result: JSON.stringify(message.content) },\n                                    },\n                                },\n                            ],\n                        };\n                }\n            });\n            let geminiTools = [];\n            if (tools && tools.length) {\n                geminiTools = yield tslib_1.__await(Promise.all(tools.map((tool) => tslib_1.__awaiter(this, void 0, void 0, function* () {\n                    const schema = yield toGeminiSchema(tool.parameters);\n                    return {\n                        name: tool.name,\n                        description: tool.description,\n                        parameters: schema,\n                    };\n                }))));\n            }\n            const responseSchema = responseFormat\n                ? (yield tslib_1.__await(toGeminiSchema(responseFormat)))\n                : undefined;\n            const config = {\n                systemInstruction: {\n                    parts: [{ text: system }],\n                },\n                tools: [\n                    {\n                        functionDeclarations: geminiTools,\n                    },\n                ],\n                responseMimeType: responseFormat ? 'application/json' : 'text/plain',\n                responseSchema: responseSchema,\n                toolConfig: {\n                    functionCallingConfig: {\n                        mode: toolChoice === 'required'\n                            ? genai_1.FunctionCallingConfigMode.ANY\n                            : toolChoice === 'none'\n                                ? genai_1.FunctionCallingConfigMode.NONE\n                                : genai_1.FunctionCallingConfigMode.AUTO,\n                    },\n                },\n            };\n            const params = {\n                model: model,\n                config,\n                contents,\n            };\n            const resolvedParams = transformRequestOptions\n                ? yield tslib_1.__await(transformRequestOptions(params))\n                : params;\n            const response = yield tslib_1.__await(ai.models.generateContentStream(resolvedParams));\n            const toolCallIndicesToStringId = {};\n            const getToolCallId = (index) => {\n                if (toolCallIndicesToStringId[index] === undefined) {\n                    toolCallIndicesToStringId[index] = `tool_call_${crypto.randomUUID()}`;\n                }\n                return toolCallIndicesToStringId[index];\n            };\n            try {\n                for (var _k = true, _l = tslib_1.__asyncValues(yield tslib_1.__await(response)), _m; _m = yield tslib_1.__await(_l.next()), _a = _m.done, !_a; _k = true) {\n                    _c = _m.value;\n                    _k = false;\n                    const chunk = _c;\n                    const firstPart = (_g = (_f = (_e = (_d = chunk.candidates) === null || _d === void 0 ? void 0 : _d[0]) === null || _e === void 0 ? void 0 : _e.content) === null || _f === void 0 ? void 0 : _f.parts) === null || _g === void 0 ? void 0 : _g[0];\n                    if (firstPart && firstPart.functionCall) {\n                        const chunkMessage = {\n                            choices: [\n                                {\n                                    index: 0,\n                                    delta: {\n                                        content: null,\n                                        role: 'assistant',\n                                        toolCalls: [\n                                            {\n                                                index: 0,\n                                                id: getToolCallId(0),\n                                                type: 'function',\n                                                function: {\n                                                    name: firstPart.functionCall.name,\n                                                    arguments: JSON.stringify(firstPart.functionCall.args),\n                                                },\n                                            },\n                                        ],\n                                    },\n                                    finishReason: null,\n                                },\n                            ],\n                        };\n                        const frame = {\n                            type: 'chunk',\n                            chunk: chunkMessage,\n                        };\n                        yield yield tslib_1.__await((0, core_1.encodeFrame)(frame));\n                    }\n                    const chunkMessage = {\n                        choices: (_j = (_h = chunk.candidates) === null || _h === void 0 ? void 0 : _h.map((candidate, index) => {\n                            var _a, _b, _c, _d, _e;\n                            return ({\n                                index: (_a = candidate.index) !== null && _a !== void 0 ? _a : index,\n                                delta: {\n                                    content: (_d = (_c = (_b = candidate.content) === null || _b === void 0 ? void 0 : _b.parts) === null || _c === void 0 ? void 0 : _c.reduce((str, part) => {\n                                        if (part.text) {\n                                            return str + part.text;\n                                        }\n                                        return str;\n                                    }, '')) !== null && _d !== void 0 ? _d : null,\n                                    // todo: Brian Love: candidate.content?.role ??\n                                    role: 'assistant',\n                                },\n                                logprobs: null,\n                                finishReason: (_e = candidate.finishReason) !== null && _e !== void 0 ? _e : null,\n                            });\n                        })) !== null && _j !== void 0 ? _j : [],\n                    };\n                    const frame = {\n                        type: 'chunk',\n                        chunk: chunkMessage,\n                    };\n                    yield yield tslib_1.__await((0, core_1.encodeFrame)(frame));\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (!_k && !_a && (_b = _l.return)) yield tslib_1.__await(_b.call(_l));\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                const frame = {\n                    type: 'error',\n                    error: error.toString(),\n                    stacktrace: error.stack,\n                };\n                yield yield tslib_1.__await((0, core_1.encodeFrame)(frame));\n            }\n            else {\n                const frame = {\n                    type: 'error',\n                    error: String(error),\n                };\n                yield yield tslib_1.__await((0, core_1.encodeFrame)(frame));\n            }\n        }\n        finally {\n            const frame = {\n                type: 'finish',\n            };\n            yield yield tslib_1.__await((0, core_1.encodeFrame)(frame));\n        }\n    });\n}\nfunction toGeminiSchema(jsonSchema) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n        const openApiSchema = yield (0, json_schema_to_openapi_schema_1.default)(jsonSchema);\n        function pruneSchema(obj) {\n            var _a, _b, _c, _d, _e, _f;\n            const result = {};\n            if (obj.type) {\n                result.type =\n                    typeof obj.type === 'string' ? obj.type.toUpperCase() : obj.type;\n            }\n            if ('enum' in obj) {\n                result.enum = obj.enum;\n            }\n            if ('format' in obj) {\n                result.format = obj.format;\n            }\n            if ('title' in obj) {\n                result.title = obj.title;\n            }\n            if ('description' in obj) {\n                result.description = obj.description;\n            }\n            if ('nullable' in obj) {\n                result.nullable = obj.nullable;\n            }\n            if ('maxItems' in obj) {\n                result.maxItems = (_a = obj.maxItems) === null || _a === void 0 ? void 0 : _a.toString();\n            }\n            if ('minItems' in obj) {\n                result.minItems = (_b = obj.minItems) === null || _b === void 0 ? void 0 : _b.toString();\n            }\n            if ('properties' in obj && typeof obj.properties === 'object') {\n                result.properties = Object.fromEntries(Object.entries(obj.properties).map(([key, value]) => [\n                    key,\n                    pruneSchema(value),\n                ]));\n                result.propertyOrdering = Object.keys(obj.properties);\n            }\n            if ('required' in obj) {\n                result.required = obj.required;\n            }\n            if ('minProperties' in obj) {\n                result.minProperties = (_c = obj.minProperties) === null || _c === void 0 ? void 0 : _c.toString();\n            }\n            if ('maxProperties' in obj) {\n                result.maxProperties = (_d = obj.maxProperties) === null || _d === void 0 ? void 0 : _d.toString();\n            }\n            if ('minLength' in obj) {\n                result.minLength = (_e = obj.minLength) === null || _e === void 0 ? void 0 : _e.toString();\n            }\n            if ('maxLength' in obj) {\n                result.maxLength = (_f = obj.maxLength) === null || _f === void 0 ? void 0 : _f.toString();\n            }\n            if ('pattern' in obj) {\n                result.pattern = obj.pattern;\n            }\n            if ('example' in obj) {\n                result.example = obj.example;\n            }\n            if ('anyOf' in obj && Array.isArray(obj.anyOf)) {\n                result.anyOf = obj.anyOf.map(pruneSchema);\n            }\n            if ('propertyOrdering' in obj) {\n                result.propertyOrdering = obj.propertyOrdering;\n            }\n            if ('default' in obj) {\n                result.default = obj.default;\n            }\n            if ('items' in obj && typeof obj.items === 'object') {\n                result.items = pruneSchema(obj.items);\n            }\n            if ('minimum' in obj) {\n                result.minimum = obj.minimum;\n            }\n            if ('maximum' in obj) {\n                result.maximum = obj.maximum;\n            }\n            return result;\n        }\n        return pruneSchema(openApiSchema);\n    });\n}\n//# sourceMappingURL=text.fn.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGhhc2hicm93bmFpK2dvb2dsZUAwLjMuMF9AZ29vZ2xlK2dlbmFpQDAuOC4wX0BoYXNoYnJvd25haStjb3JlQDAuMy4wL25vZGVfbW9kdWxlcy9AaGFzaGJyb3duYWkvZ29vZ2xlL3NyYy9zdHJlYW0vdGV4dC5mbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxZQUFZO0FBQ1osZ0JBQWdCLG1CQUFPLENBQUMsc0ZBQU87QUFDL0I7QUFDQSxnQkFBZ0IsbUJBQU8sQ0FBQyxtSEFBZTtBQUN2QyxlQUFlLG1CQUFPLENBQUMseUhBQW1CO0FBQzFDLHdDQUF3QyxtQkFBTyxDQUFDLGlOQUFnRDtBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwyQ0FBMkM7QUFDM0QsZ0JBQWdCLDZEQUE2RDtBQUM3RTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQyxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELHlDQUF5QztBQUM3RixxQ0FBcUM7QUFDckMsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGNBQWM7QUFDNUMsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRUFBb0Usb0JBQW9CO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUdBQXFHLDBEQUEwRDtBQUMvSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pELDZDQUE2QztBQUM3QztBQUNBLHFDQUFxQztBQUNyQztBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsUUFBUTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3RlYS1vbGl2ZS13ZWIvLi9ub2RlX21vZHVsZXMvLnBucG0vQGhhc2hicm93bmFpK2dvb2dsZUAwLjMuMF9AZ29vZ2xlK2dlbmFpQDAuOC4wX0BoYXNoYnJvd25haStjb3JlQDAuMy4wL25vZGVfbW9kdWxlcy9AaGFzaGJyb3duYWkvZ29vZ2xlL3NyYy9zdHJlYW0vdGV4dC5mbi5qcz82YTVmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50ZXh0ID0gdGV4dDtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5jb25zdCBnZW5haV8xID0gcmVxdWlyZShcIkBnb29nbGUvZ2VuYWlcIik7XG5jb25zdCBjb3JlXzEgPSByZXF1aXJlKFwiQGhhc2hicm93bmFpL2NvcmVcIik7XG5jb25zdCBqc29uX3NjaGVtYV90b19vcGVuYXBpX3NjaGVtYV8xID0gcmVxdWlyZShcIkBvcGVuYXBpLWNvbnRyaWIvanNvbi1zY2hlbWEtdG8tb3BlbmFwaS1zY2hlbWFcIik7XG5mdW5jdGlvbiB0ZXh0KG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdHNsaWJfMS5fX2FzeW5jR2VuZXJhdG9yKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24qIHRleHRfMSgpIHtcbiAgICAgICAgdmFyIF9hLCBlXzEsIF9iLCBfYztcbiAgICAgICAgdmFyIF9kLCBfZSwgX2YsIF9nLCBfaCwgX2o7XG4gICAgICAgIGNvbnN0IHsgYXBpS2V5LCByZXF1ZXN0LCB0cmFuc2Zvcm1SZXF1ZXN0T3B0aW9ucyB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgeyBtZXNzYWdlcywgbW9kZWwsIHRvb2xzLCByZXNwb25zZUZvcm1hdCwgdG9vbENob2ljZSwgc3lzdGVtIH0gPSByZXF1ZXN0O1xuICAgICAgICBjb25zdCBhaSA9IG5ldyBnZW5haV8xLkdvb2dsZUdlbkFJKHtcbiAgICAgICAgICAgIGFwaUtleSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBjb250ZW50cyA9IG1lc3NhZ2VzLm1hcCgobWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChtZXNzYWdlLnJvbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndXNlcic6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU6ICd1c2VyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0czogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBtZXNzYWdlLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZTogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0czogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBtZXNzYWdlLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2Fzc2lzdGFudCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZTogJ21vZGVsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0czogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi4oKF9iID0gKF9hID0gbWVzc2FnZS50b29sQ2FsbHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tYXAoKHRvb2xDYWxsKSA9PiAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25DYWxsOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHRvb2xDYWxsLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHRvb2xDYWxsLmZ1bmN0aW9uLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnczogSlNPTi5wYXJzZSh0b29sQ2FsbC5mdW5jdGlvbi5hcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBbXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLihtZXNzYWdlLmNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogdHlwZW9mIG1lc3NhZ2UuY29udGVudCAhPT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gSlNPTi5zdHJpbmdpZnkobWVzc2FnZS5jb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBtZXNzYWdlLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogW10pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Rvb2wnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlOiAndXNlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydHM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25SZXNwb25zZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBtZXNzYWdlLnRvb2xDYWxsSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogbWVzc2FnZS50b29sTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZTogeyByZXN1bHQ6IEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UuY29udGVudCkgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZXQgZ2VtaW5pVG9vbHMgPSBbXTtcbiAgICAgICAgICAgIGlmICh0b29scyAmJiB0b29scy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBnZW1pbmlUb29scyA9IHlpZWxkIHRzbGliXzEuX19hd2FpdChQcm9taXNlLmFsbCh0b29scy5tYXAoKHRvb2wpID0+IHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzY2hlbWEgPSB5aWVsZCB0b0dlbWluaVNjaGVtYSh0b29sLnBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdG9vbC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHRvb2wuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzOiBzY2hlbWEsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSkpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZVNjaGVtYSA9IHJlc3BvbnNlRm9ybWF0XG4gICAgICAgICAgICAgICAgPyAoeWllbGQgdHNsaWJfMS5fX2F3YWl0KHRvR2VtaW5pU2NoZW1hKHJlc3BvbnNlRm9ybWF0KSkpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgICAgICAgICAgc3lzdGVtSW5zdHJ1Y3Rpb246IHtcbiAgICAgICAgICAgICAgICAgICAgcGFydHM6IFt7IHRleHQ6IHN5c3RlbSB9XSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRvb2xzOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uRGVjbGFyYXRpb25zOiBnZW1pbmlUb29scyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlTWltZVR5cGU6IHJlc3BvbnNlRm9ybWF0ID8gJ2FwcGxpY2F0aW9uL2pzb24nIDogJ3RleHQvcGxhaW4nLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlU2NoZW1hOiByZXNwb25zZVNjaGVtYSxcbiAgICAgICAgICAgICAgICB0b29sQ29uZmlnOiB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uQ2FsbGluZ0NvbmZpZzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogdG9vbENob2ljZSA9PT0gJ3JlcXVpcmVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZ2VuYWlfMS5GdW5jdGlvbkNhbGxpbmdDb25maWdNb2RlLkFOWVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdG9vbENob2ljZSA9PT0gJ25vbmUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZ2VuYWlfMS5GdW5jdGlvbkNhbGxpbmdDb25maWdNb2RlLk5PTkVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBnZW5haV8xLkZ1bmN0aW9uQ2FsbGluZ0NvbmZpZ01vZGUuQVVUTyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBtb2RlbDogbW9kZWwsXG4gICAgICAgICAgICAgICAgY29uZmlnLFxuICAgICAgICAgICAgICAgIGNvbnRlbnRzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmVkUGFyYW1zID0gdHJhbnNmb3JtUmVxdWVzdE9wdGlvbnNcbiAgICAgICAgICAgICAgICA/IHlpZWxkIHRzbGliXzEuX19hd2FpdCh0cmFuc2Zvcm1SZXF1ZXN0T3B0aW9ucyhwYXJhbXMpKVxuICAgICAgICAgICAgICAgIDogcGFyYW1zO1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0c2xpYl8xLl9fYXdhaXQoYWkubW9kZWxzLmdlbmVyYXRlQ29udGVudFN0cmVhbShyZXNvbHZlZFBhcmFtcykpO1xuICAgICAgICAgICAgY29uc3QgdG9vbENhbGxJbmRpY2VzVG9TdHJpbmdJZCA9IHt9O1xuICAgICAgICAgICAgY29uc3QgZ2V0VG9vbENhbGxJZCA9IChpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0b29sQ2FsbEluZGljZXNUb1N0cmluZ0lkW2luZGV4XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvb2xDYWxsSW5kaWNlc1RvU3RyaW5nSWRbaW5kZXhdID0gYHRvb2xfY2FsbF8ke2NyeXB0by5yYW5kb21VVUlEKCl9YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRvb2xDYWxsSW5kaWNlc1RvU3RyaW5nSWRbaW5kZXhdO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2sgPSB0cnVlLCBfbCA9IHRzbGliXzEuX19hc3luY1ZhbHVlcyh5aWVsZCB0c2xpYl8xLl9fYXdhaXQocmVzcG9uc2UpKSwgX207IF9tID0geWllbGQgdHNsaWJfMS5fX2F3YWl0KF9sLm5leHQoKSksIF9hID0gX20uZG9uZSwgIV9hOyBfayA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgX2MgPSBfbS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgX2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2h1bmsgPSBfYztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlyc3RQYXJ0ID0gKF9nID0gKF9mID0gKF9lID0gKF9kID0gY2h1bmsuY2FuZGlkYXRlcykgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kWzBdKSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2UuY29udGVudCkgPT09IG51bGwgfHwgX2YgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mLnBhcnRzKSA9PT0gbnVsbCB8fCBfZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2dbMF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaXJzdFBhcnQgJiYgZmlyc3RQYXJ0LmZ1bmN0aW9uQ2FsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2h1bmtNZXNzYWdlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNob2ljZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWx0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZTogJ2Fzc2lzdGFudCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbENhbGxzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGdldFRvb2xDYWxsSWQoMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZnVuY3Rpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBmaXJzdFBhcnQuZnVuY3Rpb25DYWxsLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzOiBKU09OLnN0cmluZ2lmeShmaXJzdFBhcnQuZnVuY3Rpb25DYWxsLmFyZ3MpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmlzaFJlYXNvbjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyYW1lID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjaHVuaycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2h1bms6IGNodW5rTWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCB5aWVsZCB0c2xpYl8xLl9fYXdhaXQoKDAsIGNvcmVfMS5lbmNvZGVGcmFtZSkoZnJhbWUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaHVua01lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaG9pY2VzOiAoX2ogPSAoX2ggPSBjaHVuay5jYW5kaWRhdGVzKSA9PT0gbnVsbCB8fCBfaCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2gubWFwKChjYW5kaWRhdGUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IChfYSA9IGNhbmRpZGF0ZS5pbmRleCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAoX2QgPSAoX2MgPSAoX2IgPSBjYW5kaWRhdGUuY29udGVudCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnBhcnRzKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MucmVkdWNlKChzdHIsIHBhcnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFydC50ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHIgKyBwYXJ0LnRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAnJykpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0b2RvOiBCcmlhbiBMb3ZlOiBjYW5kaWRhdGUuY29udGVudD8ucm9sZSA/P1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZTogJ2Fzc2lzdGFudCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ3Byb2JzOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5pc2hSZWFzb246IChfZSA9IGNhbmRpZGF0ZS5maW5pc2hSZWFzb24pICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSkgIT09IG51bGwgJiYgX2ogIT09IHZvaWQgMCA/IF9qIDogW10sXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyYW1lID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2NodW5rJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rOiBjaHVua01lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIHlpZWxkIHRzbGliXzEuX19hd2FpdCgoMCwgY29yZV8xLmVuY29kZUZyYW1lKShmcmFtZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9rICYmICFfYSAmJiAoX2IgPSBfbC5yZXR1cm4pKSB5aWVsZCB0c2xpYl8xLl9fYXdhaXQoX2IuY2FsbChfbCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZyYW1lID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgc3RhY2t0cmFjZTogZXJyb3Iuc3RhY2ssXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB5aWVsZCB5aWVsZCB0c2xpYl8xLl9fYXdhaXQoKDAsIGNvcmVfMS5lbmNvZGVGcmFtZSkoZnJhbWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZyYW1lID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogU3RyaW5nKGVycm9yKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHlpZWxkIHlpZWxkIHRzbGliXzEuX19hd2FpdCgoMCwgY29yZV8xLmVuY29kZUZyYW1lKShmcmFtZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgY29uc3QgZnJhbWUgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2ZpbmlzaCcsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgeWllbGQgeWllbGQgdHNsaWJfMS5fX2F3YWl0KCgwLCBjb3JlXzEuZW5jb2RlRnJhbWUpKGZyYW1lKSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHRvR2VtaW5pU2NoZW1hKGpzb25TY2hlbWEpIHtcbiAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IG9wZW5BcGlTY2hlbWEgPSB5aWVsZCAoMCwganNvbl9zY2hlbWFfdG9fb3BlbmFwaV9zY2hlbWFfMS5kZWZhdWx0KShqc29uU2NoZW1hKTtcbiAgICAgICAgZnVuY3Rpb24gcHJ1bmVTY2hlbWEob2JqKSB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZjtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgICAgICAgICAgaWYgKG9iai50eXBlKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnR5cGUgPVxuICAgICAgICAgICAgICAgICAgICB0eXBlb2Ygb2JqLnR5cGUgPT09ICdzdHJpbmcnID8gb2JqLnR5cGUudG9VcHBlckNhc2UoKSA6IG9iai50eXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCdlbnVtJyBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICByZXN1bHQuZW51bSA9IG9iai5lbnVtO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCdmb3JtYXQnIGluIG9iaikge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5mb3JtYXQgPSBvYmouZm9ybWF0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCd0aXRsZScgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnRpdGxlID0gb2JqLnRpdGxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCdkZXNjcmlwdGlvbicgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmRlc2NyaXB0aW9uID0gb2JqLmRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCdudWxsYWJsZScgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0Lm51bGxhYmxlID0gb2JqLm51bGxhYmxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCdtYXhJdGVtcycgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0Lm1heEl0ZW1zID0gKF9hID0gb2JqLm1heEl0ZW1zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgnbWluSXRlbXMnIGluIG9iaikge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5taW5JdGVtcyA9IChfYiA9IG9iai5taW5JdGVtcykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJ3Byb3BlcnRpZXMnIGluIG9iaiAmJiB0eXBlb2Ygb2JqLnByb3BlcnRpZXMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMgPSBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMob2JqLnByb3BlcnRpZXMpLm1hcCgoW2tleSwgdmFsdWVdKSA9PiBbXG4gICAgICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICAgICAgcHJ1bmVTY2hlbWEodmFsdWUpLFxuICAgICAgICAgICAgICAgIF0pKTtcbiAgICAgICAgICAgICAgICByZXN1bHQucHJvcGVydHlPcmRlcmluZyA9IE9iamVjdC5rZXlzKG9iai5wcm9wZXJ0aWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgncmVxdWlyZWQnIGluIG9iaikge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5yZXF1aXJlZCA9IG9iai5yZXF1aXJlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgnbWluUHJvcGVydGllcycgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0Lm1pblByb3BlcnRpZXMgPSAoX2MgPSBvYmoubWluUHJvcGVydGllcykgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJ21heFByb3BlcnRpZXMnIGluIG9iaikge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5tYXhQcm9wZXJ0aWVzID0gKF9kID0gb2JqLm1heFByb3BlcnRpZXMpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCdtaW5MZW5ndGgnIGluIG9iaikge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5taW5MZW5ndGggPSAoX2UgPSBvYmoubWluTGVuZ3RoKSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2UudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgnbWF4TGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICByZXN1bHQubWF4TGVuZ3RoID0gKF9mID0gb2JqLm1heExlbmd0aCkgPT09IG51bGwgfHwgX2YgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJ3BhdHRlcm4nIGluIG9iaikge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wYXR0ZXJuID0gb2JqLnBhdHRlcm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJ2V4YW1wbGUnIGluIG9iaikge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5leGFtcGxlID0gb2JqLmV4YW1wbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJ2FueU9mJyBpbiBvYmogJiYgQXJyYXkuaXNBcnJheShvYmouYW55T2YpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmFueU9mID0gb2JqLmFueU9mLm1hcChwcnVuZVNjaGVtYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJ3Byb3BlcnR5T3JkZXJpbmcnIGluIG9iaikge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0eU9yZGVyaW5nID0gb2JqLnByb3BlcnR5T3JkZXJpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJ2RlZmF1bHQnIGluIG9iaikge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5kZWZhdWx0ID0gb2JqLmRlZmF1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJ2l0ZW1zJyBpbiBvYmogJiYgdHlwZW9mIG9iai5pdGVtcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQuaXRlbXMgPSBwcnVuZVNjaGVtYShvYmouaXRlbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCdtaW5pbXVtJyBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICByZXN1bHQubWluaW11bSA9IG9iai5taW5pbXVtO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCdtYXhpbXVtJyBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICByZXN1bHQubWF4aW11bSA9IG9iai5tYXhpbXVtO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJ1bmVTY2hlbWEob3BlbkFwaVNjaGVtYSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZXh0LmZuLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@hashbrownai+google@0.3.0_@google+genai@0.8.0_@hashbrownai+core@0.3.0/node_modules/@hashbrownai/google/src/stream/text.fn.js\n");

/***/ })

};
;
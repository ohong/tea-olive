"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@hashbrownai+react@0.3.0_@hashbrownai+core@0.3.0_react-dom@18.3.1_react@18.3.1__react@18.3.1";
exports.ids = ["vendor-chunks/@hashbrownai+react@0.3.0_@hashbrownai+core@0.3.0_react-dom@18.3.1_react@18.3.1__react@18.3.1"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@hashbrownai+react@0.3.0_@hashbrownai+core@0.3.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@hashbrownai/react/index.esm.js":
/*!**********************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@hashbrownai+react@0.3.0_@hashbrownai+core@0.3.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@hashbrownai/react/index.esm.js ***!
  \**********************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HashbrownProvider: () => (/* binding */ HashbrownProvider),\n/* harmony export */   exposeComponent: () => (/* binding */ exposeComponent),\n/* harmony export */   useChat: () => (/* binding */ useChat),\n/* harmony export */   useCompletion: () => (/* binding */ useCompletion),\n/* harmony export */   useRuntime: () => (/* binding */ useRuntime),\n/* harmony export */   useRuntimeFunction: () => (/* binding */ useRuntimeFunction),\n/* harmony export */   useStructuredChat: () => (/* binding */ useStructuredChat),\n/* harmony export */   useStructuredCompletion: () => (/* binding */ useStructuredCompletion),\n/* harmony export */   useTool: () => (/* binding */ useTool),\n/* harmony export */   useToolJavaScript: () => (/* binding */ useToolJavaScript),\n/* harmony export */   useUiChat: () => (/* binding */ useUiChat)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _hashbrownai_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @hashbrownai/core */ \"(ssr)/./node_modules/.pnpm/@hashbrownai+core@0.3.0/node_modules/@hashbrownai/core/index.esm.js\");\n\n\n\n\n/**\n * Creates an object used to expose a component for use by the LLM.\n *\n * @example\n * ```ts\n * exposeComponent(\n *   CardComponent, // The React component to be exposed.\n *   { // The exposed component configuration.\n *     name: 'CardComponent',\n *     description: 'Show a card with children components to the user',\n *     children: 'any',\n *     props: {\n *       title: s.string('The title of the card'),\n *       description: s.streaming.string('The description of the card'),\n *     },\n *   },\n * });\n * ```\n *\n * @returns An object representing the component in order to expose it to the LLM.\n * @public\n */\nfunction exposeComponent(\n/**\n * The component to be exposed.\n */\ncomponent,\n/**\n * The configuration object for the component, excluding the component itself.\n */\nconfig) {\n  return Object.assign({\n    component\n  }, config);\n}\n\nconst HashbrownContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n/**\n * The context for the Hashbrown provider.  This is used to store the URL and middleware for contacting the Hashbrown endpoint.\n *\n * @public\n * @example\n * ```ts\n * <HashbrownProvider url=\"https://your.api.local/chat\">\n *   <App />\n * </HashbrownProvider>\n * ```\n */\nconst HashbrownProvider = (\n/**\n * The options for the Hashbrown provider.\n */\nprops) => {\n  const {\n    url,\n    middleware,\n    children\n  } = props;\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(HashbrownContext.Provider, {\n    value: {\n      url,\n      middleware\n    },\n    children: children\n  });\n};\n\n/**\n * Connects a Hashbrown Signal to React's reactivity system\n *\n * @param signal - The signal to connect to React\n * @returns The value contained in the signal\n */\nfunction useHashbrownSignal(signal) {\n  const lastValue = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(signal());\n  const hasSkippedFirstCall = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n  const equality = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((a, b) => (0,_hashbrownai_core__WEBPACK_IMPORTED_MODULE_2__[\"ÉµdeepEqual\"])(a, b), []);\n  const read = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {\n    const value = signal();\n    if (!equality(value, lastValue.current)) {\n      lastValue.current = value;\n    }\n    return lastValue.current;\n  }, [signal, equality]);\n  const subscribe = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(onStoreChange => {\n    let lastRead;\n    const cleanup = signal.subscribe(value => {\n      if (!hasSkippedFirstCall.current) {\n        hasSkippedFirstCall.current = true;\n        return;\n      }\n      const currentValue = read();\n      if (currentValue !== lastRead) {\n        lastRead = currentValue;\n        onStoreChange();\n      }\n    });\n    return () => {\n      cleanup();\n      hasSkippedFirstCall.current = false;\n    };\n  }, [signal, read]);\n  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStore)(subscribe, read);\n}\n\n/**\n * This React hook creates a chat instance used to interact with the LLM.\n * The result object contains functions and state enabling you to send and recieve messages and monitor the state of the chat.\n *\n * The `useChat` hook provides the most basic functionality for un-structured chats.  Unstructured chats include things like general chats and natural language controls.\n *\n * @public\n * @returns An object containing chat state and functions to interact with the chat.\n * @typeParam Tools - The set of tool definitions available to the chat.\n * @example\n * This example demonstrates how to use the `useChat` hook to create a simple chat component.\n *\n * ```tsx\n * const MyChatComponent = () => {\n *   const { messages, sendMessage, status } = useChat({\n *     model: 'gpt-4o',\n *     system: 'You are a helpful assistant.',\n *     tools: [],\n *   });\n *\n *   const handleSendMessage = () => {\n *     sendMessage({ role: 'user', content: 'Hello, how are you?' });\n *   };\n *\n *   return (\n *     <div>\n *       <button onClick={handleSendMessage}>Send Message</button>\n *       <div>Status: {status}</div>\n *       <ul>\n *         {messages.map((msg, index) => (\n *           <li key={index}>{msg.content}</li>\n *         ))}\n *       </ul>\n *     </div>\n *   );\n * };\n * ```\n */\nfunction useChat(\n/**\n * The options for the chat.\n */\noptions) {\n  var _a;\n  const tools = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    var _a;\n    return (_a = options.tools) !== null && _a !== void 0 ? _a : [];\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  (_a = options.tools) !== null && _a !== void 0 ? _a : []);\n  const config = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(HashbrownContext);\n  if (!config) {\n    throw new Error('HashbrownContext not found');\n  }\n  const hashbrownRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n  if (!hashbrownRef.current) {\n    hashbrownRef.current = (0,_hashbrownai_core__WEBPACK_IMPORTED_MODULE_2__.fryHashbrown)({\n      apiUrl: config.url,\n      middleware: config.middleware,\n      debugName: options.debugName,\n      model: options.model,\n      system: options.system,\n      tools,\n      debounce: options.debounceTime,\n      retries: options.retries\n    });\n  }\n  function getHashbrown() {\n    const instance = hashbrownRef.current;\n    if (!instance) {\n      throw new Error('Hashbrown not found');\n    }\n    return instance;\n  }\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    return getHashbrown().sizzle();\n  }, []);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    getHashbrown().updateOptions({\n      apiUrl: config.url,\n      middleware: config.middleware,\n      debugName: options.debugName,\n      model: options.model,\n      system: options.system,\n      tools,\n      debounce: options.debounceTime,\n      retries: options.retries\n    });\n  }, [config.url, config.middleware, options.debounceTime, options.debugName, options.model, options.retries, options.system, tools]);\n  const internalMessages = useHashbrownSignal(getHashbrown().messages);\n  const isReceiving = useHashbrownSignal(getHashbrown().isReceiving);\n  const isSending = useHashbrownSignal(getHashbrown().isSending);\n  const isRunningToolCalls = useHashbrownSignal(getHashbrown().isRunningToolCalls);\n  const exhaustedRetries = useHashbrownSignal(getHashbrown().exhaustedRetries);\n  const error = useHashbrownSignal(getHashbrown().error);\n  const lastAssistantMessage = useHashbrownSignal(getHashbrown().lastAssistantMessage);\n  const sendMessage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(message => {\n    getHashbrown().sendMessage(message);\n  }, []);\n  const setMessages = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(messages => {\n    getHashbrown().setMessages(messages);\n  }, []);\n  const reload = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {\n    const lastMessage = internalMessages[internalMessages.length - 1];\n    if (lastMessage.role === 'assistant') {\n      getHashbrown().setMessages(internalMessages.slice(0, -1));\n      return true;\n    }\n    return false;\n  }, [internalMessages]);\n  const stop = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((clearStreamingMessage = false) => {\n    getHashbrown().stop(clearStreamingMessage);\n  }, []);\n  return {\n    messages: internalMessages,\n    sendMessage,\n    setMessages,\n    stop,\n    reload,\n    error,\n    isReceiving,\n    isSending,\n    isRunningToolCalls,\n    exhaustedRetries,\n    lastAssistantMessage\n  };\n}\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\r\n\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\n/**\n * This React hook creates a change instance used to interact with the LLM.\n * The result object contains functions and state enabling you to send and recieve messages and monitor the state of the chat.\n *\n * @public\n * @remarks\n * The `useCompletion` hook provides functionality for completing unstructured inputs with predicted unstructured outputs.  This is useful for things like natural language autocompletions.\n *\n * @example\n * ```ts\n * const { output } = useCompletion({\n *   model: 'gpt-4o-mini',\n *   input: firstName,\n *   system: `Help the user generate a last name for the given first name.`,\n * });\n * ```\n */\nfunction useCompletion(\n/**\n * The options to configure the completion chat.\n */\noptions) {\n  const _a = useChat(Object.assign({}, options)),\n    {\n      setMessages\n    } = _a,\n    chat = __rest(_a, [\"setMessages\"]);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    if (!options.input) return;\n    setMessages([{\n      role: 'user',\n      content: options.input\n    }]);\n  }, [setMessages, options.input]);\n  const output = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    const message = chat.messages.find(message => message.role === 'assistant' && !(message.toolCalls && message.toolCalls.length) && message.content);\n    if (!message) return null;\n    if (typeof message.content !== 'string') return null;\n    return message.content;\n  }, [chat.messages]);\n  return {\n    output,\n    reload: chat.reload,\n    error: chat.error,\n    isReceiving: chat.isReceiving,\n    isSending: chat.isSending,\n    isRunningToolCalls: chat.isRunningToolCalls,\n    exhaustedRetries: chat.exhaustedRetries\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Creates a new runtime.\n *\n * @param options - The options for creating the runtime.\n * @returns A reference to the runtime.\n *\n * @public\n */\nfunction useRuntime(options) {\n  var _a;\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const functions = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => options.functions, (_a = options.functions) !== null && _a !== void 0 ? _a : []);\n  const runtime = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => (0,_hashbrownai_core__WEBPACK_IMPORTED_MODULE_2__[\"ÉµcreateRuntimeImpl\"])({\n    functions,\n    timeout: options.timeout\n  }), [functions, options.timeout]);\n  return runtime;\n}\n\n/* eslint-disable no-redeclare */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * @public\n */\nfunction useRuntimeFunction(cfg) {\n  const argsSchemaRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)('args' in cfg ? cfg.args : undefined);\n  const resultSchemaRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)('result' in cfg ? cfg.result : undefined);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const handler = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(cfg.handler, cfg.deps);\n  const fn = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    return (0,_hashbrownai_core__WEBPACK_IMPORTED_MODULE_2__[\"ÉµcreateRuntimeFunctionImpl\"])({\n      args: argsSchemaRef.current,\n      result: resultSchemaRef.current,\n      handler,\n      name: cfg.name,\n      description: cfg.description\n    });\n  }, [handler, cfg.name, cfg.description]);\n  return fn;\n}\n\n/**\n * This React hook creates a chat instance used to interact with the LLM.\n * The result object contains functions and state enabling you to send and receive messages and monitor the state of the chat.\n *\n * @public\n * @remarks\n * The `useStructuredChat` hook provides functionality for structured chats. Structured chats are used when you want to use the LLM to generate structured data according to a defined schema. This is particularly useful for:\n * - Generating typed data structures\n * - Creating form responses\n * - Building UI components\n * - Extracting information into a specific format\n *\n * @returns An object containing chat state and functions to interact with the chat.\n *\n * @example\n * In this example, the LLM will respond with a JSON object containing the translations of the input message into English, Spanish, and French.\n * ```tsx\n * const { messages, sendMessage } = useStructuredChat({\n *   model: 'gpt-4o',\n *   system: 'You are a helpful translator that provides accurate translations.',\n *   schema: s.object('Translations', {\n *     english: s.string('English translation'),\n *     spanish: s.string('Spanish translation'),\n *     french: s.string('French translation')\n *   }),\n * });\n * ```\n */\nfunction useStructuredChat(options) {\n  var _a;\n  const config = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(HashbrownContext);\n  if (!config) {\n    throw new Error('HashbrownContext not found');\n  }\n  const tools = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    var _a;\n    return (_a = options.tools) !== null && _a !== void 0 ? _a : [];\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  (_a = options.tools) !== null && _a !== void 0 ? _a : []);\n  const [schema] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(options.schema);\n  const hashbrown = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n  if (!hashbrown.current) {\n    hashbrown.current = (0,_hashbrownai_core__WEBPACK_IMPORTED_MODULE_2__.fryHashbrown)({\n      apiUrl: config.url,\n      middleware: config.middleware,\n      model: options.model,\n      system: options.system,\n      responseSchema: schema,\n      tools,\n      debugName: options.debugName,\n      debounce: options.debounceTime,\n      retries: options.retries\n    });\n  }\n  function getHashbrown() {\n    const instance = hashbrown.current;\n    if (!instance) {\n      throw new Error('Hashbrown not found');\n    }\n    return instance;\n  }\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    return getHashbrown().sizzle();\n  }, []);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    getHashbrown().updateOptions({\n      apiUrl: config.url,\n      middleware: config.middleware,\n      model: options.model,\n      system: options.system,\n      responseSchema: schema,\n      tools,\n      debugName: options.debugName,\n      debounce: options.debounceTime,\n      retries: options.retries\n    });\n  }, [config.url, config.middleware, options.model, options.system, options.debugName, schema, tools, options.debounceTime, options.retries]);\n  const internalMessages = useHashbrownSignal(hashbrown.current.messages);\n  const isReceiving = useHashbrownSignal(hashbrown.current.isReceiving);\n  const isSending = useHashbrownSignal(hashbrown.current.isSending);\n  const isRunningToolCalls = useHashbrownSignal(hashbrown.current.isRunningToolCalls);\n  const exhaustedRetries = useHashbrownSignal(hashbrown.current.exhaustedRetries);\n  const error = useHashbrownSignal(hashbrown.current.error);\n  const lastAssistantMessage = useHashbrownSignal(hashbrown.current.lastAssistantMessage);\n  const sendMessage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(message => {\n    getHashbrown().sendMessage(message);\n  }, []);\n  const stop = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((clearStreamingMessage = false) => {\n    getHashbrown().stop(clearStreamingMessage);\n  }, []);\n  const resendMessages = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {\n    getHashbrown().resendMessages();\n  }, []);\n  const setMessages = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(messages => {\n    getHashbrown().setMessages(messages);\n  }, []);\n  const reload = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {\n    const lastMessage = internalMessages[internalMessages.length - 1];\n    if (lastMessage.role === 'assistant') {\n      getHashbrown().setMessages(internalMessages.slice(0, -1));\n      return true;\n    }\n    return false;\n  }, [internalMessages]);\n  return {\n    messages: internalMessages,\n    stop,\n    sendMessage,\n    resendMessages,\n    setMessages,\n    reload,\n    error,\n    isReceiving,\n    isSending,\n    isRunningToolCalls,\n    exhaustedRetries,\n    lastAssistantMessage\n  };\n}\n\n/**\n * This React hook creates a completion instance that predicts structured data based on input context.\n * The result object contains the predicted structured output and state for monitoring the completion.\n *\n * @public\n * @typeParam Input - The type of the input to predict from.\n * @typeParam Schema - The schema to use for the chat.\n * @remarks\n * The `useStructuredCompletion` hook provides functionality for predicting structured data based on input context. This is particularly useful for:\n * - Smart form field suggestions\n * - Context-aware recommendations\n * - Predictive UI generation\n * - Intelligent defaults\n *\n * @returns An object containing the predicted structured output and completion state.\n *\n * @example\n * In this example, the LLM will predict a color palette based on a given theme or mood.\n * ```tsx\n * const { output } = useStructuredCompletion({\n *   model: 'gpt-4o',\n *   system: `Predict a color palette based on the given mood or theme. For example,\n *   if the theme is \"Calm Ocean\", suggest appropriate colors.`,\n *   input: theme,\n *   schema: s.object('Color Palette', {\n *     colors: s.array(\n *       'The colors in the palette',\n *       s.string('Hex color code')\n *     )\n *   })\n * });\n * ```\n */\nfunction useStructuredCompletion(options) {\n  const _a = useStructuredChat(Object.assign({}, options)),\n    {\n      setMessages\n    } = _a,\n    chat = __rest(_a, [\"setMessages\"]);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    if (!options.input) return;\n    setMessages([{\n      role: 'user',\n      content: options.input\n    }]);\n  }, [setMessages, options.input]);\n  const output = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    const message = chat.messages.find(message => message.role === 'assistant' && message.content);\n    if (!message) return null;\n    return message.content;\n  }, [chat.messages]);\n  return {\n    output,\n    reload: chat.reload,\n    error: chat.error,\n    isReceiving: chat.isReceiving,\n    isSending: chat.isSending,\n    isRunningToolCalls: chat.isRunningToolCalls,\n    exhaustedRetries: chat.exhaustedRetries\n  };\n}\n\n/* eslint no-redeclare: off */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * @public\n */\nfunction useTool(input) {\n  const {\n    name,\n    description,\n    handler,\n    deps\n  } = input;\n  // assumes the schema will never change\n  const [schema] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('schema' in input ? input.schema : _hashbrownai_core__WEBPACK_IMPORTED_MODULE_2__.s.object('Empty schema', {}));\n  // assumes the handler should only change if its deps change,\n  //   which enables the use of anonymous functions in the handler.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const stableHandler = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(handler, deps);\n  const tool = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    return {\n      name,\n      description,\n      schema,\n      handler: stableHandler\n    };\n  }, [name, description, schema, stableHandler]);\n  return tool;\n}\n\n/**\n * Creates a tool that allows the LLM to run JavaScript code. It is run\n * in a stateful JavaScript environment, with no access to the internet, the DOM,\n * or any function that you have not explicitly defined.\n *\n * @public\n * @param options - The options for creating the tool.\n * @returns The tool.\n */\nfunction useToolJavaScript({\n  runtime\n}) {\n  return useTool({\n    name: 'javascript',\n    description: ['Whenever you send a message containing JavaScript code to javascript, it will be', 'executed in a stateful JavaScript environment. javascript will respond with the output', `of the execution or time out after ${runtime.timeout / 1000} seconds. Internet access`, 'for this session is disabled. Do not make external web requests or API calls as they', 'will fail.', '', 'Important: Prefer calling javascript once with a large amount of code, rather than calling it', 'multiple times with smaller amounts of code.', '', 'The following functions are available to you:', runtime.describe()].join('\\n'),\n    schema: _hashbrownai_core__WEBPACK_IMPORTED_MODULE_2__.s.streaming.object('The result', {\n      code: _hashbrownai_core__WEBPACK_IMPORTED_MODULE_2__.s.streaming.string('The JavaScript code to run')\n    }),\n    deps: [runtime],\n    handler: (_a, abortSignal_1) => __awaiter(this, [_a, abortSignal_1], void 0, function* ({\n      code\n    }, abortSignal) {\n      return runtime.run(code, abortSignal);\n    })\n  });\n}\n\n/**\n * This React hook creates a chat instance that can generate and render UI components.\n * The result object contains functions and state enabling you to send and receive messages and monitor the state of the chat.\n *\n * @public\n * @typeParam Tools - The set of tool definitions available to the chat.\n * @remarks\n * The `useUiChat` hook provides functionality for generating UI components through chat. This is particularly useful for:\n * - Dynamic UI generation\n * - Interactive chat interfaces\n * - Component-based responses\n * - Building chat-based UIs\n *\n * @returns An object containing chat state, functions to interact with the chat, and rendered UI components.\n *\n * @example\n * In this example, the LLM will respond with a UI component that can be rendered directly in your React application.\n * ```tsx\n * const { messages, sendMessage } = useUiChat({\n *   model: 'gpt-4o',\n *   system: 'You are a helpful assistant that can generate UI components.',\n *   components: [\n *     exposeComponent(Button, {\n *       name: 'Button',\n *       description: 'A clickable button component',\n *       props: {\n *         label: s.string('The text to display on the button'),\n *         onClick: s.function('Function to call when clicked')\n *       }\n *     })\n *   ]\n * });\n * ```\n */\nconst useUiChat = options => {\n  const {\n      components: initialComponents\n    } = options,\n    chatOptions = __rest(options, [\"components\"]);\n  const [components, setComponents] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(initialComponents);\n  const [flattenedComponents] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(_hashbrownai_core__WEBPACK_IMPORTED_MODULE_2__[\"Éµui\"].flattenComponents(initialComponents));\n  const ui = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    return _hashbrownai_core__WEBPACK_IMPORTED_MODULE_2__.s.object('UI', {\n      ui: _hashbrownai_core__WEBPACK_IMPORTED_MODULE_2__.s.streaming.array('List of elements', _hashbrownai_core__WEBPACK_IMPORTED_MODULE_2__[\"Éµui\"].createComponentSchema(components))\n    });\n  }, [components]);\n  const systemAsString = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    if (typeof chatOptions.system === 'string') {\n      return chatOptions.system;\n    }\n    const output = chatOptions.system.compile(components, ui);\n    if (chatOptions.system.diagnostics.length > 0) {\n      throw new Error(`System prompt has ${chatOptions.system.diagnostics.length} errors: \\n\\n${chatOptions.system.diagnostics.map(d => d.message).join('\\n\\n')}`);\n    }\n    return output;\n  }, [chatOptions.system, components, ui]);\n  const chat = useStructuredChat(Object.assign(Object.assign({}, chatOptions), {\n    schema: ui,\n    system: systemAsString\n  }));\n  const buildContent = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((nodes, parentKey = '') => {\n    if (typeof nodes === 'string') {\n      return nodes;\n    }\n    const elements = nodes.map((element, index) => {\n      var _a;\n      const key = `${parentKey}_${index}`;\n      const {\n        $tag,\n        $children,\n        $props\n      } = element;\n      const componentType = (_a = flattenedComponents.get($tag)) === null || _a === void 0 ? void 0 : _a.component;\n      if ($tag && componentType) {\n        const children = element.$children ? buildContent($children, key) : null;\n        return /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(componentType, Object.assign(Object.assign({}, $props), {\n          children,\n          key\n        }));\n      }\n      throw new Error(`Unknown element type. ${$tag}`);\n    });\n    return elements;\n  }, [flattenedComponents]);\n  const uiChatMessages = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    return chat.messages.map(message => {\n      var _a;\n      if (message.role === 'assistant') {\n        return Object.assign(Object.assign({}, message), {\n          ui: ((_a = message.content) === null || _a === void 0 ? void 0 : _a.ui) ? buildContent(message.content.ui) : null\n        });\n      }\n      return message;\n    });\n  }, [buildContent, chat.messages]);\n  const lastAssistantMessage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    return uiChatMessages.findLast(message => message.role === 'assistant');\n  }, [uiChatMessages]);\n  return Object.assign(Object.assign({}, chat), {\n    messages: uiChatMessages,\n    setComponents,\n    lastAssistantMessage\n  });\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@hashbrownai+react@0.3.0_@hashbrownai+core@0.3.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@hashbrownai/react/index.esm.js\n");

/***/ })

};
;
"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@openapi-contrib+json-schema-to-openapi-schema@3.0.3";
exports.ids = ["vendor-chunks/@openapi-contrib+json-schema-to-openapi-schema@3.0.3"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@openapi-contrib+json-schema-to-openapi-schema@3.0.3/node_modules/@openapi-contrib/json-schema-to-openapi-schema/dist/index.js":
/*!***********************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@openapi-contrib+json-schema-to-openapi-schema@3.0.3/node_modules/@openapi-contrib/json-schema-to-openapi-schema/dist/index.js ***!
  \***********************************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  default: () => src_default\n});\nmodule.exports = __toCommonJS(src_exports);\nvar import_json_schema_walker = __webpack_require__(/*! json-schema-walker */ \"(rsc)/./node_modules/.pnpm/json-schema-walker@2.0.0/node_modules/json-schema-walker/dist/index.js\");\n\n// src/const.ts\nvar allowedKeywords = [\n  \"$ref\",\n  \"definitions\",\n  // From Schema\n  \"title\",\n  \"multipleOf\",\n  \"maximum\",\n  \"exclusiveMaximum\",\n  \"minimum\",\n  \"exclusiveMinimum\",\n  \"maxLength\",\n  \"minLength\",\n  \"pattern\",\n  \"maxItems\",\n  \"minItems\",\n  \"uniqueItems\",\n  \"maxProperties\",\n  \"minProperties\",\n  \"required\",\n  \"enum\",\n  \"type\",\n  \"not\",\n  \"allOf\",\n  \"oneOf\",\n  \"anyOf\",\n  \"items\",\n  \"properties\",\n  \"additionalProperties\",\n  \"description\",\n  \"format\",\n  \"default\",\n  \"nullable\",\n  \"discriminator\",\n  \"readOnly\",\n  \"writeOnly\",\n  \"example\",\n  \"externalDocs\",\n  \"deprecated\",\n  \"xml\"\n];\n\n// src/index.ts\nvar InvalidTypeError = class extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"InvalidTypeError\";\n    this.message = message;\n  }\n};\nvar oasExtensionPrefix = \"x-\";\nvar handleDefinition = async (def, schema) => {\n  if (typeof def !== \"object\") {\n    return def;\n  }\n  const type = def.type;\n  if (type) {\n    const walker = new import_json_schema_walker.Walker();\n    await walker.loadSchema(\n      {\n        definitions: schema[\"definitions\"] || [],\n        ...def,\n        $schema: schema[\"$schema\"]\n      },\n      {\n        dereference: true,\n        cloneSchema: true,\n        dereferenceOptions: {\n          dereference: {\n            circular: \"ignore\"\n          }\n        }\n      }\n    );\n    await walker.walk(convertSchema, walker.vocabularies.DRAFT_07);\n    if (\"definitions\" in walker.rootSchema) {\n      delete walker.rootSchema.definitions;\n    }\n    return walker.rootSchema;\n  }\n  if (Array.isArray(def)) {\n    const typeArr = def;\n    const hasNull = typeArr.includes(\"null\");\n    if (hasNull) {\n      const actualTypes = typeArr.filter((l) => l !== \"null\");\n      return {\n        type: actualTypes.length === 1 ? actualTypes[0] : actualTypes,\n        nullable: true\n        // this is incorrect but thats ok, we are in the inbetween phase here\n      };\n    }\n  }\n  return def;\n};\nvar convert = async (schema, options) => {\n  const walker = new import_json_schema_walker.Walker();\n  const convertDefs = options?.convertUnreferencedDefinitions ?? true;\n  await walker.loadSchema(schema, options);\n  await walker.walk(convertSchema, walker.vocabularies.DRAFT_07);\n  const rootSchema = walker.rootSchema;\n  if (convertDefs && rootSchema?.definitions) {\n    for (const defName in rootSchema.definitions) {\n      const def = rootSchema.definitions[defName];\n      rootSchema.definitions[defName] = await handleDefinition(def, schema);\n    }\n  }\n  return rootSchema;\n};\nfunction stripIllegalKeywords(schema) {\n  if (typeof schema !== \"object\") {\n    return schema;\n  }\n  delete schema[\"$schema\"];\n  delete schema[\"$id\"];\n  if (\"id\" in schema) {\n    delete schema[\"id\"];\n  }\n  return schema;\n}\nfunction convertSchema(schema) {\n  if (!schema) {\n    return schema;\n  }\n  schema = stripIllegalKeywords(schema);\n  schema = convertTypes(schema);\n  schema = rewriteConst(schema);\n  schema = convertDependencies(schema);\n  schema = convertNullable(schema);\n  schema = rewriteIfThenElse(schema);\n  schema = rewriteExclusiveMinMax(schema);\n  schema = convertExamples(schema);\n  if (typeof schema[\"patternProperties\"] === \"object\") {\n    schema = convertPatternProperties(schema);\n  }\n  if (schema.type === \"array\" && typeof schema.items === \"undefined\") {\n    schema.items = {};\n  }\n  schema = convertIllegalKeywordsAsExtensions(schema);\n  return schema;\n}\nvar validTypes = /* @__PURE__ */ new Set([\n  \"null\",\n  \"boolean\",\n  \"object\",\n  \"array\",\n  \"number\",\n  \"string\",\n  \"integer\"\n]);\nfunction validateType(type) {\n  if (typeof type === \"object\" && !Array.isArray(type)) {\n    if (type.$ref) {\n      return;\n    }\n    if (type.properties) {\n      return;\n    }\n  }\n  const types = Array.isArray(type) ? type : [type];\n  types.forEach((type2) => {\n    if (type2 && !validTypes.has(type2))\n      throw new InvalidTypeError('Type \"' + type2 + '\" is not a valid type');\n  });\n}\nfunction convertDependencies(schema) {\n  const deps = schema.dependencies;\n  if (typeof deps !== \"object\") {\n    return schema;\n  }\n  delete schema[\"dependencies\"];\n  if (!Array.isArray(schema.allOf)) {\n    schema.allOf = [];\n  }\n  for (const key in deps) {\n    const foo = {\n      oneOf: [\n        {\n          not: {\n            required: [key]\n          }\n        },\n        {\n          required: [key, deps[key]].flat()\n        }\n      ]\n    };\n    schema.allOf.push(foo);\n  }\n  return schema;\n}\nfunction convertNullable(schema) {\n  for (const key of [\"oneOf\", \"anyOf\"]) {\n    const schemas = schema[key];\n    if (!schemas) continue;\n    if (!Array.isArray(schemas)) {\n      return schema;\n    }\n    const hasNullable = schemas.some((item) => item.type === \"null\");\n    if (!hasNullable) {\n      return schema;\n    }\n    const filtered = schemas.filter((l) => l.type !== \"null\");\n    for (const schemaEntry of filtered) {\n      schemaEntry.nullable = true;\n    }\n    schema[key] = filtered;\n  }\n  return schema;\n}\nfunction convertTypes(schema) {\n  if (typeof schema !== \"object\") {\n    return schema;\n  }\n  if (schema.type === void 0) {\n    return schema;\n  }\n  validateType(schema.type);\n  if (Array.isArray(schema.type)) {\n    if (schema.type.includes(\"null\")) {\n      schema.nullable = true;\n    }\n    const typesWithoutNull = schema.type.filter((type) => type !== \"null\");\n    if (typesWithoutNull.length === 0) {\n      delete schema.type;\n    } else if (typesWithoutNull.length === 1) {\n      schema.type = typesWithoutNull[0];\n    } else {\n      delete schema.type;\n      schema.anyOf = typesWithoutNull.map((type) => ({ type }));\n    }\n  } else if (schema.type === \"null\") {\n    delete schema.type;\n    schema.nullable = true;\n  }\n  return schema;\n}\nfunction convertPatternProperties(schema) {\n  schema[\"x-patternProperties\"] = schema[\"patternProperties\"];\n  delete schema[\"patternProperties\"];\n  schema.additionalProperties ?? (schema.additionalProperties = true);\n  return schema;\n}\nfunction convertIllegalKeywordsAsExtensions(schema) {\n  const keys = Object.keys(schema);\n  keys.filter(\n    (keyword) => !keyword.startsWith(oasExtensionPrefix) && !allowedKeywords.includes(keyword)\n  ).forEach((keyword) => {\n    const key = `${oasExtensionPrefix}${keyword}`;\n    schema[key] = schema[keyword];\n    delete schema[keyword];\n  });\n  return schema;\n}\nfunction convertExamples(schema) {\n  if (schema[\"examples\"] && Array.isArray(schema[\"examples\"])) {\n    schema[\"example\"] = schema[\"examples\"][0];\n    delete schema[\"examples\"];\n  }\n  return schema;\n}\nfunction rewriteConst(schema) {\n  if (Object.hasOwnProperty.call(schema, \"const\")) {\n    schema.enum = [schema.const];\n    delete schema.const;\n  }\n  return schema;\n}\nfunction rewriteIfThenElse(schema) {\n  if (typeof schema !== \"object\") {\n    return schema;\n  }\n  if (\"if\" in schema && schema.if && schema.then) {\n    schema.oneOf = [\n      { allOf: [schema.if, schema.then].filter(Boolean) },\n      { allOf: [{ not: schema.if }, schema.else].filter(Boolean) }\n    ];\n    delete schema.if;\n    delete schema.then;\n    delete schema.else;\n  }\n  return schema;\n}\nfunction rewriteExclusiveMinMax(schema) {\n  if (typeof schema.exclusiveMaximum === \"number\") {\n    schema.maximum = schema.exclusiveMaximum;\n    schema.exclusiveMaximum = true;\n  }\n  if (typeof schema.exclusiveMinimum === \"number\") {\n    schema.minimum = schema.exclusiveMinimum;\n    schema.exclusiveMinimum = true;\n  }\n  return schema;\n}\nvar src_default = convert;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@openapi-contrib+json-schema-to-openapi-schema@3.0.3/node_modules/@openapi-contrib/json-schema-to-openapi-schema/dist/index.js\n");

/***/ })

};
;
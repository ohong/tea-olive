"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/json-schema-walker@2.0.0";
exports.ids = ["vendor-chunks/json-schema-walker@2.0.0"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/json-schema-walker@2.0.0/node_modules/json-schema-walker/dist/index.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/json-schema-walker@2.0.0/node_modules/json-schema-walker/dist/index.js ***!
  \***************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Walker = void 0;\nconst clone_1 = __importDefault(__webpack_require__(/*! clone */ \"(rsc)/./node_modules/.pnpm/clone@2.1.2/node_modules/clone/clone.js\"));\nconst json_schema_ref_parser_1 = __importDefault(__webpack_require__(/*! @apidevtools/json-schema-ref-parser */ \"(rsc)/./node_modules/.pnpm/@apidevtools+json-schema-ref-parser@11.9.3/node_modules/@apidevtools/json-schema-ref-parser/dist/lib/index.js\"));\nconst visited = Symbol(\"visited\");\nconst NEXT_SCHEMA_KEYWORD = Symbol(\"NEXT_SCHEMA_KEYWORD\");\nconst NEXT_LDO_KEYWORD = Symbol(\"NEXT_LDO_KEYWORD\");\n/**\n * This is a hotfix and really only a partial solution as it does not cover all cases.\n *\n * But it's the best we can do until we find or build a better library to handle references.\n *\n * original source https://github.com/asyncapi/modelina/pull/829/files\n */\nconst handleRootReference = (input) => {\n    //Because of https://github.com/APIDevTools/json-schema-ref-parser/issues/201 the tool cannot handle root references.\n    //This really is a bad patch to fix an underlying problem, but until a full library is available, this is best we can do.\n    const hasRootRef = input.$ref !== undefined;\n    if (hasRootRef) {\n        //When we encounter it, manually try to resolve the reference in the definitions section\n        const hasDefinitionSection = input.definitions !== undefined;\n        if (hasDefinitionSection) {\n            const definitionLink = \"#/definitions/\";\n            const referenceLink = input.$ref.slice(0, definitionLink.length);\n            const referenceIsLocal = referenceLink === definitionLink;\n            if (referenceIsLocal) {\n                const definitionName = input.$ref.slice(definitionLink.length);\n                const definition = input.definitions[String(definitionName)];\n                const definitionExist = definition !== undefined;\n                if (definitionExist) {\n                    delete input.$ref;\n                    return { ...definition, ...input };\n                }\n            }\n        }\n    }\n    return input;\n};\nclass Walker {\n    constructor() {\n        this.loadSchema = async (schema, options) => {\n            const { cloneSchema = true, dereference = false, dereferenceOptions } = options || {};\n            this.rootSchema = cloneSchema ? (0, clone_1.default)(schema) : schema;\n            if (dereference) {\n                const parser = new json_schema_ref_parser_1.default();\n                this.rootSchema = (await parser.dereference(handleRootReference(schema), dereferenceOptions || {}));\n            }\n        };\n        this.walk = async (processor, vocabulary) => {\n            this.vocabulary = vocabulary ?? this.vocabularies.DRAFT_07;\n            this.walker = processor;\n            this.walker(this.rootSchema);\n            await this.subschemaWalk(this.rootSchema);\n            // clean up the symbols we injected to check for circular references\n            this.cleanupVisited(this.rootSchema);\n        };\n        this.cleanupVisited = (schema) => {\n            for (const entry of Object.values(schema)) {\n                if (entry && typeof entry === \"object\" && entry[visited]) {\n                    delete entry[visited];\n                    this.cleanupVisited(entry);\n                }\n            }\n        };\n        this.isValidSubSchema = (schema) => (schema instanceof Object && !Array.isArray(schema)) || typeof schema === \"boolean\";\n        this.applyUserProcessor = (schema, key) => {\n            const schemaElement = schema[key];\n            if (typeof schemaElement !== \"object\") {\n                return;\n            }\n            schemaElement[visited] = true;\n            this.walker(schemaElement);\n            this.subschemaWalk(schemaElement);\n        };\n        this.subschemaWalk = (schema) => {\n            for (const keyword in schema) {\n                try {\n                    this.processSchemaKey(schema, keyword);\n                }\n                catch (e) {\n                    if (e !== NEXT_SCHEMA_KEYWORD) {\n                        throw e;\n                    }\n                }\n            }\n        };\n        // These are the processors\n        this.processSchemaKey = (schema, keyword) => {\n            if (!schema[keyword] || typeof schema[keyword] !== \"object\") {\n                return;\n            }\n            const processorFunction = this.vocabulary[keyword];\n            if (!processorFunction) {\n                return;\n            }\n            schema[keyword][visited] = true;\n            processorFunction(schema, keyword);\n        };\n        this.processObjectOfSchemas = (schema, keyword) => {\n            for (const prop of Object.getOwnPropertyNames(schema[keyword])) {\n                const schemaElem = schema[keyword][prop];\n                if (typeof schemaElem === \"object\" && schemaElem) {\n                    this.applyUserProcessor(schema[keyword], prop);\n                }\n            }\n        };\n        this.processArrayOfSchemas = (schema, keyword) => {\n            for (const prop of Object.getOwnPropertyNames(schema[keyword])) {\n                const schemaElem = schema[keyword][prop];\n                if (schemaElem && typeof schemaElem === \"object\") {\n                    this.applyUserProcessor(schema[keyword], prop);\n                }\n            }\n            for (let i = 0; i < schema[keyword].length; i++) {\n                this.applyUserProcessor(schema[keyword], i);\n            }\n        };\n        this.processSingleOrArrayOfSchemas = (schema, keyword) => {\n            if (this.isValidSubSchema(schema[keyword])) {\n                this.processSingleSchema(schema, keyword);\n            }\n            else {\n                this.processArrayOfSchemas(schema, keyword);\n            }\n        };\n        this.processSingleSchema = (schema, keyword) => {\n            this.applyUserProcessor(schema, keyword);\n        };\n        /**\n         * Loop over the links and apply the callbacks, while\n         * handling LDO keyword deletions by catching NEXT_LDO_KEYWORD.\n         */\n        this.getProcessLinks = (ldoVocabulary) => {\n            return (schema, keyword) => {\n                for (const ldo of schema.links) {\n                    for (const key in ldo) {\n                        try {\n                            ldoVocabulary[keyword]?.(schema, key);\n                        }\n                        catch (e) {\n                            if (e !== NEXT_LDO_KEYWORD) {\n                                throw e;\n                            }\n                        }\n                    }\n                }\n            };\n        };\n        // vocabulary initialization\n        this.initVocabulary = () => {\n            const DRAFT_04 = {\n                properties: this.processObjectOfSchemas,\n                patternProperties: this.processObjectOfSchemas,\n                additionalProperties: this.processSingleSchema,\n                dependencies: this.processObjectOfSchemas,\n                items: this.processSingleOrArrayOfSchemas,\n                additionalItems: this.processSingleSchema,\n                allOf: this.processArrayOfSchemas,\n                anyOf: this.processArrayOfSchemas,\n                oneOf: this.processArrayOfSchemas,\n                not: this.processSingleSchema,\n                if: this.processSingleSchema,\n                then: this.processSingleSchema,\n                else: this.processSingleSchema,\n            };\n            /**\n             * LDO keywords call _apply directly as they have a different\n             * mapping from the schema keyword into the path that _apply\n             * expects.  This is done in the function returned from\n             * _getProcessLinks();\n             */\n            const DRAFT_04_HYPER_LDO = {\n                schema: this.applyUserProcessor,\n                targetSchema: this.applyUserProcessor,\n            };\n            const DRAFT_04_HYPER = {\n                ...DRAFT_04,\n                links: this.getProcessLinks(DRAFT_04_HYPER_LDO),\n            };\n            const DRAFT_06 = {\n                ...DRAFT_04,\n                propertyNames: this.processObjectOfSchemas,\n            };\n            const DRAFT_06_HYPER_LDO = {\n                hrefSchema: this.applyUserProcessor,\n                targetSchema: this.applyUserProcessor,\n                submissionSchema: this.applyUserProcessor,\n            };\n            const DRAFT_06_HYPER = {\n                ...DRAFT_06,\n                links: this.getProcessLinks(DRAFT_06_HYPER_LDO),\n            };\n            const DRAFT_07 = { ...DRAFT_06 };\n            const DRAFT_07_HYPER_LDO = {\n                ...DRAFT_06_HYPER_LDO,\n                headerSchema: this.applyUserProcessor,\n            };\n            const DRAFT_07_HYPER = {\n                ...DRAFT_07,\n                links: this.getProcessLinks(DRAFT_07_HYPER_LDO),\n            };\n            const CLOUDFLARE_DOCA = {\n                ...DRAFT_04,\n                links: this.getProcessLinks({\n                    ...DRAFT_04_HYPER_LDO,\n                    ...DRAFT_07_HYPER_LDO,\n                }),\n            };\n            this.vocabularies = {\n                DRAFT_04,\n                DRAFT_04_HYPER,\n                DRAFT_04_HYPER_LDO,\n                DRAFT_06,\n                DRAFT_06_HYPER,\n                DRAFT_06_HYPER_LDO,\n                DRAFT_07,\n                DRAFT_07_HYPER,\n                DRAFT_07_HYPER_LDO,\n                CLOUDFLARE_DOCA,\n            };\n        };\n        this.initVocabulary();\n    }\n}\nexports.Walker = Walker;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/json-schema-walker@2.0.0/node_modules/json-schema-walker/dist/index.js\n");

/***/ })

};
;
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/page"],{

/***/ "(app-pages-browser)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fohong%2FLibrary%2FMobile%20Documents%2Fcom~apple~CloudDocs%2Fdev%2Ftea-olive%2Fweb%2Fsrc%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!":
/*!*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fohong%2FLibrary%2FMobile%20Documents%2Fcom~apple~CloudDocs%2Fdev%2Ftea-olive%2Fweb%2Fsrc%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false! ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/page.tsx */ \"(app-pages-browser)/./src/app/page.tsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE0LjIuMzJfcmVhY3QtZG9tQDE4LjMuMV9yZWFjdEAxOC4zLjFfX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWZsaWdodC1jbGllbnQtZW50cnktbG9hZGVyLmpzP21vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRlVzZXJzJTJGb2hvbmclMkZMaWJyYXJ5JTJGTW9iaWxlJTIwRG9jdW1lbnRzJTJGY29tfmFwcGxlfkNsb3VkRG9jcyUyRmRldiUyRnRlYS1vbGl2ZSUyRndlYiUyRnNyYyUyRmFwcCUyRnBhZ2UudHN4JTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJnNlcnZlcj1mYWxzZSEiLCJtYXBwaW5ncyI6IkFBQUEsOEpBQWlJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8/ZDM0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy9vaG9uZy9MaWJyYXJ5L01vYmlsZSBEb2N1bWVudHMvY29tfmFwcGxlfkNsb3VkRG9jcy9kZXYvdGVhLW9saXZlL3dlYi9zcmMvYXBwL3BhZ2UudHN4XCIpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fohong%2FLibrary%2FMobile%20Documents%2Fcom~apple~CloudDocs%2Fdev%2Ftea-olive%2Fweb%2Fsrc%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@hashbrownai+core@0.3.0/node_modules/@hashbrownai/core/index.esm.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@hashbrownai+core@0.3.0/node_modules/@hashbrownai/core/index.esm.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chat: function() { return /* binding */ public_api; },\n/* harmony export */   decodeFrames: function() { return /* binding */ decodeFrames; },\n/* harmony export */   encodeFrame: function() { return /* binding */ encodeFrame; },\n/* harmony export */   fryHashbrown: function() { return /* binding */ fryHashbrown; },\n/* harmony export */   prompt: function() { return /* binding */ prompt; },\n/* harmony export */   s: function() { return /* binding */ public_api$1; },\n/* harmony export */   \"ɵcreateRuntimeFunctionImpl\": function() { return /* binding */ createRuntimeFunctionImpl; },\n/* harmony export */   \"ɵcreateRuntimeImpl\": function() { return /* binding */ createRuntimeImpl; },\n/* harmony export */   \"ɵdeepEqual\": function() { return /* binding */ deepEqual; },\n/* harmony export */   \"ɵtypes\": function() { return /* binding */ types; },\n/* harmony export */   \"ɵui\": function() { return /* binding */ index; }\n/* harmony export */ });\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\r\n\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\r\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\n/**\n * Decode a ReadableStream\\<Uint8Array\\> of length-prefixed JSON frames into a stream of T.\n *\n * Frame format: [4-byte BE length][UTF-8 JSON payload]\n *\n * @public\n * @param stream - ReadableStream producing Uint8Array chunks\n * @param options - decoding options\n * @typeParam T - The type of the parsed JSON objects\n * @returns - A stream of parsed JSON objects of type T\n */\nfunction decodeFrames(stream, options) {\n  return __asyncGenerator(this, arguments, function* decodeFrames_1() {\n    const {\n      signal\n    } = options;\n    const reader = stream.getReader();\n    const textDecoder = new TextDecoder();\n    let buffer = new Uint8Array(0);\n    signal.addEventListener('abort', () => {\n      reader.cancel().catch(() => {\n        // ignore\n      });\n    }, {\n      once: true\n    });\n    if (signal.aborted) {\n      yield __await(reader.cancel());\n      return yield __await(void 0);\n    }\n    try {\n      while (true) {\n        if (signal.aborted) {\n          throw new Error('Decoding aborted');\n        }\n        const {\n          value: chunk,\n          done\n        } = yield __await(reader.read());\n        if (done) break;\n        const newBuffer = new Uint8Array(buffer.length + chunk.length);\n        newBuffer.set(buffer);\n        newBuffer.set(chunk, buffer.length);\n        buffer = newBuffer;\n        let offset = 0;\n        const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n        while (buffer.length - offset >= 4) {\n          const length = view.getUint32(offset, /* Big Endian */false);\n          if (buffer.length - offset < 4 + length) {\n            break;\n          }\n          const start = offset + 4;\n          const end = start + length;\n          try {\n            const payloadBytes = buffer.subarray(start, end);\n            const json = textDecoder.decode(payloadBytes);\n            const frame = JSON.parse(json);\n            yield yield __await(frame);\n            if (frame.type === 'finish') {\n              return yield __await(void 0);\n            }\n          } catch (err) {\n            throw new Error(`Invalid JSON payload: ${err.message}`);\n          }\n          offset = end;\n        }\n        if (offset > 0) {\n          buffer = buffer.subarray(offset);\n        }\n      }\n      if (buffer.length > 0) {\n        throw new Error(`Stream ended with ${buffer.length} leftover bytes`);\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  });\n}\n\n/**\n * Encodes a frame into a binary format.\n *\n * @public\n * @param frame - The frame to encode.\n * @returns The encoded frame.\n */\nfunction encodeFrame(frame) {\n  const encoder = new TextEncoder();\n  const jsonBytes = encoder.encode(JSON.stringify(frame));\n  const len = jsonBytes.length;\n  const out = new Uint8Array(4 + len);\n  const view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n  view.setUint32(0, len, /* Big Endian */false);\n  out.set(jsonBytes, 4);\n  return out;\n}\n\n/* eslint-disable @typescript-eslint/no-empty-function */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Synchronous “trampoline” scheduler.\n *\n * All work executes in the same macrotask, but stack-safe:\n * tasks scheduled from inside other tasks are queued\n * and processed after the current one finishes.\n */\nclass TrampolineScheduler {\n  constructor() {\n    this.nextId = 0;\n    this.queue = new Map();\n    this.active = false;\n  }\n  flush() {\n    if (this.active) return;\n    this.active = true;\n    while (this.queue.size) {\n      const entry = this.queue.entries().next().value;\n      if (!entry) break;\n      const [id, task] = entry;\n      this.queue.delete(id);\n      try {\n        task();\n      } catch (err) {\n        // Surface errors asynchronously so one failure\n        // doesn’t prevent later tasks from running\n        setTimeout(() => {\n          throw err;\n        }, 0);\n      }\n    }\n    this.active = false;\n  }\n  scheduleTask(fn) {\n    const id = ++this.nextId;\n    this.queue.set(id, fn);\n    this.flush();\n    return id;\n  }\n  cancelTask(id) {\n    this.queue.delete(id);\n  }\n}\n/**\n * Creates a payload projector function that returns its argument.\n *\n * @typeParam T - The payload type.\n * @returns Function that returns the provided payload.\n */\nfunction props() {\n  return payload => payload;\n}\n/**\n * Creates an action creator with no payload.\n *\n * @returns Function that produces an action with only a type.\n */\nfunction emptyProps() {\n  return () => {};\n}\n/**\n * Generates a group of action creator functions with a common type prefix.\n *\n * @typeParam GroupName - The modifier for action types (e.g., feature name).\n * @typeParam T - An object whose values are payload creator functions.\n * @param name - The group prefix name.\n * @param group - An object mapping action names to payload functions.\n * @returns A set of action creators.\n */\nfunction createActionGroup(name, group) {\n  return Object.fromEntries(Object.entries(group).map(([key, value]) => [key, Object.assign(typeof value === 'function' ? payload => ({\n    type: `[${name}] ${key}`,\n    payload\n  }) : () => ({\n    type: `[${name}] ${key}`\n  }), {\n    type: `[${name}] ${key}`\n  })]));\n}\n/**\n * ================================\n * ===         Reducers         ===\n * ================================\n */\n/**\n * Creates a reducer function that responds to specified action types.\n *\n * @typeParam State - The type of the slice of state.\n * @typeParam Actions - An array of ActionCreator types to handle.\n * @param params - One or more action creators followed by a reducer handler.\n * @returns A reducer function.\n */\nfunction on(...params) {\n  const actionFns = params.slice(0, -1);\n  const reducerFn = params[params.length - 1];\n  return (state, action) => {\n    const shouldReduceState = actionFns.some(param => param.type === action.type);\n    if (!shouldReduceState) {\n      return state;\n    }\n    return reducerFn(state, action);\n  };\n}\n/**\n * Combines multiple reducer functions into a single root reducer.\n *\n * @typeParam State - The combined state shape.\n * @param initialState - The initial state when undefined is passed.\n * @param reducers - One or more reducer functions.\n * @returns The root reducer.\n */\nfunction createReducer(initialState, ...reducers) {\n  return (state, action) => {\n    return reducers.reduce((acc, reducer) => reducer(acc, action), state === undefined ? initialState : state);\n  };\n}\n/**\n * Creates an effect function that can subscribe to store actions and return a cleanup function.\n *\n * @param effectFn - Function that receives the store and returns a teardown callback.\n * @returns The provided effect function.\n */\nfunction createEffect(effectFn) {\n  return effectFn;\n}\nfunction select(...params) {\n  let inputs = params.slice(0, -1);\n  let selectFn = params[params.length - 1];\n  let config;\n  if (typeof selectFn !== 'function') {\n    config = selectFn;\n    selectFn = params[params.length - 2];\n    inputs = params.slice(0, -2);\n  }\n  let lastInputValues = [];\n  let lastOutput;\n  return state => {\n    const inputValues = inputs.map(input => input(state));\n    if (inputValues.some((value, index) => {\n      const isMismatched = value !== lastInputValues[index];\n      if (isMismatched && config && config.debugName) {\n        console.log('Select Argument Mismatch:', config.debugName, `input[${index}]`, 'last:', lastInputValues[index], 'now:', value);\n      }\n      return isMismatched;\n    })) {\n      lastInputValues = inputValues;\n      lastOutput = selectFn(...inputValues);\n    }\n    return lastOutput;\n  };\n}\n/**\n * ================================\n * ===         Store            ===\n * ================================\n */\n/**\n * Creates a store with reducers and effects.\n * @typeParam Reducers - An object mapping keys to reducer functions.\n * @typeParam State - The resulting state shape inferred from Reducers.\n * @param config - Configuration object.\n * @returns The initialized store instance.\n */\nfunction createStore(config) {\n  const scheduler = new TrampolineScheduler();\n  const devtools = config.debugName ? connectToChromeExtension({\n    name: config.debugName\n  }) : undefined;\n  const reducerFnEntries = Object.entries(config.reducers);\n  const reducerFn = function (state, action) {\n    return reducerFnEntries.reduce((acc, [key, value]) => {\n      return Object.assign(Object.assign({}, acc), {\n        [key]: value(acc === null || acc === void 0 ? void 0 : acc[key], action)\n      });\n    }, state);\n  };\n  const whenCallbackFnMap = new Map();\n  const selectCallbackFns = [];\n  let state = reducerFn(undefined, {\n    type: '@@init'\n  });\n  function dispatch(action) {\n    scheduler.scheduleTask(() => {\n      var _a, _b, _c;\n      state = reducerFn(state, action);\n      const whenCallbackFns = (_a = whenCallbackFnMap.get(action.type)) !== null && _a !== void 0 ? _a : [];\n      whenCallbackFns.forEach(callback => callback(action));\n      selectCallbackFns.forEach(callback => callback());\n      devtools === null || devtools === void 0 ? void 0 : devtools.send(action, (_c = (_b = config.projectStateForDevtools) === null || _b === void 0 ? void 0 : _b.call(config, state)) !== null && _c !== void 0 ? _c : state);\n    });\n  }\n  function when(...params) {\n    const actionFns = params.slice(0, -1);\n    const callbackFn = params[params.length - 1];\n    actionFns.forEach(actionFn => {\n      var _a;\n      if (!whenCallbackFnMap.has(actionFn.type)) {\n        whenCallbackFnMap.set(actionFn.type, []);\n      }\n      (_a = whenCallbackFnMap.get(actionFn.type)) === null || _a === void 0 ? void 0 : _a.push(callbackFn);\n    });\n    return () => {\n      actionFns.forEach(actionFn => {\n        var _a;\n        const callbacks = (_a = whenCallbackFnMap.get(actionFn.type)) !== null && _a !== void 0 ? _a : [];\n        whenCallbackFnMap.set(actionFn.type, callbacks.filter(cb => cb !== callbackFn));\n      });\n    };\n  }\n  function whenOnce(...params) {\n    const actionFns = params.slice(0, -1);\n    const callbackFn = params[params.length - 1];\n    const cleanupFn = when(...actionFns, action => {\n      callbackFn(action);\n      cleanupFn();\n    });\n    return cleanupFn;\n  }\n  function read(selector) {\n    return selector(state);\n  }\n  function select(selector, onChange) {\n    let currentValue = read(selector);\n    onChange(currentValue);\n    const callback = () => {\n      const newValue = read(selector);\n      if (newValue !== currentValue) {\n        currentValue = newValue;\n        onChange(newValue);\n      }\n    };\n    selectCallbackFns.push(callback);\n    return () => {\n      selectCallbackFns.splice(selectCallbackFns.indexOf(callback), 1);\n    };\n  }\n  function createSignal(selector) {\n    return Object.assign(() => read(selector), {\n      subscribe: onChange => select(selector, onChange)\n    });\n  }\n  function runEffects() {\n    var _a, _b;\n    devtools === null || devtools === void 0 ? void 0 : devtools.init((_b = (_a = config.projectStateForDevtools) === null || _a === void 0 ? void 0 : _a.call(config, state)) !== null && _b !== void 0 ? _b : state);\n    const cleanupFns = config.effects.map(effect => effect(store));\n    return () => {\n      cleanupFns.forEach(fn => fn());\n      devtools === null || devtools === void 0 ? void 0 : devtools.unsubscribe();\n    };\n  }\n  const store = {\n    dispatch,\n    read,\n    select,\n    when: when,\n    whenOnce: whenOnce,\n    createSignal,\n    runEffects\n  };\n  return store;\n}\n/**\n * Creates an EntityAdapter for performing immutable updates on entity collections.\n * @typeParam Entity - The entity type.\n * @param config - Configuration with a selectId function.\n * @returns Adapter with CRUD methods for entity state.\n */\nfunction createEntityAdapter(config) {\n  const {\n    selectId\n  } = config;\n  function updateOne(state, changes) {\n    return Object.assign(Object.assign({}, state), {\n      entities: Object.assign(Object.assign({}, state.entities), {\n        [changes.id]: Object.assign(Object.assign({}, state.entities[changes.id]), changes.updates)\n      })\n    });\n  }\n  function updateMany(state, changes) {\n    return changes.reduce((acc, change) => updateOne(acc, change), state);\n  }\n  function addOne(state, entity) {\n    return Object.assign(Object.assign({}, state), {\n      ids: [...state.ids, selectId(entity)],\n      entities: Object.assign(Object.assign({}, state.entities), {\n        [selectId(entity)]: entity\n      })\n    });\n  }\n  function addMany(state, entities) {\n    return entities.reduce((acc, entity) => addOne(acc, entity), state);\n  }\n  function removeOne(state, idToRemove) {\n    const updatedEntities = Object.assign({}, state.entities);\n    delete updatedEntities[idToRemove];\n    return Object.assign(Object.assign({}, state), {\n      ids: state.ids.filter(id => id !== idToRemove),\n      entities: updatedEntities\n    });\n  }\n  function removeMany(state, ids) {\n    return Object.assign(Object.assign({}, state), {\n      ids: state.ids.filter(id => !ids.includes(id)),\n      entities: Object.fromEntries(Object.entries(state.entities).filter(([id]) => !ids.includes(id)))\n    });\n  }\n  return {\n    updateOne,\n    updateMany,\n    addOne,\n    addMany,\n    removeOne,\n    removeMany\n  };\n}\nfunction connectToChromeExtension(options) {\n  if (typeof window === 'undefined') {\n    return;\n  }\n  const extension = window.__REDUX_DEVTOOLS_EXTENSION__;\n  if (!extension) {\n    return;\n  }\n  return extension.connect({\n    name: options.name\n  });\n}\n\nvar devActions = createActionGroup('dev', {\n  init: props(),\n  setMessages: props(),\n  sendMessage: props(),\n  resendMessages: props,\n  updateOptions: props(),\n  stopMessageGeneration: props()\n});\n\nvar apiActions = createActionGroup('api', {\n  generateMessageStart: emptyProps(),\n  generateMessageChunk: props(),\n  generateMessageSuccess: props(),\n  generateMessageError: props(),\n  generateMessageExhaustedRetries: props()\n});\n\nvar internalActions = createActionGroup('internal', {\n  sizzle: emptyProps(),\n  runToolCallsSuccess: props(),\n  runToolCallsError: props(),\n  skippedToolCalls: emptyProps()\n});\n\n/**\n * Skillet is an LLM-optimized streaming JSON Parser - perfectly suited for streaming hot and fresh JSON.\n *\n * Portions of this code are derived from Zod (MIT License) (https://github.com/colinhacks/zod).\n * See the LICENSE file in the project root for full license text.\n *\n * @license MIT\n * @author LiveLoveApp, LLC\n * @see https://github.com/liveloveapp/hashbrown\n * @see https://github.com/colinhacks/zod\n */\n/**\n * @internal\n */\nconst internal = '~schema';\nconst PRIMITIVE_WRAPPER_FIELD_NAME = '__wrappedPrimitive';\n/**\n * @internal\n */\nconst HashbrownTypeCtor = ({\n  name,\n  initializer,\n  toJsonSchemaImpl,\n  parseJsonSchemaImpl,\n  toTypeScriptImpl,\n  validateImpl,\n  toStreamingImpl\n}) => {\n  class Class {\n    constructor(definition) {\n      Class.init(this, definition);\n      this.toJsonSchemaImpl = toJsonSchemaImpl;\n      this.parseJsonSchemaImpl = parseJsonSchemaImpl;\n      this.toTypeScriptImpl = toTypeScriptImpl;\n      this.validateImpl = validateImpl;\n      this.toStreamingImpl = toStreamingImpl;\n    }\n    static init(instance, definition) {\n      var _a;\n      (_a = instance[internal]) !== null && _a !== void 0 ? _a : instance[internal] = {\n        definition: {\n          description: '',\n          streaming: false\n        }\n      };\n      initializer(instance, definition);\n      instance[internal].definition = definition;\n    }\n    toJsonSchema() {\n      return this.toJsonSchemaImpl(this);\n    }\n    parseJsonSchema(object, path = []) {\n      return this.parseJsonSchemaImpl(this, object, path);\n    }\n    toTypeScript(pathSeen = new Set()) {\n      return this.toTypeScriptImpl(this, pathSeen);\n    }\n    validate(object, path = []) {\n      return this.validateImpl(this, this[internal].definition, object, path);\n    }\n    toStreaming(object, path = []) {\n      return this.toStreamingImpl(this, this[internal].definition, object, path);\n    }\n  }\n  Object.defineProperty(Class, 'name', {\n    value: name\n  });\n  return Class;\n};\nconst HashbrownType = HashbrownTypeCtor({\n  name: 'HashbrownType',\n  initializer: (inst, def) => {\n    inst !== null && inst !== void 0 ? inst : inst = {};\n    inst[internal].definition = def;\n  },\n  toJsonSchemaImpl: () => {\n    return;\n  },\n  parseJsonSchemaImpl: () => {\n    return;\n  },\n  toTypeScriptImpl: () => {\n    return '';\n  },\n  validateImpl: () => {\n    return;\n  },\n  toStreamingImpl: () => {\n    return;\n  }\n});\nconst StringType = HashbrownTypeCtor({\n  name: 'String',\n  initializer: (inst, def) => {\n    HashbrownType.init(inst, def);\n  },\n  toJsonSchemaImpl: schema => {\n    return {\n      type: 'string',\n      description: schema[internal].definition.description\n    };\n  },\n  parseJsonSchemaImpl: (schema, object, path) => {\n    // Is this a wrapped primitive?\n    if (object != null && typeof object === 'object' && Object.keys(object).includes(PRIMITIVE_WRAPPER_FIELD_NAME)) {\n      object = object[PRIMITIVE_WRAPPER_FIELD_NAME];\n    }\n    if (typeof object !== 'string') throw new Error(`Expected a string at: ${path.join('.')}, got ${object}`);\n    return object;\n  },\n  toTypeScriptImpl: schema => {\n    return `/* ${schema[internal].definition.description} */ string`;\n  },\n  validateImpl: (schema, definition, object, path) => {\n    if (typeof object !== 'string') {\n      throw new Error(`Expected a string at: ${path.join('.')}, got ${typeof object}`);\n    }\n    return;\n  },\n  toStreamingImpl: (schema, definition, object, path) => {\n    return object;\n  }\n});\n/**\n * @public\n */\nfunction isStringType(type) {\n  return type[internal].definition.type === 'string';\n}\n/**\n * @public\n */\nfunction string$1(description) {\n  return new StringType({\n    type: 'string',\n    description,\n    streaming: false\n  });\n}\nconst LiteralType = HashbrownTypeCtor({\n  name: 'Literal',\n  initializer: (inst, def) => {\n    HashbrownType.init(inst, def);\n  },\n  toJsonSchemaImpl: schema => {\n    const isString = typeof schema[internal].definition.value === 'string';\n    const isNumber = typeof schema[internal].definition.value === 'number';\n    typeof schema[internal].definition.value === 'boolean';\n    return {\n      type: isString ? 'string' : isNumber ? 'number' : 'boolean',\n      const: schema[internal].definition.value,\n      description: schema[internal].definition.description\n    };\n  },\n  parseJsonSchemaImpl: (schema, object, path) => {\n    // Is this a wrapped primitive?\n    if (object != null && typeof object === 'object' && Object.keys(object).includes(PRIMITIVE_WRAPPER_FIELD_NAME)) {\n      object = object[PRIMITIVE_WRAPPER_FIELD_NAME];\n    }\n    const isString = typeof object === 'string';\n    const isNumber = typeof object === 'number';\n    const isBoolean = typeof object === 'boolean';\n    if (!isString && !isNumber && !isBoolean) throw new Error(`Expected a string, number, or boolean at: ${path.join('.')}, got ${object}, received ${schema[internal].definition.value}`);\n    return object;\n  },\n  toTypeScriptImpl: schema => {\n    return JSON.stringify(schema[internal].definition.value);\n  },\n  validateImpl: (schema, definition, object, path) => {\n    if (definition.value !== object) {\n      throw new Error(`Expected the literal value ${JSON.stringify(definition.value)} at: ${path.join('.')}, but got ${JSON.stringify(object)}`);\n    }\n  },\n  toStreamingImpl: (schema, definition, object, path) => {\n    return object;\n  }\n});\n/**\n * @public\n */\nfunction isLiteralType(type) {\n  return type[internal].definition.type === 'literal';\n}\n/**\n * @public\n */\nfunction literal(value) {\n  return new LiteralType({\n    type: 'literal',\n    description: `${value}`,\n    value,\n    streaming: false\n  });\n}\nconst NumberType = HashbrownTypeCtor({\n  name: 'Number',\n  initializer: (inst, def) => {\n    HashbrownType.init(inst, def);\n  },\n  toJsonSchemaImpl: schema => {\n    return {\n      type: 'number',\n      description: schema[internal].definition.description\n    };\n  },\n  parseJsonSchemaImpl: (schema, object, path) => {\n    // Is this a wrapped primitive?\n    if (object != null && typeof object === 'object' && Object.keys(object).includes(PRIMITIVE_WRAPPER_FIELD_NAME)) {\n      object = object[PRIMITIVE_WRAPPER_FIELD_NAME];\n    }\n    if (typeof object !== 'number') throw new Error(`Expected a number at: ${path.join('.')}`);\n    return object;\n  },\n  toTypeScriptImpl: schema => {\n    return `/* ${schema[internal].definition.description} */ number`;\n  },\n  validateImpl: (schema, definition, object, path) => {\n    if (typeof object !== 'number') {\n      throw new Error(`Expected a number at: ${path.join('.')}`);\n    }\n  },\n  toStreamingImpl: (schema, definition, object, path) => {\n    return object;\n  }\n});\n/**\n * @public\n */\nfunction isNumberType(type) {\n  return type[internal].definition.type === 'number';\n}\n/**\n * @public\n */\nfunction number(description) {\n  return new NumberType({\n    type: 'number',\n    description,\n    streaming: false\n  });\n}\nconst BooleanType = HashbrownTypeCtor({\n  name: 'Boolean',\n  initializer: (inst, def) => {\n    HashbrownType.init(inst, def);\n  },\n  toJsonSchemaImpl: schema => {\n    return {\n      type: 'boolean',\n      description: schema[internal].definition.description\n    };\n  },\n  parseJsonSchemaImpl: (schema, object, path) => {\n    // Is this a wrapped primitive?\n    if (object != null && typeof object === 'object' && Object.keys(object).includes(PRIMITIVE_WRAPPER_FIELD_NAME)) {\n      object = object[PRIMITIVE_WRAPPER_FIELD_NAME];\n    }\n    if (typeof object !== 'boolean') throw new Error(`Expected a boolean at: ${path.join('.')}`);\n    return object;\n  },\n  toTypeScriptImpl: schema => {\n    return `/* ${schema[internal].definition.description} */ boolean`;\n  },\n  validateImpl: (schema, definition, object, path) => {\n    if (typeof object !== 'boolean') throw new Error(`Expected a boolean at: ${path.join('.')}`);\n  },\n  toStreamingImpl: (schema, definition, object, path) => {\n    return object;\n  }\n});\n/**\n * @public\n */\nfunction isBooleanType(type) {\n  return type[internal].definition.type === 'boolean';\n}\n/**\n * @public\n */\nfunction boolean(description) {\n  return new BooleanType({\n    type: 'boolean',\n    description,\n    streaming: false\n  });\n}\nconst IntegerType = HashbrownTypeCtor({\n  name: 'Integer',\n  initializer: (inst, def) => {\n    HashbrownType.init(inst, def);\n  },\n  toJsonSchemaImpl: schema => {\n    return {\n      type: 'integer',\n      description: schema[internal].definition.description\n    };\n  },\n  parseJsonSchemaImpl: (schema, object, path) => {\n    // Is this a wrapped primitive?\n    if (object != null && typeof object === 'object' && Object.keys(object).includes(PRIMITIVE_WRAPPER_FIELD_NAME)) {\n      object = object[PRIMITIVE_WRAPPER_FIELD_NAME];\n    }\n    if (typeof object !== 'number') throw new Error(`Expected a number at: ${path.join('.')}`);\n    if (!Number.isInteger(object)) throw new Error(`Expected an integer at: ${path.join('.')}`);\n    return object;\n  },\n  toTypeScriptImpl: schema => {\n    return `/* ${schema[internal].definition.description} */ integer`;\n  },\n  validateImpl: (schema, definition, object, path) => {\n    if (typeof object !== 'number') throw new Error(`Expected a number at: ${path.join('.')}`);\n    if (!Number.isInteger(object)) throw new Error(`Expected an integer at: ${path.join('.')}`);\n  },\n  toStreamingImpl: (schema, definition, object, path) => {\n    return object;\n  }\n});\n/**\n * @public\n */\nfunction isIntegerType(type) {\n  return type[internal].definition.type === 'integer';\n}\n/**\n * @public\n */\nfunction integer(description) {\n  return new IntegerType({\n    type: 'integer',\n    description,\n    streaming: false\n  });\n}\nconst ObjectType = HashbrownTypeCtor({\n  name: 'Object',\n  initializer: (inst, def) => {\n    HashbrownType.init(inst, def);\n  },\n  toJsonSchemaImpl: schema => {\n    return {\n      type: 'object',\n      // Properties is populated externally because we need to find loops\n      properties: {},\n      required: Object.keys(schema[internal].definition.shape),\n      additionalProperties: false,\n      description: schema[internal].definition.description\n    };\n  },\n  parseJsonSchemaImpl: (schema, object, path) => {\n    if (typeof object !== 'object' || object === null) throw new Error(`Expected an object at: ${path.join('.')}`);\n    const {\n      shape\n    } = schema[internal].definition;\n    Object.entries(shape).forEach(([key, child]) => {\n      // AnyOf unwrapping can change the desired form of the result object, so\n      // update the object as we parse\n      object[key] = child.parseJsonSchema(object[key], [...path, key]);\n    });\n    return object;\n  },\n  toTypeScriptImpl: (schema, pathSeen) => {\n    if (pathSeen.has(schema)) {\n      const desc = schema[internal].definition.description || '<anonymous>';\n      throw new Error(`Cycle detected in schema at \"${desc}\"`);\n    }\n    pathSeen.add(schema);\n    const depth = pathSeen.size - 1;\n    const entries = Object.entries(schema[internal].definition.shape);\n    const lines = entries.map(([key, child]) => {\n      // clone pathSeen for each branch\n      return `${' '.repeat(depth + 2)}${key}: ${child.toTypeScript(new Set(pathSeen))};`;\n    });\n    return `/* ${schema[internal].definition.description} */ {\n${lines.join('\\n')}\n${' '.repeat(depth)}}`;\n  },\n  validateImpl: (schema, definition, object, path) => {\n    if (typeof object !== 'object' || object === null) throw new Error(`Expected an object at: ${path.join('.')}`);\n    const {\n      shape\n    } = definition;\n    Object.entries(shape).forEach(([key, child]) => {\n      child.validate(object[key], [...path, key]);\n    });\n    return object;\n  },\n  toStreamingImpl: (schema, definition, object, path) => {\n    const {\n      shape\n    } = definition;\n    const entries = Object.entries(shape);\n    return Object.fromEntries(entries.map(([key, value]) => {\n      return [key, value.toStreaming(object[key], [...path, key])];\n    }));\n  }\n});\n/**\n * @public\n */\nfunction isObjectType(type) {\n  return type[internal].definition.type === 'object';\n}\n/**\n * @public\n */\nfunction object$1(description, shape) {\n  return new ObjectType({\n    type: 'object',\n    description,\n    streaming: false,\n    shape\n  });\n}\nconst ArrayType = HashbrownTypeCtor({\n  name: 'Array',\n  initializer: (inst, def) => {\n    HashbrownType.init(inst, def);\n  },\n  toJsonSchemaImpl: schema => {\n    return {\n      type: 'array',\n      // items is populated externally since we find loops and duplicated sections\n      // through the whole schema\n      items: [],\n      description: schema[internal].definition.description\n    };\n  },\n  parseJsonSchemaImpl: (schema, object, path) => {\n    // Is this a wrapped primitive?\n    if (object != null && typeof object === 'object' && Object.keys(object).includes(PRIMITIVE_WRAPPER_FIELD_NAME)) {\n      object = object[PRIMITIVE_WRAPPER_FIELD_NAME];\n    }\n    if (!Array.isArray(object)) throw new Error(`Expected an array at: ${path.join('.')}`);\n    // AnyOf unwrapping can change the desired form of the result object, so\n    // update the object as we parse\n    object.forEach(item => {\n      item = schema[internal].definition.element.parseJsonSchema(item, path);\n    });\n    return object;\n  },\n  toTypeScriptImpl: (schema, pathSeen) => {\n    if (pathSeen.has(schema)) {\n      const desc = schema[internal].definition.description || '<anonymous>';\n      throw new Error(`Cycle detected in schema at \"${desc}\"`);\n    }\n    pathSeen.add(schema);\n    return `/* ${schema[internal].definition.description} */ Array<${schema[internal].definition.element.toTypeScript(new Set(pathSeen))}>`;\n  },\n  validateImpl: (schema, definition, object, path) => {\n    if (!Array.isArray(object)) throw new Error(`Expected an array at: ${path.join('.')}`);\n    object.forEach(item => {\n      definition.element.validate(item, path);\n    });\n  },\n  toStreamingImpl: (schema, definition, object, path) => {\n    return object.map(item => {\n      return definition.element.toStreaming(item, path);\n    });\n  }\n});\n/**\n * @public\n */\nfunction isArrayType(type) {\n  return type[internal].definition.type === 'array';\n}\n/**\n * @public\n */\nfunction array$1(description, item) {\n  return new ArrayType({\n    type: 'array',\n    description,\n    streaming: false,\n    element: item\n  });\n}\nconst AnyOfType = HashbrownTypeCtor({\n  name: 'AnyOfType',\n  initializer: (inst, def) => {\n    HashbrownType.init(inst, def);\n  },\n  toJsonSchemaImpl: schema => {\n    return {\n      anyOf: []\n    };\n  },\n  parseJsonSchemaImpl: (schema, object, path) => {\n    const options = schema[internal].definition.options;\n    let parsedObject = undefined;\n    const buildDiscriminatorMap = options => {\n      const map = {};\n      for (const opt of options) {\n        if (!isObjectType(opt)) {\n          return null;\n        }\n        const shape = opt[internal].definition.shape;\n        const literalEntries = Object.entries(shape).filter(([, v]) => isLiteralType(v));\n        // Require exactly one literal for clear discrimination\n        if (literalEntries.length !== 1) {\n          return null;\n        }\n        const [literalKey, litSchema] = literalEntries[0];\n        const literalValue = litSchema[internal].definition.value;\n        if (typeof literalValue !== 'string') {\n          // Only support string-based discriminators for wrapper keys\n          return null;\n        }\n        if (Object.prototype.hasOwnProperty.call(map, literalValue)) {\n          // Ambiguous (duplicate) discriminator value\n          return null;\n        }\n        map[literalValue] = {\n          schema: opt,\n          literalKey,\n          literalValue\n        };\n      }\n      return Object.keys(map).length === options.length ? map : null;\n    };\n    const discriminatorMap = buildDiscriminatorMap(options);\n    for (let i = 0; i < options.length; i++) {\n      try {\n        if (needsDiscriminatorWrapperInAnyOf(options[i]) && discriminatorMap) {\n          const discriminatorEntry = Object.entries(discriminatorMap).find(([, v]) => v.schema === options[i]);\n          if (!discriminatorEntry) {\n            throw new Error(`No discriminator key found for option ${options[i]}`);\n          }\n          const {\n            literalKey,\n            literalValue,\n            schema\n          } = discriminatorEntry[1];\n          const extractedObject = object[literalValue];\n          extractedObject[literalKey] = literalValue;\n          parsedObject = schema.parseJsonSchema(extractedObject);\n        } else if (needsDiscriminatorWrapperInAnyOf(options[i])) {\n          if (typeof object !== 'object' || object === null) {\n            throw new Error(`Expected an object at: ${path.join('.')}`);\n          }\n          const anyOfKeys = Object.keys(object);\n          if (anyOfKeys.length !== 1) {\n            throw new Error(`Malformed anyOf wrapper at ${path.join('.')}`);\n          }\n          const anyOfIndex = anyOfKeys[0];\n          if (anyOfIndex !== i.toString()) {\n            throw new Error(`Unexpected discriminator value ${anyOfIndex} for option ${i}`);\n          }\n          parsedObject = options[i].parseJsonSchema(object[anyOfIndex]);\n        } else {\n          parsedObject = options[i].parseJsonSchema(object);\n        }\n        break;\n      } catch (e) {\n        // console.log(e);\n        // Parsing failed, but that is not unexpected due to the looping.\n        // Just try the next option.\n        continue;\n      }\n    }\n    if (parsedObject == null) {\n      throw new Error(`All options in anyOf failed parsing at: ${path.join('.')}`);\n    }\n    return parsedObject;\n  },\n  toTypeScriptImpl: (schema, pathSeen) => {\n    if (pathSeen.has(schema)) {\n      const desc = schema[internal].definition.description || '<anonymous>';\n      throw new Error(`Cycle detected in schema at \"${desc}\"`);\n    }\n    pathSeen.add(schema);\n    return `/* ${schema[internal].definition.description} */ (${schema[internal].definition.options.map(opt => opt.toTypeScript(new Set(pathSeen))).join(' | ')})`;\n  },\n  validateImpl: (schema, definition, object, path) => {\n    const {\n      options\n    } = definition;\n    let foundMatch = false;\n    for (let i = 0; i < options.length; i++) {\n      try {\n        options[i].validate(object);\n        foundMatch = true;\n        break;\n      } catch (e) {\n        // console.log(e);\n        // Parsing failed, but that is not unexpected due to the looping.\n        // Just try the next option.\n        continue;\n      }\n    }\n    if (!foundMatch) {\n      throw new Error(`All options in anyOf failed parsing at: ${path.join('.')}`);\n    }\n  },\n  toStreamingImpl: (schema, definition, object, path) => {\n    const matchingOption = definition.options.find(opt => {\n      try {\n        opt.validate(object);\n        return true;\n      } catch (e) {\n        return false;\n      }\n    });\n    const buildDiscriminatorMap = options => {\n      const map = {};\n      for (const opt of options) {\n        if (!isObjectType(opt)) {\n          return null;\n        }\n        const shape = opt[internal].definition.shape;\n        const literalEntries = Object.entries(shape).filter(([, v]) => isLiteralType(v));\n        // Require exactly one literal for clear discrimination\n        if (literalEntries.length !== 1) {\n          return null;\n        }\n        const [literalKey, litSchema] = literalEntries[0];\n        const literalValue = litSchema[internal].definition.value;\n        if (typeof literalValue !== 'string') {\n          // Only support string-based discriminators for wrapper keys\n          return null;\n        }\n        if (Object.prototype.hasOwnProperty.call(map, literalValue)) {\n          // Ambiguous (duplicate) discriminator value\n          return null;\n        }\n        map[literalValue] = {\n          schema: opt,\n          literalKey,\n          literalValue\n        };\n      }\n      return Object.keys(map).length === options.length ? map : null;\n    };\n    const discriminatorMap = buildDiscriminatorMap(definition.options);\n    if (!matchingOption) {\n      throw new Error(`No matching option found in anyOf at: ${path.join('.')}`);\n    }\n    if (needsDiscriminatorWrapperInAnyOf(matchingOption) && discriminatorMap) {\n      const discriminatorEntry = Object.entries(discriminatorMap).find(([, v]) => v.schema === matchingOption);\n      if (!discriminatorEntry) {\n        throw new Error(`No discriminator key found for option ${matchingOption}`);\n      }\n      const {\n        literalKey,\n        literalValue,\n        schema\n      } = discriminatorEntry[1];\n      const streamingObject = schema.toStreaming(object, path);\n      delete streamingObject[literalKey];\n      return {\n        [literalValue]: streamingObject\n      };\n    } else if (needsDiscriminatorWrapperInAnyOf(matchingOption) && !discriminatorMap) {\n      const indexOfMatchingOption = definition.options.indexOf(matchingOption);\n      return {\n        [indexOfMatchingOption.toString()]: matchingOption.toStreaming(object, path)\n      };\n    }\n    return matchingOption.toStreaming(object, path);\n  }\n});\n/**\n * @public\n */\nfunction isAnyOfType(type) {\n  return type[internal].definition.type === 'any-of';\n}\n/**\n * @public\n */\nfunction anyOf(options) {\n  return new AnyOfType({\n    type: 'any-of',\n    description: 'any-of',\n    options,\n    streaming: false\n  });\n}\nconst EnumType = HashbrownTypeCtor({\n  name: 'Enum',\n  initializer: (inst, def) => {\n    HashbrownType.init(inst, def);\n  },\n  toJsonSchemaImpl: schema => {\n    return {\n      type: 'string',\n      enum: schema[internal].definition.entries,\n      description: schema[internal].definition.description\n    };\n  },\n  parseJsonSchemaImpl: (schema, object, path) => {\n    // Is this a wrapped primitive?\n    if (object != null && typeof object === 'object' && Object.keys(object).includes(PRIMITIVE_WRAPPER_FIELD_NAME)) {\n      object = object[PRIMITIVE_WRAPPER_FIELD_NAME];\n    }\n    if (typeof object !== 'string') throw new Error(`Expected a string at: ${path.join('.')}`);\n    if (!schema[internal].definition.entries.includes(object)) throw new Error(`Expected an enum value at: ${path.join('.')}`);\n    return object;\n  },\n  toTypeScriptImpl: schema => {\n    return schema[internal].definition.entries.map(e => `\"${e}\"`).join(' | ');\n  },\n  validateImpl: (schema, definition, object, path) => {\n    if (typeof object !== 'string') throw new Error(`Expected a string at: ${path.join('.')}`);\n    if (!definition.entries.includes(object)) throw new Error(`Expected an enum value at: ${path.join('.')}`);\n  },\n  toStreamingImpl: (schema, definition, object, path) => {\n    return object;\n  }\n});\n/**\n * @public\n */\nfunction isEnumType(type) {\n  return type[internal].definition.type === 'enum';\n}\n/**\n * @public\n */\nfunction enumeration(description, entries) {\n  return new EnumType({\n    type: 'enum',\n    description,\n    entries,\n    streaming: false\n  });\n}\nconst NullType = HashbrownTypeCtor({\n  name: 'Null',\n  initializer: (inst, def) => {\n    HashbrownType.init(inst, def);\n  },\n  toJsonSchemaImpl: schema => {\n    return {\n      type: 'null',\n      const: schema[internal].definition.value,\n      description: schema[internal].definition.description\n    };\n  },\n  parseJsonSchemaImpl: (schema, object, path) => {\n    // Is this a wrapped primitive?\n    if (object != null && typeof object === 'object' && Object.keys(object).includes(PRIMITIVE_WRAPPER_FIELD_NAME)) {\n      object = object[PRIMITIVE_WRAPPER_FIELD_NAME];\n    }\n    if (object !== null) throw new Error(`Expected a null at: ${path.join('.')}`);\n    return object;\n  },\n  toTypeScriptImpl: schema => {\n    return `/* ${schema[internal].definition.description} */ null`;\n  },\n  validateImpl: (schema, definition, object, path) => {\n    if (object !== null) throw new Error(`Expected a null at: ${path.join('.')}`);\n  },\n  toStreamingImpl: (schema, definition, object, path) => {\n    return object;\n  }\n});\n/**\n * @public\n */\nfunction isNullType(type) {\n  return type[internal].definition.type === 'null';\n}\n/**\n * @public\n */\nfunction nullish() {\n  return new NullType({\n    type: 'null',\n    description: '',\n    streaming: false\n  });\n}\n/**\n * --------------------------------------\n * --------------------------------------\n *           Streaming Helpers\n * --------------------------------------\n * --------------------------------------\n */\nfunction needsDiscriminatorWrapperInAnyOf(schema) {\n  if (isAnyOfType(schema) || isArrayType(schema) || isObjectType(schema) || isStringType(schema) && isStreaming(schema)) {\n    return true;\n  }\n  return false;\n}\nfunction isStreaming(schema) {\n  return schema[internal].definition.streaming;\n}\n/**\n * @public\n */\nfunction isHashbrownType(type) {\n  return type[internal] !== undefined;\n}\n\n/**\n * @public\n */\nfunction getDescription(schema) {\n  return schema[internal].definition.description;\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * @public\n */\nfunction string(description) {\n  return new StringType({\n    type: 'string',\n    description,\n    streaming: true\n  });\n}\n/**\n * @public\n */\nfunction object(description, shape) {\n  return new ObjectType({\n    type: 'object',\n    description,\n    streaming: true,\n    shape\n  });\n}\n/**\n * @public\n */\nfunction array(description, item) {\n  return new ArrayType({\n    type: 'array',\n    description,\n    streaming: true,\n    element: item\n  });\n}\n\nvar streaming = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    array: array,\n    object: object,\n    string: string\n});\n\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Convert an arbitrary description into a camelCase identifier.\n *\n * - Strips out any non-alphanumeric characters\n * - Splits on whitespace\n * - Lowercases all words, then uppercases the first letter of each subsequent word\n * - Prefixes with `_` if the result would start with a digit\n */\nfunction descriptionToCamelCase(description) {\n  const cleaned = description.replace(/[^a-zA-Z0-9]+/g, ' ').trim();\n  const words = cleaned.split(/\\s+/).map(w => w.toLowerCase());\n  if (words.length === 0) return '';\n  const [first, ...rest] = words;\n  const core = first + rest.map(w => w[0].toUpperCase() + w.slice(1)).join('');\n  return /^\\d/.test(core) ? `_${core}` : core;\n}\n/**\n * Walks the HashbrownType graph, finds any sub-schemas seen more than once\n * (excluding the root), assigns each a unique name, and emits a draft-07 JSON Schema\n * with a $defs section.  Cycles always become $refs.\n *\n * @public\n */\nfunction toJsonSchema(schema) {\n  const rootNode = schema;\n  // 1) Collect repeated nodes\n  const seen = new Set();\n  const repeats = new Set();\n  (function visit(n, path) {\n    if (seen.has(n)) {\n      repeats.add(n);\n      return;\n    }\n    seen.add(n);\n    if (isObjectType(n)) {\n      Object.values(n[internal].definition.shape).forEach(child => visit(child, [...path, n]));\n    } else if (isArrayType(n)) {\n      visit(n[internal].definition.element, [...path, n]);\n    } else if (isAnyOfType(n)) {\n      n[internal].definition.options.forEach(opt => visit(opt, [...path, n]));\n    }\n  })(rootNode, []);\n  // never put the root itself into $defs\n  repeats.delete(rootNode);\n  // 2) Assign each repeated node a unique camelCase name\n  const defNameMap = new Map();\n  const usedNames = new Set();\n  let anon = 1;\n  for (const node of repeats) {\n    const desc = node[internal].definition.description || `def${anon++}`;\n    let name = descriptionToCamelCase(desc) || `def${anon++}`;\n    if (usedNames.has(name)) {\n      let i = 1;\n      while (usedNames.has(`${name}${i}`)) i++;\n      name = `${name}${i}`;\n    }\n    usedNames.add(name);\n    defNameMap.set(node, name);\n  }\n  /**\n   * Recursive printer.\n   *\n   * @param n - current node\n   * @param isRoot - true only for the very top-level schema\n   * @param inDef - if non-null, we're printing $defs[inDef] — any other def becomes $ref\n   * @param pathSeen - tracks the chain of inlined nodes to catch cycles\n   */\n  function printNode(n, isRoot = false, inDef = null, pathSeen = new Set(),\n  // If provided, omit this property when printing an object. Used for\n  // anyOf literal-based envelopes where the literal is redundant.\n  omitObjectProp) {\n    // a) cycle back to the root\n    if (!isRoot && n === rootNode) {\n      return {\n        $ref: '#'\n      };\n    }\n    // b) any other shared def becomes a $ref\n    if (defNameMap.has(n) && n !== inDef) {\n      const nm = defNameMap.get(n);\n      return {\n        $ref: `#/$defs/${nm}`\n      };\n    }\n    // c) catch self-cycles or mutual cycles in inline portions\n    if (pathSeen.has(n)) {\n      // if it’s named, ref it; otherwise point at root\n      if (defNameMap.has(n)) {\n        const nm = defNameMap.get(n);\n        return {\n          $ref: `#/$defs/${nm}`\n        };\n      } else {\n        return {\n          $ref: '#'\n        };\n      }\n    }\n    // d) inline this node\n    pathSeen.add(n);\n    let result;\n    if (isObjectType(n)) {\n      // Sort props so that streaming ones are at the end\n      const shapeWithStreamingAtEnd = Object.entries(n[internal].definition.shape)\n      // If we're omitting a prop due to envelope discrimination, remove it\n      .filter(([key]) => omitObjectProp ? key !== omitObjectProp : true).sort((a, b) => {\n        if (!isStreaming(a[1]) && isStreaming(b[1])) {\n          return -1;\n        }\n        if (isStreaming(a[1]) && !isStreaming(b[1])) {\n          return 1;\n        }\n        return 0;\n      });\n      const props = {};\n      for (const [k, child] of shapeWithStreamingAtEnd) {\n        props[k] = printNode(child, false, inDef, pathSeen);\n      }\n      result = n.toJsonSchema();\n      result.properties = props;\n      // Ensure required keys do not include any omitted discriminator prop\n      result.required = Object.keys(props);\n    } else if (isArrayType(n)) {\n      result = n.toJsonSchema();\n      result.items = printNode(n[internal].definition.element, false, inDef, pathSeen);\n      if (isRoot) {\n        result = {\n          type: 'object',\n          additionalProperties: false,\n          required: [PRIMITIVE_WRAPPER_FIELD_NAME],\n          properties: {\n            [PRIMITIVE_WRAPPER_FIELD_NAME]: result\n          }\n        };\n      }\n    } else if (isAnyOfType(n)) {\n      result = n.toJsonSchema();\n      const buildDiscriminatorMap = options => {\n        const map = {};\n        for (const opt of options) {\n          if (!isObjectType(opt)) {\n            return null;\n          }\n          const shape = opt[internal].definition.shape;\n          const literalEntries = Object.entries(shape).filter(([, v]) => isLiteralType(v));\n          // Require exactly one literal for clear discrimination\n          if (literalEntries.length !== 1) {\n            return null;\n          }\n          const [literalKey, litSchema] = literalEntries[0];\n          const literalValue = litSchema[internal].definition.value;\n          if (typeof literalValue !== 'string') {\n            // Only support string-based discriminators for wrapper keys\n            return null;\n          }\n          if (Object.prototype.hasOwnProperty.call(map, literalValue)) {\n            // Ambiguous (duplicate) discriminator value\n            return null;\n          }\n          map[literalValue] = {\n            schema: opt,\n            literalKey,\n            literalValue\n          };\n        }\n        return Object.keys(map).length === options.length ? map : null;\n      };\n      const options = n[internal].definition.options;\n      const literalDiscriminatorMap = buildDiscriminatorMap(options);\n      if (literalDiscriminatorMap) {\n        // Emit wrappers keyed by the literal value\n        result.anyOf = options.map(opt => {\n          // Find this option's literal value by scanning its shape\n          const shape = opt[internal].definition.shape;\n          const [literalKey, litSchema] = Object.entries(shape).find(([, v]) => isLiteralType(v));\n          const literalValue = litSchema[internal].definition.value;\n          return {\n            type: 'object',\n            additionalProperties: false,\n            required: [literalValue],\n            properties: {\n              // When printing the option object, omit the discriminator literal\n              // key from the inner schema because it is already conveyed by\n              // the envelope key (literalValue)\n              [literalValue]: printNode(opt, false, inDef, pathSeen, literalKey)\n            }\n          };\n        });\n      } else {\n        // Fallback to previous behavior: index-based wrappers for complex options\n        result.anyOf = options.map((opt, index) => {\n          if (needsDiscriminatorWrapperInAnyOf(opt)) {\n            const indexAsStr = `${index}`;\n            return {\n              type: 'object',\n              additionalProperties: false,\n              required: [indexAsStr],\n              properties: {\n                [indexAsStr]: printNode(opt, false, inDef, pathSeen)\n              }\n            };\n          } else {\n            return printNode(opt, false, inDef, pathSeen);\n          }\n        });\n      }\n    } else {\n      result = n.toJsonSchema();\n      if (isRoot) {\n        result = {\n          type: 'object',\n          additionalProperties: false,\n          required: [PRIMITIVE_WRAPPER_FIELD_NAME],\n          properties: {\n            [PRIMITIVE_WRAPPER_FIELD_NAME]: result\n          }\n        };\n      }\n    }\n    pathSeen.delete(n);\n    return result;\n  }\n  // 3) Build the $defs section\n  const defs = {};\n  for (const [node, name] of defNameMap.entries()) {\n    // isRoot=false, inDef=node, fresh pathSeen\n    defs[name] = printNode(node, false, node, new Set());\n  }\n  // 4) Print the root schema\n  const rootPrinted = printNode(rootNode, true, null, new Set());\n  // 5) Assemble and return\n  return Object.assign(Object.assign({\n    $schema: 'http://json-schema.org/draft-07/schema#'\n  }, rootPrinted), Object.keys(defs).length > 0 ? {\n    $defs: defs\n  } : {});\n}\n\nvar public_api$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    AnyOfType: AnyOfType,\n    ArrayType: ArrayType,\n    BooleanType: BooleanType,\n    ConstStringType: LiteralType,\n    EnumType: EnumType,\n    HashbrownType: HashbrownType,\n    IntegerType: IntegerType,\n    NullType: NullType,\n    NumberType: NumberType,\n    ObjectType: ObjectType,\n    StringType: StringType,\n    anyOf: anyOf,\n    array: array$1,\n    boolean: boolean,\n    enumeration: enumeration,\n    getDescription: getDescription,\n    integer: integer,\n    isAnyOfType: isAnyOfType,\n    isArrayType: isArrayType,\n    isBooleanType: isBooleanType,\n    isEnumType: isEnumType,\n    isHashbrownType: isHashbrownType,\n    isIntegerType: isIntegerType,\n    isLiteralType: isLiteralType,\n    isNullType: isNullType,\n    isNumberType: isNumberType,\n    isObjectType: isObjectType,\n    isStringType: isStringType,\n    literal: literal,\n    nullish: nullish,\n    number: number,\n    object: object$1,\n    streaming: streaming,\n    string: string$1,\n    toJsonSchema: toJsonSchema\n});\n\nfunction sleep(timeout, abortSignal) {\n  return __awaiter(this, void 0, void 0, function* () {\n    yield new Promise(resolve => {\n      const timeoutId = setTimeout(resolve, timeout);\n      if (abortSignal) {\n        abortSignal.addEventListener('abort', () => {\n          clearTimeout(timeoutId);\n        });\n      }\n    });\n  });\n}\nfunction switchAsync(fn, outerSignal) {\n  let abortController;\n  if (outerSignal) {\n    outerSignal.addEventListener('abort', () => {\n      if (abortController) {\n        abortController.abort('cancelled');\n      }\n    });\n  }\n  return () => {\n    if (abortController) {\n      abortController.abort('cancelled');\n    }\n    const controller = new AbortController();\n    abortController = controller;\n    return fn(controller.signal).finally(() => {\n      if (abortController === controller) {\n        abortController = undefined;\n      }\n    });\n  };\n}\n\nvar api_models = /*#__PURE__*/Object.freeze({\n    __proto__: null\n});\n\nvar internal_models = /*#__PURE__*/Object.freeze({\n    __proto__: null\n});\n\nconst TRACE_LEVEL = 0;\nconst DEBUG_LEVEL = 1;\nconst INFO_LEVEL = 2;\nconst WARN_LEVEL = 3;\nconst ERROR_LEVEL = 4;\nconst NONE_LEVEL = 5;\nclass Logger {\n  constructor(logPathsEnabled) {\n    var _a;\n    this.logPathsEnabled = {};\n    this.logPathsEnabled = logPathsEnabled;\n    this.allLevel = (_a = logPathsEnabled['all']) !== null && _a !== void 0 ? _a : NONE_LEVEL;\n  }\n  for(loggerName) {\n    return {\n      trace: args => {\n        if (this.allLevel <= TRACE_LEVEL || this.logPathsEnabled[loggerName] && this.logPathsEnabled[loggerName] <= TRACE_LEVEL) {\n          console.trace(args);\n        }\n      },\n      debug: args => {\n        if (this.allLevel <= DEBUG_LEVEL || this.logPathsEnabled[loggerName] && this.logPathsEnabled[loggerName] <= DEBUG_LEVEL) {\n          console.log(args);\n        }\n      },\n      info: args => {\n        if (this.allLevel <= INFO_LEVEL || this.logPathsEnabled[loggerName] && this.logPathsEnabled[loggerName] <= INFO_LEVEL) {\n          console.info(args);\n        }\n      },\n      warn: args => {\n        if (this.allLevel <= WARN_LEVEL || this.logPathsEnabled[loggerName] && this.logPathsEnabled[loggerName] <= ERROR_LEVEL) {\n          console.warn(args);\n        }\n      },\n      error: args => {\n        if (this.allLevel <= ERROR_LEVEL || this.logPathsEnabled[loggerName] && this.logPathsEnabled[loggerName] <= TRACE_LEVEL) {\n          console.error(args);\n        }\n      }\n    };\n  }\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Skillet is an LLM-optimized streaming JSON Parser - perfectly suited for streaming hot and fresh JSON.\n *\n * Portions of this code are derived from partial-json (MIT License) (https://github.com/promplate/partial-json-parser-js).\n * See the LICENSE file in the project root for full license text.\n *\n * @license MIT\n * @author LiveLoveApp, LLC\n * @see https://github.com/liveloveapp/hashbrown\n * @see https://github.com/promplate/partial-json-parser-js\n */\nconst LOG_SETTINGS = {\n  all: NONE_LEVEL\n};\nclass PartialJSON extends Error {}\nclass MalformedJSON extends Error {}\nclass IncompleteNonStreamingObject extends Error {}\nclass UnexpectedStreamingType extends Error {}\nfunction shouldBeWrappedPrimitive(schema) {\n  if (isAnyOfType(schema) || isObjectType(schema)) {\n    return false;\n  }\n  return true;\n}\nconst buildDiscriminatorMap = options => {\n  const map = {};\n  for (const opt of options) {\n    if (!isObjectType(opt)) {\n      return null;\n    }\n    const shape = opt[internal].definition.shape;\n    // Find literal properties on this object option\n    const literalEntries = Object.entries(shape).filter(([, v]) => isLiteralType(v));\n    // Must have exactly one literal for unambiguous discrimination\n    if (literalEntries.length !== 1) {\n      return null;\n    }\n    const [literalKey, literalSchema] = literalEntries[0];\n    const literalValue = literalSchema[internal].definition.value;\n    if (typeof literalValue !== 'string') {\n      // Only support string discriminators\n      return null;\n    }\n    if (Object.prototype.hasOwnProperty.call(map, literalValue)) {\n      // Duplicate discriminator value -> ambiguous\n      return null;\n    }\n    map[literalValue] = {\n      schema: opt,\n      literalKey,\n      literalValue\n    };\n  }\n  return Object.keys(map).length === options.length ? map : null;\n};\nfunction parseJSON(jsonString, schema, assumeFinishedMessage) {\n  if (typeof jsonString !== 'string') {\n    throw new TypeError(`expecting str, got ${typeof jsonString}`);\n  }\n  if (!jsonString.trim()) {\n    return '';\n  }\n  return _parseJSON(jsonString.trim(), schema, assumeFinishedMessage);\n}\nconst _parseJSON = (jsonString, schema, assumeFinishedMessage) => {\n  const logger = new Logger(LOG_SETTINGS);\n  logger.for('_parseJSON').info('In _parseJson');\n  // Since each parse run is effectively starting over, this string should indicate\n  // how far we can expect to get this time\n  logger.for('_parseJSON').info(jsonString);\n  const length = jsonString.length;\n  let index = 0;\n  // Track current object/array so we can move up and down the document stack as we go\n  const containerStack = [schema];\n  const markPartialJSON = msg => {\n    throw new PartialJSON(`${msg} at position ${index}`);\n  };\n  const throwMalformedError = msg => {\n    throw new MalformedJSON(`${msg} at position ${index}`);\n  };\n  const parseAny = (currentKey, allowsIncomplete, insideArray, literalKey) => {\n    skipBlank();\n    logger.for('parseAny').info(`Remaining string: ${jsonString.slice(index)}`);\n    const currentLastContainer = containerStack[containerStack.length - 1];\n    logger.for('parseAny').debug('Current last container:');\n    logger.for('parseAny').debug(currentLastContainer);\n    if (index >= length) markPartialJSON('Unexpected end of input');\n    if (jsonString[index] === '\"') {\n      return parseStr(allowsIncomplete);\n    }\n    if (jsonString[index] === '{') {\n      /*\n        If the top-level schema is a primitive that should be object-wrapped, we\n        assume a wrapped primitive is starting\n               If the current container is an array, we assume an anyOf wrapper is starting.\n        \n        Else, we parse as a regular object.\n      */\n      if (Array.isArray(currentLastContainer)) {\n        return parseAnyOf(currentKey);\n      } else if (shouldBeWrappedPrimitive(currentLastContainer)) {\n        return parseWrappedPrimitive();\n      } else {\n        return parseObj(currentKey, insideArray, literalKey);\n      }\n    }\n    if (jsonString[index] === '[') {\n      return parseArr(currentKey, allowsIncomplete);\n    }\n    if (jsonString.substring(index, index + 4) === 'null') {\n      index += 4;\n      return null;\n    }\n    if (jsonString.substring(index, index + 4) === 'true') {\n      index += 4;\n      return true;\n    }\n    if (jsonString.substring(index, index + 5) === 'false') {\n      index += 5;\n      return false;\n    }\n    return parseNum();\n  };\n  const parseStr = allowsIncomplete => {\n    if (containerStack.length === 1) {\n      // String literal at top level, so see if the the schema allows streaming\n      allowsIncomplete = isStreaming(schema);\n    }\n    const start = index;\n    // Is the next character a string?\n    // parseAny checks before calling parseStr, but functions parsing\n    // key names (i.e. parseObj) do not, and we need to detect potentially\n    // malformed JSON immediately following a comma\n    if (jsonString[start] !== '\"') {\n      throwMalformedError('String expected but not started');\n    }\n    let escape = false;\n    index++; // skip initial quote\n    while (index < length && (jsonString[index] !== '\"' || escape && jsonString[index - 1] === '\\\\')) {\n      escape = jsonString[index] === '\\\\' ? !escape : false;\n      index++;\n    }\n    if (jsonString.charAt(index) == '\"') {\n      try {\n        return JSON.parse(jsonString.substring(start, ++index - Number(escape)));\n      } catch (e) {\n        throwMalformedError(String(e));\n      }\n    } else if (allowsIncomplete) {\n      try {\n        return JSON.parse(jsonString.substring(start, index - Number(escape)) + '\"');\n      } catch (_a) {\n        // SyntaxError: Invalid escape sequence\n        return JSON.parse(jsonString.substring(start, jsonString.lastIndexOf('\\\\')) + '\"');\n      }\n    }\n    markPartialJSON('Unterminated string literal');\n  };\n  const handleIncompleteWrappedPrimitive = val => {\n    if (val == null) {\n      throw new IncompleteNonStreamingObject('Incomplete wrapped primitive object found');\n    }\n    return val;\n  };\n  const parseWrappedPrimitive = () => {\n    logger.for('parseWrappedPrimitive').info(`Parsing wrapped primitive object`);\n    index++; // skip initial brace\n    skipBlank();\n    let value = undefined;\n    try {\n      while (jsonString[index] !== '}') {\n        skipBlank();\n        if (index >= length) {\n          return handleIncompleteWrappedPrimitive(value);\n        }\n        const key = parseStr(false);\n        if (key !== PRIMITIVE_WRAPPER_FIELD_NAME) {\n          // How did we get here if this isn't really a wrapped primitive?\n          throwMalformedError(`Wrapped primitive has unexpected key name: ${key}`);\n        }\n        skipBlank();\n        index++; // skip colon\n        try {\n          logger.for('parseWrappedPrimitive').debug(`Handling key: ${key}`);\n          const matchingSchema = containerStack[containerStack.length - 1];\n          logger.for('parseWrappedPrimitive').debug('Found top-level schema:');\n          logger.for('parseWrappedPrimitive').debug(matchingSchema);\n          // This isn't a real object, so don't pass the key name\n          value = parseAny('', isStreaming(matchingSchema), false, undefined);\n          logger.for('parseWrappedPrimitive').debug('Value:');\n          logger.for('parseWrappedPrimitive').debug(value);\n        } catch (e) {\n          logger.for('parseWrappedPrimitive').error(e);\n          return handleIncompleteWrappedPrimitive(value);\n        }\n        skipBlank();\n        if (jsonString[index] === ',') index++; // skip comma\n      }\n    } catch (e) {\n      logger.for('parseWrappedPrimitive').error(e);\n      return handleIncompleteWrappedPrimitive(value);\n    }\n    index++; // skip final brace\n    const completedContainer = containerStack.pop();\n    logger.for('parseWrappedPrimitive').info(`Completed wrapped primitive container: ${completedContainer === null || completedContainer === void 0 ? void 0 : completedContainer[internal].definition.description}`);\n    return value;\n  };\n  const handleIncompleteAnyOf = val => {\n    if (val == null) {\n      throw new IncompleteNonStreamingObject('Incomplete anyOf object found');\n    }\n    return val;\n  };\n  const parseAnyOf = parentKey => {\n    var _a;\n    logger.for('parseAnyOf').info(`Parsing anyOf with parent: ${parentKey}`);\n    index++; // skip initial brace\n    skipBlank();\n    let value = undefined;\n    let currentContainerStackIndex = containerStack.length - 1;\n    const optionsForMap = (_a = containerStack[currentContainerStackIndex]) !== null && _a !== void 0 ? _a : [];\n    const literalDiscriminatorMap = Array.isArray(optionsForMap) ? buildDiscriminatorMap(optionsForMap) : null;\n    const getMatchingSchemaForDiscriminator = key => {\n      if (literalDiscriminatorMap && key in literalDiscriminatorMap) {\n        return literalDiscriminatorMap[key];\n      }\n      // Fallback to numeric discriminator\n      const numericIndex = parseInt(key);\n      if (Array.isArray(optionsForMap)) {\n        const schema = optionsForMap[numericIndex];\n        return schema ? {\n          schema\n        } : undefined;\n      }\n      return undefined;\n    };\n    try {\n      while (jsonString[index] !== '}') {\n        skipBlank();\n        if (index >= length) {\n          return handleIncompleteAnyOf(value);\n        }\n        const key = parseStr(false);\n        skipBlank();\n        index++; // skip colon\n        try {\n          logger.for('parseAnyOf').debug(`Handling discriminator: ${key}`);\n          const matching = getMatchingSchemaForDiscriminator(key);\n          logger.for('parseAnyOf').debug(`Found matching schema in current container for ${key}: ${!!(matching && matching.schema)}`);\n          if (matching === null || matching === void 0 ? void 0 : matching.schema) {\n            logger.for('parseAnyOf').debug('Adding schema for discriminator');\n            logger.for('parseAnyOf').debug(matching.schema);\n            // If the matching schema is itself an anyOf, we need to push its options array\n            // to the schema stack instead of the schema\n            if (isAnyOfType(matching.schema)) {\n              containerStack.push(matching.schema[internal].definition.options);\n            } else {\n              containerStack.push(object$1(`AnyOf Wrapper for ${key}`, {\n                [key]: matching.schema\n              }));\n            }\n            currentContainerStackIndex = containerStack.length - 1;\n            value = parseAny(key, true, false, matching === null || matching === void 0 ? void 0 : matching.literalKey);\n            // If we matched via literal discriminator and the inner object doesn't\n            // include the literal field, inject it so the parsed result conforms\n            // to the declared schema.\n            if (literalDiscriminatorMap && matching.literalKey && matching.literalValue && value != null && typeof value === 'object' && !(matching.literalKey in value)) {\n              value[matching.literalKey] = matching.literalValue;\n            }\n            logger.for('parseAnyOf').debug('Value:');\n            logger.for('parseAnyOf').debug(value);\n          } else {\n            throwMalformedError(`No schema found for discriminator: ${key}`);\n          }\n        } catch (e) {\n          logger.for('parseAnyOf').error(e);\n          return handleIncompleteAnyOf(value);\n        }\n        skipBlank();\n        if (jsonString[index] === ',') index++; // skip comma\n      }\n    } catch (e) {\n      logger.for('parseAnyOf').error(e);\n      return handleIncompleteAnyOf(value);\n    }\n    index++; // skip final brace\n    const completedContainer = containerStack.pop();\n    if (Array.isArray(completedContainer)) {\n      logger.for('parseAnyOf').debug(`Completed nested anyOf container`);\n    } else {\n      logger.for('parseAnyOf').debug(`Completed anyOf container: ${completedContainer === null || completedContainer === void 0 ? void 0 : completedContainer[internal].definition.description}`);\n    }\n    return value;\n  };\n  const handleIncompleteObject = (currentContainerStackIndex, obj, literalKey) => {\n    const currentContainer = containerStack[currentContainerStackIndex];\n    if (isStreaming(currentContainer)) {\n      logger.for('parseObj').debug('Index >= length: returning partial object');\n      return obj;\n    }\n    logger.for('parseObj').debug('Index >= length: opting not to return partial obj if non-streaming properties are missing');\n    // Are all non-streaming fields present?\n    if (Object.entries(currentContainer[internal].definition.shape).every(([key, subSchema]) => {\n      logger.for('parseObj').debug(`key ${key} is streaming: ${isStreaming(subSchema)} and present: ${key in obj}`);\n      if (key === literalKey) {\n        // A literal key extracted from an anyOf to be a discriminator won't be in the\n        // object until after it is finished parsing, so skip checking for it.\n        logger.for('parseObj').debug(`key ${key} is an extracted discriminator, so it will not be present`);\n        return true;\n      }\n      // if this key is streaming and not present, add an \"empty\" value\n      if (isStreaming(subSchema)) {\n        if (!(key in obj)) {\n          if (isStringType(subSchema) || isLiteralType(subSchema) || isEnumType(subSchema)) {\n            obj[key] = '';\n          } else if (isArrayType(subSchema)) {\n            obj[key] = [];\n          } else if (isObjectType(subSchema)) {\n            obj[key] = {};\n          } else {\n            throw new UnexpectedStreamingType('Unexpected schema type for a streaming prop');\n          }\n        }\n        return true;\n      }\n      if (key in obj) {\n        return true;\n      }\n      // If the key schema is an anyOf and includes nullish, default to null\n      if (isAnyOfType(subSchema)) {\n        const options = subSchema[internal].definition.options;\n        if (options.some(opt => isNullType(opt))) {\n          obj[key] = null;\n          return true;\n        }\n      }\n      return false;\n    })) {\n      return obj;\n    }\n    throw new IncompleteNonStreamingObject('Incomplete but non-streaming object found');\n  };\n  const parseObj = (parentKey, insideArray, literalKey) => {\n    var _a, _b;\n    logger.for('parseObj').info(`Parsing object with parent: ${parentKey}`);\n    index++; // skip initial brace\n    skipBlank();\n    const obj = {};\n    let inAnyOfWrapper = false;\n    // If we are not in an array, find key in current level of document stock, and add to stack\n    if (parentKey !== '') {\n      // Are we in any anyOf?\n      const currentContainer = containerStack[containerStack.length - 1];\n      // Not an anyOf, so move down a level\n      if (!Array.isArray(currentContainer)) {\n        // If parentKey is set, we are not in an array, so get the next stack container\n        // (arrays handle it differently, so they can do clean up when the array is complete)\n        const nextContainer = currentContainer[internal].definition.shape[parentKey];\n        logger.for('parseObj').debug(`Starting new object with key: ${parentKey}`);\n        logger.for('parseObj').debug(nextContainer);\n        if (nextContainer == null) {\n          throwMalformedError(`Key: ${parentKey} not expected in container`);\n        }\n        containerStack.push(nextContainer);\n      }\n    }\n    const currentContainerStackIndex = containerStack.length - 1;\n    try {\n      while (jsonString[index] !== '}') {\n        skipBlank();\n        if (index >= length) {\n          return handleIncompleteObject(currentContainerStackIndex, obj, literalKey);\n        }\n        const key = parseStr(false);\n        skipBlank();\n        index++; // skip colon\n        try {\n          logger.for('parseObj').debug(`Handling key: ${key}`);\n          const currentContainer = containerStack[currentContainerStackIndex];\n          // Is this an anyOf (which can happen for nested anyOfs)\n          if (isAnyOfType(currentContainer)) {\n            // Property is anyOf, so push option list to container stack\n            containerStack.push(currentContainer[internal].definition.options);\n            logger.for('parseObj').debug(`Object key ${key} in container ${currentContainerStackIndex} is anyOf`);\n            // AnyOfs are never directly streaming\n            const value = parseAny(key, false, false, undefined);\n            inAnyOfWrapper = true;\n            logger.for('parseObj').debug('Value:');\n            logger.for('parseObj').debug(value);\n            obj[key] = value;\n          } else {\n            // This is a regular object, so find the schema for the key\n            const schemaFragmentForKey = currentContainer[internal].definition.shape[key];\n            if (isAnyOfType(schemaFragmentForKey)) {\n              // Property is anyOf, so push option list to container stack\n              containerStack.push(schemaFragmentForKey[internal].definition.options);\n              logger.for('parseObj').debug(`Object key ${key} in container ${currentContainerStackIndex} is anyOf`);\n              // AnyOfs are never directly streaming\n              const value = parseAny(key, false, false, undefined);\n              inAnyOfWrapper = true;\n              logger.for('parseObj').debug('Value:');\n              logger.for('parseObj').debug(value);\n              obj[key] = value;\n            } else {\n              const currentKeyAllowsIncomplete = isStreaming(schemaFragmentForKey);\n              logger.for('parseObj').debug(`Object key ${key} in container ${currentContainerStackIndex} allows incomplete: ${currentKeyAllowsIncomplete}`);\n              const value = parseAny(key, currentKeyAllowsIncomplete, false, undefined);\n              logger.for('parseObj').debug('Value:');\n              logger.for('parseObj').debug(value);\n              obj[key] = value;\n            }\n          }\n        } catch (e) {\n          logger.for('parseObj').error(e);\n          return handleIncompleteObject(currentContainerStackIndex, obj, literalKey);\n        }\n        skipBlank();\n        if (jsonString[index] === ',') index++; // skip comma\n      }\n    } catch (e) {\n      logger.for('parseObj').error(e);\n      return handleIncompleteObject(currentContainerStackIndex, obj, literalKey);\n    }\n    index++; // skip final brace\n    // Are we inside an array?  They handle adding/removing stack containers for themselves\n    if (!insideArray || inAnyOfWrapper) {\n      // If we just completed an anyOf wrapper, we need to pop the options array off the stack\n      if (!insideArray && inAnyOfWrapper) {\n        const completedContainer = containerStack.pop();\n        logger.for('parseObj').debug(`Also completed anyOf container: ${completedContainer}`);\n      }\n      // Done with this container, so pop off stack\n      const completedContainer = containerStack.pop();\n      logger.for('parseObj').debug(`Completed object container: ${(_b = (_a = completedContainer === null || completedContainer === void 0 ? void 0 : completedContainer[internal]) === null || _a === void 0 ? void 0 : _a.definition) === null || _b === void 0 ? void 0 : _b.description}`);\n    } else {\n      logger.for('parseObj').debug('Inside array. Object completed, but keeping container stack');\n    }\n    return obj;\n  };\n  const parseArr = (currentKey, allowsIncomplete) => {\n    if (containerStack.length === 1 && isArrayType(containerStack[0])) {\n      // See if the the schema allows streaming\n      allowsIncomplete = isStreaming(schema);\n    }\n    index++; // skip initial bracket\n    logger.for('parseArr').info('parseArr: Start');\n    const arr = [];\n    let arrayContainer = containerStack[containerStack.length - 1][internal].definition.element;\n    if (currentKey) {\n      arrayContainer = containerStack[containerStack.length - 1][internal].definition.shape[currentKey][internal].definition.element;\n    }\n    logger.for('parseArr').debug('Array container: ');\n    logger.for('parseArr').debug(arrayContainer);\n    logger.for('parseArr').debug(`Allows streaming? ${allowsIncomplete}`);\n    // logger.log(`Is anyOf? ${s.isAnyOfType(arrayContainer)}`);\n    let containerNeedsPopping = false;\n    let contentsAllowIncomplete = false;\n    // If this array is of objects, push the container onto the stack\n    if (isObjectType(arrayContainer)) {\n      logger.for('parseArr').debug('Array container is object type');\n      containerStack.push(arrayContainer);\n      containerNeedsPopping = true;\n    } else if (isAnyOfType(arrayContainer)) {\n      logger.for('parseArr').debug('Array container is anyOf. Pushing anyOf array to container stack');\n      containerStack.push(arrayContainer[internal].definition.options);\n      containerNeedsPopping = true;\n    } else {\n      logger.for('parseArr').debug('Array container is primitive');\n      // It's not an object, so check if it is a streaming primitive\n      contentsAllowIncomplete = isStreaming(arrayContainer);\n      logger.for('parseArr').debug(`Array primitive content allows streaming: ${contentsAllowIncomplete}`);\n    }\n    try {\n      while (jsonString[index] !== ']') {\n        logger.for('parseArr').debug(`Array content allows incomplete: ${contentsAllowIncomplete}`);\n        arr.push(parseAny('', contentsAllowIncomplete, true, undefined));\n        skipBlank();\n        if (jsonString[index] === ',') {\n          index++; // skip comma\n        }\n      }\n    } catch (_a) {\n      // logger.for('parseArr').error(e);\n      if (allowsIncomplete) {\n        return arr;\n      }\n      markPartialJSON(\"Expected ']' at end of array\");\n    }\n    index++; // skip final bracket\n    // Array was completed, so put container off if needed\n    if (containerNeedsPopping) {\n      containerStack.pop();\n    }\n    return arr;\n  };\n  const parseNum = () => {\n    if (index === 0) {\n      if (jsonString === '-') throwMalformedError(\"Not sure what '-' is\");\n      try {\n        // JSON string starts with a number, so we'll try to parse the whole thing as one.\n        // Thus, set index to length.\n        index = jsonString.length;\n        return JSON.parse(jsonString);\n      } catch (e) {\n        throwMalformedError(String(e));\n      }\n    }\n    const start = index;\n    if (jsonString[index] === '-') index++;\n    while (jsonString[index] && ',]}'.indexOf(jsonString[index]) === -1) index++;\n    if (index == length) markPartialJSON('Unterminated number literal');\n    try {\n      return JSON.parse(jsonString.substring(start, index));\n    } catch (_a) {\n      if (jsonString.substring(start, index) === '-') markPartialJSON(\"Not sure what '-' is\");\n      try {\n        return JSON.parse(jsonString.substring(start, jsonString.lastIndexOf('e')));\n      } catch (e) {\n        throwMalformedError(String(e));\n      }\n    }\n  };\n  const skipBlank = () => {\n    while (index < length && ' \\n\\r\\t'.includes(jsonString[index])) {\n      index++;\n    }\n  };\n  try {\n    const result = parseAny('', false, false, undefined);\n    // We returned, but have we not consumed the whole length?\n    // We only check this on finished messages so as not to spam\n    // the warning on each few-character chunk of a streaming\n    // message.\n    if (assumeFinishedMessage && index < length) {\n      // NB: We call console.warn directly here instead of using the\n      // logger mechanism, because getting here almost always means the\n      // LLM hallucinated, adding extra stuff after the response or encoded\n      // it in a strange way (like escaping part or all of the JSON).\n      console.warn(`Extra data detected after parsing.\\n\nParsed: ${JSON.stringify(result)}\\n\nLeft over: ${jsonString.substring(index)}\\n\nThis is often caused by extra or incorrectly formatted data being returned by the \nLLM, despite requesting data with a particular structure.\n\nDifferent models, by default, handle complex structured data with varied levels of accuracy.\n\nModel behavior can typically be improved by:\n- Adding 1-3 examples of correct output to your prompt (aka few-shot).\n- Adding guardrails to the prompt like \"Do not escape tool function arguments.\"\n`);\n    }\n    return result;\n  } catch (e) {\n    if (e instanceof IncompleteNonStreamingObject) {\n      logger.for('_parseJSON').error('Got incomplete object error at top level');\n      return '';\n    }\n    if (e instanceof PartialJSON) {\n      logger.for('_parseJSON').error('Got unterminated container');\n      return '';\n    }\n    if (e instanceof MalformedJSON) {\n      if (e.message.includes('Exponent part is missing a number')) {\n        logger.for('_parseJSON').error('Found number with exponent sans number');\n        return '';\n      }\n      if (e.message.includes('Unterminated fractional number')) {\n        logger.for('_parseJSON').error('Found number with decimal point sans numbers');\n        return '';\n      }\n    }\n    throw e;\n  }\n};\n\nclass StreamSchemaParser {\n  constructor(schema) {\n    this.dataString = '';\n    this.schema = schema;\n  }\n  parse(item, assumeFinishedMessage) {\n    this.dataString += item;\n    const currResult = parseJSON(this.dataString, this.schema, assumeFinishedMessage);\n    return currResult;\n  }\n}\n\n/**\n * Converts a view message to an internal message.\n *\n * @param message - The view message to convert.\n * @returns The internal message.\n * @internal\n */\nfunction toInternalMessagesFromView(message) {\n  switch (message.role) {\n    case 'user':\n      {\n        return [{\n          role: 'user',\n          content: message.content\n        }];\n      }\n    case 'assistant':\n      {\n        return [{\n          role: 'assistant',\n          content: message.content,\n          toolCallIds: message.toolCalls.map(toolCall => toolCall.toolCallId)\n        }];\n      }\n    default:\n      {\n        return [];\n      }\n  }\n}\n/**\n * Converts an internal message to a view message.\n *\n * @param message - The internal message to convert.\n * @returns The view message.\n * @internal\n */\nfunction toViewMessagesFromInternal(message, toolCalls, tools, outputSchema, streaming = true) {\n  switch (message.role) {\n    case 'user':\n      {\n        return [{\n          role: 'user',\n          content: message.content\n        }];\n      }\n    case 'error':\n      {\n        return [{\n          role: 'error',\n          content: message.content\n        }];\n      }\n    case 'assistant':\n      {\n        const tater = outputSchema ? new StreamSchemaParser(outputSchema) : undefined;\n        let content = message.content;\n        if (typeof message.content === 'string' && tater) {\n          content = tater.parse(message.content, !streaming);\n        } else if (message.content && typeof message.content === 'object') {\n          content = message.content;\n        }\n        return [{\n          role: 'assistant',\n          content,\n          toolCalls: message.toolCallIds.flatMap(toolCallId => {\n            const toolCall = toolCalls[toolCallId];\n            const tool = tools.find(tool => tool.name === toolCall.name);\n            if (!tool) {\n              return [];\n            }\n            let toolArgs = toolCall.arguments;\n            // Ollama will return POJOs\n            if (typeof toolCall.arguments === 'object') {\n              toolArgs = JSON.stringify(toolCall.arguments);\n            }\n            switch (toolCall.status) {\n              case 'done':\n                {\n                  return [{\n                    role: 'tool',\n                    status: 'done',\n                    name: toolCall.name,\n                    toolCallId,\n                    args: isHashbrownType(tool.schema) ? new StreamSchemaParser(tool.schema).parse(toolArgs, !streaming) : JSON.parse(toolArgs),\n                    // The internal models don't use a union, since that tends to\n                    // complicate reducer logic. This is necessary to uplift our\n                    // internal model into the view union.\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    result: toolCall.result\n                  }];\n                }\n              case 'pending':\n                {\n                  return [{\n                    role: 'tool',\n                    status: 'pending',\n                    name: toolCall.name,\n                    toolCallId,\n                    progress: toolCall.progress,\n                    args: isHashbrownType(tool.schema) ? new StreamSchemaParser(tool.schema).parse(toolArgs, !streaming) : null\n                  }];\n                }\n            }\n          })\n        }];\n      }\n    default:\n      {\n        return [];\n      }\n  }\n}\n/**\n * Converts an internal message to an API message.\n *\n * @param message - The internal message to convert.\n * @param toolCalls - The tool calls to convert.\n * @returns The API message.\n * @internal\n */\nfunction toApiMessagesFromInternal(message, toolCalls) {\n  switch (message.role) {\n    case 'user':\n      {\n        return [{\n          role: 'user',\n          content: typeof message.content === 'string' ? message.content : JSON.stringify(message.content)\n        }];\n      }\n    case 'assistant':\n      {\n        const toolCallsForMessage = toolCalls.filter(toolCall => message.toolCallIds.includes(toolCall.id));\n        const toolMessages = toolCallsForMessage.flatMap(toolCall => {\n          if (toolCall.status !== 'done' || !toolCall.result) {\n            return [];\n          }\n          return [{\n            role: 'tool',\n            content: toolCall.result,\n            toolCallId: toolCall.id,\n            toolName: toolCall.name\n          }];\n        });\n        return [{\n          role: 'assistant',\n          content: message.content,\n          toolCalls: toolCallsForMessage.map((toolCall, index) => ({\n            id: toolCall.id,\n            index,\n            type: 'function',\n            function: {\n              name: toolCall.name,\n              arguments: toolCall.arguments\n            }\n          }))\n        }, ...toolMessages];\n      }\n    default:\n      {\n        return [];\n      }\n  }\n}\n/**\n * Converts an internal tool to an API tool.\n *\n * @param tool - The internal tool to convert.\n * @returns The API tool.\n * @internal\n */\nfunction toApiToolsFromInternal(tools, emulateStructuredOutput, outputSchema) {\n  const apiTools = tools.map(tool => ({\n    description: tool.description,\n    name: tool.name,\n    parameters: isHashbrownType(tool.schema) ? toJsonSchema(tool.schema) : tool.schema\n  }));\n  if (emulateStructuredOutput) {\n    apiTools.push({\n      description: 'This should be your final tool call. Generate a response that matches the provided schema.',\n      name: 'output',\n      parameters: toJsonSchema(outputSchema)\n    });\n  }\n  return apiTools;\n}\n/**\n * Converts an API tool call to an internal tool call.\n *\n * @param toolCall - The API tool call to convert.\n * @returns The internal tool calls.\n * @internal\n */\nfunction toInternalToolCallsFromApi(toolCall) {\n  if (toolCall.function.name === 'output') {\n    return [];\n  }\n  return [{\n    id: toolCall.id,\n    name: toolCall.function.name,\n    arguments: toolCall.function.arguments,\n    status: 'pending'\n  }];\n}\n/**\n * Converts a view message to an internal tool call.\n *\n * @param message - The view message to convert.\n * @returns The internal tool calls.\n * @internal\n */\nfunction toInternalToolCallsFromView(messages) {\n  return messages.flatMap(message => {\n    if (message.role !== 'assistant') {\n      return [];\n    }\n    return message.toolCalls.map(toolCall => {\n      switch (toolCall.status) {\n        case 'done':\n          {\n            return {\n              id: toolCall.toolCallId,\n              name: toolCall.name,\n              arguments: JSON.stringify(toolCall.args),\n              status: 'done',\n              result: toolCall.result\n            };\n          }\n        case 'pending':\n          {\n            return {\n              id: toolCall.toolCallId,\n              name: toolCall.name,\n              status: 'pending',\n              arguments: JSON.stringify(toolCall.args)\n            };\n          }\n      }\n    });\n  });\n}\n/**\n * Converts an API assistant message to an internal assistant message.\n *\n * @param message - The API assistant message to convert.\n * @returns The internal assistant message.\n * @internal\n */\nfunction toInternalMessagesFromApi(message) {\n  var _a, _b;\n  if (message.role === 'tool') {\n    return [];\n  }\n  if (message.role === 'user') {\n    return [{\n      role: 'user',\n      content: message.content\n    }];\n  }\n  if (message.role === 'error') {\n    return [{\n      role: 'error',\n      content: message.content\n    }];\n  }\n  const output = (_a = message.toolCalls) === null || _a === void 0 ? void 0 : _a.find(toolCall => toolCall.function.name === 'output');\n  const content = output ? output.function.arguments : message.content;\n  return [{\n    role: 'assistant',\n    content,\n    toolCallIds: ((_b = message.toolCalls) === null || _b === void 0 ? void 0 : _b.filter(toolCall => toolCall.function.name !== 'output').map(toolCall => toolCall.id)) || []\n  }];\n}\n\nvar internal_helpers = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    toApiMessagesFromInternal: toApiMessagesFromInternal,\n    toApiToolsFromInternal: toApiToolsFromInternal,\n    toInternalMessagesFromApi: toInternalMessagesFromApi,\n    toInternalMessagesFromView: toInternalMessagesFromView,\n    toInternalToolCallsFromApi: toInternalToolCallsFromApi,\n    toInternalToolCallsFromView: toInternalToolCallsFromView,\n    toViewMessagesFromInternal: toViewMessagesFromInternal\n});\n\nvar public_api = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    Api: api_models,\n    Internal: internal_models,\n    helpers: internal_helpers\n});\n\nconst initialState$4 = {\n  apiUrl: '',\n  model: '',\n  system: '',\n  debounce: 150,\n  emulateStructuredOutput: false,\n  retries: 0\n};\nconst reducer$5 = createReducer(initialState$4, on(devActions.init, (state, action) => {\n  var _a, _b, _c;\n  return Object.assign(Object.assign({}, state), {\n    apiUrl: action.payload.apiUrl,\n    model: action.payload.model,\n    system: action.payload.system,\n    debounce: (_a = action.payload.debounce) !== null && _a !== void 0 ? _a : state.debounce,\n    responseSchema: action.payload.responseSchema,\n    middleware: action.payload.middleware,\n    emulateStructuredOutput: (_b = action.payload.emulateStructuredOutput) !== null && _b !== void 0 ? _b : state.emulateStructuredOutput,\n    retries: (_c = action.payload.retries) !== null && _c !== void 0 ? _c : state.retries\n  });\n}), on(devActions.updateOptions, (state, action) => {\n  return Object.assign(Object.assign({}, state), action.payload);\n}));\nconst selectApiUrl$1 = state => state.apiUrl;\nconst selectModel$1 = state => state.model;\nconst selectSystem$1 = state => state.system;\nconst selectDebounce$1 = state => state.debounce;\nconst selectResponseSchema$1 = state => state.responseSchema;\nconst selectMiddleware$1 = state => state.middleware;\nconst selectEmulateStructuredOutput$1 = state => state.emulateStructuredOutput;\nconst selectRetries$1 = state => state.retries;\n\nconst initialState$3 = {\n  messages: []\n};\nconst reducer$4 = createReducer(initialState$3, on(devActions.init, (state, action) => {\n  const messages = action.payload.messages;\n  if (!messages) {\n    return state;\n  }\n  return Object.assign(Object.assign({}, state), {\n    messages: messages.flatMap(message => toInternalMessagesFromView(message))\n  });\n}), on(apiActions.generateMessageSuccess, (state, action) => {\n  const message = action.payload;\n  const internalMessages = toInternalMessagesFromApi(message);\n  return Object.assign(Object.assign({}, state), {\n    messages: [...state.messages, ...internalMessages]\n  });\n}), on(apiActions.generateMessageError, (state, action) => {\n  const message = action.payload;\n  const errorMessage = {\n    role: 'error',\n    content: message.message\n  };\n  return Object.assign(Object.assign({}, state), {\n    messages: [...state.messages, errorMessage]\n  });\n}), on(devActions.setMessages, (state, action) => {\n  const messages = action.payload.messages;\n  const internalMessages = messages.flatMap(message => toInternalMessagesFromView(message));\n  return Object.assign(Object.assign({}, state), {\n    messages: internalMessages\n  });\n}), on(devActions.sendMessage, (state, action) => {\n  const message = action.payload.message;\n  const internalMessages = toInternalMessagesFromView(message);\n  return Object.assign(Object.assign({}, state), {\n    messages: [...state.messages, ...internalMessages]\n  });\n}));\nconst selectMessages$1 = state => state.messages;\n\nconst initialStatusState = {\n  isReceiving: false,\n  isSending: false,\n  isRunningToolCalls: false,\n  error: undefined,\n  exhaustedRetries: false\n};\nconst reducer$3 = createReducer(initialStatusState, on(devActions.init, (state, action) => {\n  var _a;\n  const messages = (_a = action.payload.messages) !== null && _a !== void 0 ? _a : [];\n  const lastMessage = messages[messages.length - 1];\n  if ((lastMessage === null || lastMessage === void 0 ? void 0 : lastMessage.role) === 'user') {\n    return Object.assign(Object.assign({}, state), {\n      isSending: true\n    });\n  }\n  return state;\n}), on(devActions.sendMessage, devActions.setMessages, devActions.resendMessages, state => {\n  return Object.assign(Object.assign({}, state), {\n    isSending: true\n  });\n}), on(apiActions.generateMessageStart, state => {\n  return Object.assign(Object.assign({}, state), {\n    isSending: false,\n    isReceiving: true\n  });\n}), on(apiActions.generateMessageChunk, state => {\n  return Object.assign(Object.assign({}, state), {\n    isReceiving: true\n  });\n}), on(apiActions.generateMessageSuccess, state => {\n  return Object.assign(Object.assign({}, state), {\n    isReceiving: false,\n    isRunningToolCalls: true,\n    error: undefined,\n    exhaustedRetries: false\n  });\n}), on(apiActions.generateMessageError, (state, action) => {\n  return Object.assign(Object.assign({}, state), {\n    isReceiving: false,\n    isSending: false,\n    error: action.payload\n  });\n}), on(internalActions.runToolCallsSuccess, state => {\n  return Object.assign(Object.assign({}, state), {\n    isRunningToolCalls: false,\n    isSending: true\n  });\n}), on(internalActions.runToolCallsError, (state, action) => {\n  return Object.assign(Object.assign({}, state), {\n    isRunningToolCalls: false,\n    error: action.payload\n  });\n}), on(apiActions.generateMessageExhaustedRetries, state => {\n  return Object.assign(Object.assign({}, state), {\n    exhaustedRetries: true\n  });\n}), on(devActions.stopMessageGeneration, state => {\n  return Object.assign(Object.assign({}, state), {\n    isReceiving: false,\n    isSending: false,\n    isRunningToolCalls: false,\n    error: undefined,\n    exhaustedRetries: false\n  });\n}), on(internalActions.skippedToolCalls, state => {\n  return Object.assign(Object.assign({}, state), {\n    isRunningToolCalls: false,\n    isSending: false,\n    isReceiving: false\n  });\n}));\nconst selectIsReceiving$1 = state => state.isReceiving;\nconst selectIsSending$1 = state => state.isSending;\nconst selectIsRunningToolCalls$1 = state => state.isRunningToolCalls;\nconst selectError$1 = state => state.error;\nconst selectExhaustedRetries$1 = state => state.exhaustedRetries;\n\nconst initialState$2 = {\n  message: null,\n  toolCalls: []\n};\nconst reducer$2 = createReducer(initialState$2, on(apiActions.generateMessageChunk, (state, action) => {\n  var _a, _b, _c, _d, _e;\n  const apiMessage = action.payload;\n  const [internalMessage] = toInternalMessagesFromApi({\n    role: (_a = apiMessage.role) !== null && _a !== void 0 ? _a : 'assistant',\n    content: (_b = apiMessage.content) !== null && _b !== void 0 ? _b : '',\n    toolCalls: (_c = apiMessage.toolCalls) !== null && _c !== void 0 ? _c : []\n  });\n  if (!internalMessage) {\n    return state;\n  }\n  if (internalMessage.role !== 'assistant') {\n    return state;\n  }\n  return Object.assign(Object.assign({}, state), {\n    message: internalMessage,\n    toolCalls: (_e = (_d = action.payload.toolCalls) === null || _d === void 0 ? void 0 : _d.flatMap(toInternalToolCallsFromApi)) !== null && _e !== void 0 ? _e : []\n  });\n}), on(apiActions.generateMessageSuccess, state => {\n  return Object.assign(Object.assign({}, state), {\n    message: null\n  });\n}), on(devActions.stopMessageGeneration, (state, action) => {\n  return Object.assign(Object.assign({}, state), {\n    message: action.payload ? null : state.message,\n    toolCalls: []\n  });\n}));\nconst selectRawStreamingMessage = state => state.message;\nconst selectRawStreamingToolCalls = state => state.toolCalls;\nconst selectStreamingMessage$1 = select(selectRawStreamingMessage, selectRawStreamingToolCalls, (message, toolCalls) => {\n  var _a, _b;\n  if (!message) {\n    return null;\n  }\n  return {\n    role: (_a = message.role) !== null && _a !== void 0 ? _a : 'assistant',\n    content: (_b = message.content) !== null && _b !== void 0 ? _b : '',\n    toolCallIds: toolCalls.map(toolCall => toolCall.id)\n  };\n});\nconst selectStreamingToolCallEntities$1 = select(selectRawStreamingToolCalls, toolCalls => {\n  return toolCalls.reduce((acc, toolCall) => {\n    acc[toolCall.id] = toolCall;\n    return acc;\n  }, {});\n});\n\nconst adapter = createEntityAdapter({\n  selectId: toolCall => toolCall.id\n});\nconst initialState$1 = {\n  ids: [],\n  entities: {}\n};\nconst reducer$1 = createReducer(initialState$1, on(devActions.init, devActions.setMessages, (state, action) => {\n  const messages = action.payload.messages;\n  if (!messages) {\n    return initialState$1;\n  }\n  return adapter.addMany(initialState$1, toInternalToolCallsFromView(messages));\n}), on(apiActions.generateMessageSuccess, (state, action) => {\n  const message = action.payload;\n  if (!message.toolCalls) {\n    return state;\n  }\n  return adapter.addMany(state, message.toolCalls.flatMap(toInternalToolCallsFromApi));\n}), on(internalActions.runToolCallsSuccess, (state, action) => {\n  const {\n    toolMessages\n  } = action.payload;\n  const changes = toolMessages.map(toolMessage => ({\n    id: toolMessage.toolCallId,\n    updates: {\n      result: toolMessage.content,\n      status: 'done'\n    }\n  }));\n  return adapter.updateMany(state, changes);\n}));\nconst selectToolCallIds = state => state.ids;\nconst selectToolCallEntities$1 = state => state.entities;\nconst selectToolCalls$1 = select(selectToolCallIds, selectToolCallEntities$1, (ids, entities) => ids.map(id => entities[id]));\nconst selectPendingToolCalls$1 = select(selectToolCalls$1, toolCalls => {\n  return toolCalls.filter(toolCall => toolCall.status === 'pending');\n});\n\nconst initialState = {\n  names: [],\n  entities: {}\n};\nconst reducer = createReducer(initialState, on(devActions.init, devActions.updateOptions, (state, action) => {\n  const tools = action.payload.tools;\n  if (!tools || tools.length === 0) {\n    return state;\n  }\n  return Object.assign(Object.assign({}, state), {\n    names: tools.map(tool => tool.name),\n    entities: tools.reduce((acc, tool) => {\n      acc[tool.name] = tool;\n      return acc;\n    }, {})\n  });\n}));\nconst selectToolNames = state => state.names;\nconst selectToolEntities$1 = state => state.entities;\nconst selectTools$1 = select(selectToolNames, selectToolEntities$1, (names, entities) => names.map(name => entities[name]));\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst reducers = {\n  config: reducer$5,\n  messages: reducer$4,\n  status: reducer$3,\n  streamingMessage: reducer$2,\n  toolCalls: reducer$1,\n  tools: reducer\n};\n/**\n * Messages\n */\nconst selectMessagesState = state => state.messages;\nconst selectMessages = select(selectMessagesState, selectMessages$1);\n/**\n * Status\n */\nconst selectStatusState = state => state.status;\nconst selectIsReceiving = select(selectStatusState, selectIsReceiving$1);\nconst selectIsSending = select(selectStatusState, selectIsSending$1);\nconst selectIsRunningToolCalls = select(selectStatusState, selectIsRunningToolCalls$1);\nconst selectError = select(selectStatusState, selectError$1);\nconst selectExhaustedRetries = select(selectStatusState, selectExhaustedRetries$1);\n/**\n * Streaming Message\n */\nconst selectStreamingMessageState = state => state.streamingMessage;\nconst selectStreamingMessage = select(selectStreamingMessageState, selectStreamingMessage$1);\nconst selectStreamingToolCallEntities = select(selectStreamingMessageState, selectStreamingToolCallEntities$1);\n/**\n * Tools\n */\nconst selectToolsState = state => state.tools;\nconst selectTools = select(selectToolsState, selectTools$1);\nconst selectToolEntities = select(selectToolsState, selectToolEntities$1);\n/**\n * Tool Calls\n */\nconst selectToolCallsState = state => state.toolCalls;\nconst selectToolCalls = select(selectToolCallsState, selectToolCalls$1);\nconst selectToolCallEntities = select(selectToolCallsState, selectToolCallEntities$1);\nconst selectPendingToolCalls = select(selectToolCallsState, selectPendingToolCalls$1);\n/**\n * Config\n */\nconst selectConfigState = state => state.config;\nconst selectApiUrl = select(selectConfigState, selectApiUrl$1);\nconst selectMiddleware = select(selectConfigState, selectMiddleware$1);\nconst selectModel = select(selectConfigState, selectModel$1);\nconst selectSystem = select(selectConfigState, selectSystem$1);\nconst selectDebounce = select(selectConfigState, selectDebounce$1);\nconst selectRetries = select(selectConfigState, selectRetries$1);\nconst selectResponseSchema = select(selectConfigState, selectResponseSchema$1);\nconst selectEmulateStructuredOutput = select(selectConfigState, selectEmulateStructuredOutput$1);\n/**\n * Top-level selectors\n */\nconst selectNonStreamingViewMessages = select(selectMessages, selectToolCallEntities, selectTools, selectResponseSchema, (messages, toolCalls, tools, responseSchema) => {\n  return messages.flatMap(message => toViewMessagesFromInternal(message, toolCalls, tools, responseSchema));\n});\nconst selectStreamingViewMessages = select(selectStreamingMessage, selectStreamingToolCallEntities, selectTools, selectResponseSchema, (streamingMessage, streamingToolCalls, tools, responseSchema) => {\n  return (streamingMessage ? [streamingMessage] : []).flatMap(message => toViewMessagesFromInternal(message, streamingToolCalls, tools, responseSchema));\n});\nconst selectViewMessages = select(selectNonStreamingViewMessages, selectStreamingViewMessages, (nonStreamingMessages, streamingMessages) => {\n  return [...nonStreamingMessages, ...streamingMessages];\n});\nconst selectLastAssistantMessage = select(selectViewMessages, messages => {\n  return messages.findLast(message => message.role === 'assistant');\n});\nconst selectApiMessages = select(selectMessages, selectToolCalls, (messages, toolCalls) => {\n  return messages.flatMap(message => toApiMessagesFromInternal(message, toolCalls));\n});\nconst selectShouldGenerateMessage = select(selectApiMessages, messages => {\n  const lastMessage = messages[messages.length - 1];\n  if (!lastMessage) {\n    return false;\n  }\n  return lastMessage.role === 'user' || lastMessage.role === 'tool';\n});\nconst selectApiTools = select(selectTools, selectResponseSchema, selectEmulateStructuredOutput, (tools, responseSchema, emulateStructuredOutput) => {\n  return toApiToolsFromInternal(tools, emulateStructuredOutput && !!responseSchema, responseSchema !== null && responseSchema !== void 0 ? responseSchema : nullish());\n});\nconst selectIsLoading = select(selectIsSending, selectIsReceiving, selectIsRunningToolCalls, (isSending, isReceiving, isRunningToolCalls) => isSending || isReceiving || isRunningToolCalls);\n\nconst generateMessage = createEffect(store => {\n  const effectAbortController = new AbortController();\n  // This controller is used to cancel the current message generation\n  // when a new message is sent or the user stops the generation.\n  let cancelAbortController = new AbortController();\n  store.when(internalActions.sizzle, devActions.setMessages, devActions.sendMessage, devActions.resendMessages, internalActions.runToolCallsSuccess, switchAsync(switchSignal => __awaiter(void 0, void 0, void 0, function* () {\n    var _a, e_1, _b, _c;\n    const apiUrl = store.read(selectApiUrl);\n    const middleware = store.read(selectMiddleware);\n    const model = store.read(selectModel);\n    const responseSchema = store.read(selectResponseSchema);\n    const messages = store.read(selectApiMessages);\n    const shouldGenerateMessage = store.read(selectShouldGenerateMessage);\n    const debounce = store.read(selectDebounce);\n    const retries = store.read(selectRetries);\n    const tools = store.read(selectApiTools);\n    const system = store.read(selectSystem);\n    const emulateStructuredOutput = store.read(selectEmulateStructuredOutput);\n    if (!shouldGenerateMessage) {\n      return;\n    }\n    const params = {\n      model,\n      system,\n      messages,\n      tools,\n      toolChoice: emulateStructuredOutput && responseSchema ? 'required' : undefined,\n      responseFormat: !emulateStructuredOutput && responseSchema ? toJsonSchema(responseSchema) : undefined\n    };\n    yield sleep(debounce, switchSignal);\n    let attempt = 0;\n    do {\n      attempt++;\n      if (effectAbortController.signal.aborted || switchSignal.aborted || cancelAbortController.signal.aborted) {\n        // we need to reset the cancelAbortController for the next messsage\n        if (cancelAbortController.signal.aborted) {\n          cancelAbortController = new AbortController();\n        }\n        return;\n      }\n      let requestInit = {\n        method: 'POST',\n        body: JSON.stringify(params),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: switchSignal\n      };\n      if (middleware && middleware.length) {\n        for (const m of middleware) {\n          requestInit = yield m(requestInit);\n        }\n      }\n      try {\n        const response = yield fetch(apiUrl, requestInit);\n        if (!response.ok) {\n          store.dispatch(apiActions.generateMessageError(new Error(`HTTP error! Status: ${response.status}`)));\n          continue;\n        }\n        if (!response.body) {\n          store.dispatch(apiActions.generateMessageError(new Error(`Response body is null`)));\n          continue;\n        }\n        // This catches an edge case where a cancellation was requested\n        // after we had already kicked off the initial request, but\n        // before we started decoding frames.\n        if (cancelAbortController.signal.aborted) {\n          // If the cancelAbortController is aborted, we need to reset it for the next message\n          cancelAbortController = new AbortController();\n          return;\n        }\n        store.dispatch(apiActions.generateMessageStart());\n        let message = null;\n        try {\n          for (var _d = true, _e = (e_1 = void 0, __asyncValues(decodeFrames(response.body, {\n              signal: AbortSignal.any([cancelAbortController.signal, effectAbortController.signal])\n            }))), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {\n            _c = _f.value;\n            _d = false;\n            const frame = _c;\n            switch (frame.type) {\n              case 'chunk':\n                {\n                  message = _updateMessagesWithDelta(message, frame.chunk);\n                  if (message) {\n                    store.dispatch(apiActions.generateMessageChunk(message));\n                  }\n                  break;\n                }\n              case 'error':\n                {\n                  // Assumption: a 'finish' will follow the 'error', but we know we need to retry\n                  // as soon as we see the error.  Therefore, throw an exception to break out\n                  // of the for loop.\n                  throw new Error(frame.error);\n                  break;\n                }\n              case 'finish':\n                {\n                  if (message) {\n                    store.dispatch(apiActions.generateMessageSuccess(message));\n                  } else {\n                    store.dispatch(apiActions.generateMessageError(new Error('No message was generated')));\n                  }\n                  break;\n                }\n            }\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n      } catch (e) {\n        if (e instanceof Error) {\n          store.dispatch(apiActions.generateMessageError(e));\n        }\n        continue;\n      } finally {\n        // Reset the cancelAbortController for the next message\n        if (cancelAbortController.signal.aborted) {\n          cancelAbortController = new AbortController();\n        }\n      }\n      break;\n    } while (retries > 0 && attempt < retries + 1);\n    // Did we exhaust our retries?\n    if (retries > 0 && attempt > retries) {\n      store.dispatch(apiActions.generateMessageExhaustedRetries());\n    }\n  }), effectAbortController.signal));\n  store.when(devActions.stopMessageGeneration, () => {\n    cancelAbortController.abort();\n  });\n  return () => {\n    effectAbortController.abort();\n    cancelAbortController.abort();\n  };\n});\n/**\n * Merges existing and new tool calls.\n *\n * @param existingCalls - The existing tool calls.\n * @param newCalls - The new tool calls to merge.\n * @returns The merged array of tool calls.\n */\nfunction mergeToolCalls(existingCalls = [], newCalls = []) {\n  const merged = [...existingCalls];\n  newCalls.forEach(newCall => {\n    var _a, _b;\n    const index = merged.findIndex(call => call.index === newCall.index);\n    if (index !== -1) {\n      const existing = merged[index];\n      merged[index] = Object.assign(Object.assign({}, existing), {\n        function: Object.assign(Object.assign({}, existing.function), {\n          arguments: existing.function.arguments + ((_b = (_a = newCall.function) === null || _a === void 0 ? void 0 : _a.arguments) !== null && _b !== void 0 ? _b : '')\n        })\n      });\n    } else {\n      merged.push(newCall);\n    }\n  });\n  return merged;\n}\n/**\n * Updates the messages array with an incoming assistant delta.\n *\n * @param messages - The current messages array.\n * @param delta - The incoming message delta.\n * @returns The updated messages array.\n */\nfunction _updateMessagesWithDelta(message, delta) {\n  var _a, _b, _c, _d, _e, _f, _g;\n  if (message && message.role === 'assistant' && delta.choices.length) {\n    const updatedToolCalls = mergeToolCalls(message.toolCalls, (_a = delta.choices[0].delta.toolCalls) !== null && _a !== void 0 ? _a : []);\n    const updatedMessage = Object.assign(Object.assign({}, message), {\n      content: ((_b = message.content) !== null && _b !== void 0 ? _b : '') + ((_c = delta.choices[0].delta.content) !== null && _c !== void 0 ? _c : ''),\n      toolCalls: updatedToolCalls\n    });\n    return updatedMessage;\n  } else if (delta.choices.length && ((_e = (_d = delta.choices[0]) === null || _d === void 0 ? void 0 : _d.delta) === null || _e === void 0 ? void 0 : _e.role) === 'assistant') {\n    return {\n      role: 'assistant',\n      content: (_f = delta.choices[0].delta.content) !== null && _f !== void 0 ? _f : '',\n      toolCalls: mergeToolCalls([], (_g = delta.choices[0].delta.toolCalls) !== null && _g !== void 0 ? _g : [])\n    };\n  }\n  return message;\n}\n\nconst runTools = createEffect(store => {\n  const abortController = new AbortController();\n  store.when(apiActions.generateMessageSuccess, () => __awaiter(void 0, void 0, void 0, function* () {\n    const toolCalls = store.read(selectPendingToolCalls);\n    const toolEntities = store.read(selectToolEntities);\n    if (toolCalls.length === 0) {\n      yield Promise.resolve();\n      store.dispatch(internalActions.skippedToolCalls());\n      return;\n    }\n    const toolCallResults = toolCalls.map(toolCall => {\n      const tool = toolEntities[toolCall.name];\n      if (!tool) {\n        return Promise.reject(new Error(`Tool ${toolCall.name} not found`));\n      }\n      try {\n        const args = isHashbrownType(tool.schema) ? tool.schema.parseJsonSchema(toolCall.arguments) : JSON.parse(toolCall.arguments);\n        return Promise.resolve(tool.handler(args, abortController.signal));\n      } catch (error) {\n        // We may have received unnecessarily escaped input, so try\n        // again with JSON.parse\n        if (error instanceof Error && error.message.includes('Expected an object at')) {\n          try {\n            const args = isHashbrownType(tool.schema) ? tool.schema.parseJsonSchema(JSON.parse(toolCall.arguments)) : JSON.parse(toolCall.arguments);\n            return Promise.resolve(tool.handler(args, abortController.signal));\n          } catch (error) {\n            return Promise.reject(error);\n          }\n        }\n        return Promise.reject(error);\n      }\n    });\n    const results = yield Promise.allSettled(toolCallResults);\n    const toolMessages = toolCalls.map((toolCall, index) => ({\n      role: 'tool',\n      content: results[index],\n      toolCallId: toolCall.id,\n      toolName: toolCall.name\n    }));\n    store.dispatch(internalActions.runToolCallsSuccess({\n      toolMessages\n    }));\n  }));\n  return () => {\n    abortController.abort();\n  };\n});\n\nvar effects = [generateMessage, runTools];\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Core entry point for the Hashbrown framework.\n * Provides state management and messaging utilities for integrating LLM-based chat interactions into frontend applications.\n */\n/**\n * @public\n */\nfunction fryHashbrown(init) {\n  var _a;\n  const hasIllegalOutputTool = (_a = init.tools) === null || _a === void 0 ? void 0 : _a.some(tool => tool.name === 'output');\n  if (hasIllegalOutputTool) {\n    throw new Error('The \"output\" tool name is a reserved tool name and cannot be used.');\n  }\n  const state = createStore({\n    debugName: init.debugName,\n    reducers,\n    effects,\n    projectStateForDevtools: state => ({\n      messages: selectViewMessages(state),\n      isReceiving: selectIsReceiving(state),\n      isSending: selectIsSending(state),\n      isRunningToolCalls: selectIsRunningToolCalls(state),\n      error: selectError(state),\n      ɵɵinternal: state\n    })\n  });\n  state.dispatch(devActions.init({\n    apiUrl: init.apiUrl,\n    model: init.model,\n    system: init.system,\n    messages: init.messages,\n    tools: init.tools,\n    responseSchema: init.responseSchema,\n    middleware: init.middleware,\n    emulateStructuredOutput: init.emulateStructuredOutput,\n    debounce: init.debounce,\n    retries: init.retries\n  }));\n  function setMessages(messages) {\n    state.dispatch(devActions.setMessages({\n      messages: messages\n    }));\n  }\n  function sendMessage(message) {\n    state.dispatch(devActions.sendMessage({\n      message: message\n    }));\n  }\n  function resendMessages() {\n    state.dispatch(devActions.resendMessages());\n  }\n  function updateOptions(options) {\n    state.dispatch(devActions.updateOptions(options));\n  }\n  function sizzle() {\n    const abortController = new AbortController();\n    let effectCleanupFn;\n    Promise.resolve().then(() => {\n      if (abortController.signal.aborted) {\n        return;\n      }\n      effectCleanupFn = state.runEffects();\n      state.dispatch(internalActions.sizzle());\n    });\n    return () => {\n      abortController.abort('Initialization aborted');\n      effectCleanupFn === null || effectCleanupFn === void 0 ? void 0 : effectCleanupFn();\n    };\n  }\n  function stop(clearStreamingMessage = false) {\n    const isLoading = state.read(selectIsLoading);\n    if (!isLoading) {\n      throw new Error('Cannot stop streaming messages when not streaming.');\n    }\n    state.dispatch(devActions.stopMessageGeneration(clearStreamingMessage));\n  }\n  return {\n    setMessages,\n    sendMessage,\n    resendMessages,\n    updateOptions,\n    stop,\n    sizzle,\n    messages: state.createSignal(selectViewMessages),\n    error: state.createSignal(selectError),\n    isReceiving: state.createSignal(selectIsReceiving),\n    isSending: state.createSignal(selectIsSending),\n    isRunningToolCalls: state.createSignal(selectIsRunningToolCalls),\n    isLoading: state.createSignal(selectIsLoading),\n    exhaustedRetries: state.createSignal(selectExhaustedRetries),\n    lastAssistantMessage: state.createSignal(selectLastAssistantMessage)\n  };\n}\n\nconst PLACEHOLDER_PREFIX = '__HBX_';\n/**\n * Weave template expressions into a single string by inserting stable placeholders\n * (e.g., __HBX_0__) at expression positions. Returns the concatenated text and\n * the ordered list of placeholder tokens.\n */\nfunction weavePlaceholders(strings, exprs) {\n  const tokens = strings.map((chunk, i) => i < exprs.length ? `${chunk}${PLACEHOLDER_PREFIX}${i}__` : chunk).join('');\n  const placeholders = exprs.map((_, i) => `${PLACEHOLDER_PREFIX}${i}__`);\n  return {\n    text: tokens,\n    placeholders\n  };\n}\n/**\n * Functional scan for <ui>...</ui> blocks. Produces an array of UiBlock descriptors\n * including absolute offsets and inner source text.\n */\nfunction findUiBlocks(text) {\n  const next = (from, acc) => {\n    const startTag = text.indexOf('<ui>', from);\n    if (startTag === -1) return acc;\n    const endTag = text.indexOf('</ui>', startTag);\n    if (endTag === -1) return acc;\n    const innerStart = startTag + '<ui>'.length;\n    const innerEnd = endTag;\n    const blockText = text.slice(innerStart, innerEnd);\n    const block = {\n      start: startTag,\n      end: endTag + '</ui>'.length,\n      innerStart,\n      innerEnd,\n      source: blockText,\n      ast: []\n    };\n    return next(endTag + 5, acc.concat(block));\n  };\n  return next(0, []);\n}\n/** Whitespace check helper. */\nconst isWhitespace = ch => /\\s/.test(ch);\n/**\n * Parse a single <ui> inner source into UiAst nodes. Pure function: returns\n * the nodes and any diagnostics gathered while parsing.\n */\nfunction parseUi(source, baseOffset) {\n  let i = 0;\n  const diags = [];\n  const diag = d => {\n    diags.push(Object.assign(Object.assign({}, d), {\n      line: 0,\n      column: 0\n    }));\n  };\n  const skipWs = () => {\n    var _a;\n    while (i < source.length && isWhitespace((_a = source[i]) !== null && _a !== void 0 ? _a : '')) i++;\n  };\n  const parseText = () => {\n    const start = i;\n    let text = '';\n    while (i < source.length && source[i] !== '<') {\n      text += source[i];\n      i++;\n    }\n    return text.length === 0 ? null : {\n      kind: 'text',\n      text,\n      start: baseOffset + start,\n      end: baseOffset + i\n    };\n  };\n  const parseAttrs = () => {\n    var _a;\n    let attrs = {};\n    while (i < source.length) {\n      skipWs();\n      const ch = source[i];\n      if (ch === '/' || ch === '>' || ch == null) break;\n      const nameStart = i;\n      let name = '';\n      while (i < source.length) {\n        const c = (_a = source[i]) !== null && _a !== void 0 ? _a : '';\n        if (/[-A-Za-z0-9_:$]/.test(c)) {\n          name += c;\n          i++;\n        } else {\n          break;\n        }\n      }\n      skipWs();\n      const readUnquoted = () => {\n        var _a;\n        const vs = i;\n        while (i < source.length && /[^\\s/>]/.test((_a = source[i]) !== null && _a !== void 0 ? _a : '')) i++;\n        return {\n          value: source.slice(vs, i),\n          start: baseOffset + vs,\n          end: baseOffset + i\n        };\n      };\n      const readQuoted = q => {\n        i++;\n        const vs = i;\n        while (i < source.length && source[i] !== q) i++;\n        const segment = source.slice(vs, i);\n        const span = {\n          value: segment,\n          start: baseOffset + vs,\n          end: baseOffset + i\n        };\n        if (source[i] === q) i++;\n        return span;\n      };\n      const attrSpan = source[i] === '=' ? (() => {\n        i++;\n        skipWs();\n        const q = source[i];\n        return q === '\"' || q === \"'\" ? readQuoted(q) : readUnquoted();\n      })() : {\n        value: 'true',\n        start: baseOffset + nameStart,\n        end: baseOffset + i\n      };\n      if (Object.prototype.hasOwnProperty.call(attrs, name)) {\n        diag({\n          code: 'E1401',\n          severity: 'error',\n          message: `Duplicate attribute \"${name}\"`,\n          start: baseOffset + nameStart,\n          end: baseOffset + i,\n          snippet: source.slice(nameStart, i)\n        });\n      }\n      attrs = Object.assign(Object.assign({}, attrs), {\n        [name]: attrSpan\n      });\n      skipWs();\n    }\n    return attrs;\n  };\n  const parseElement = () => {\n    var _a;\n    if (source[i] !== '<') return null;\n    const start = i;\n    i++;\n    if (source[i] === '/') return null;\n    let tag = '';\n    while (i < source.length && /[-A-Za-z0-9]/.test((_a = source[i]) !== null && _a !== void 0 ? _a : '')) {\n      tag += source[i];\n      i++;\n    }\n    skipWs();\n    const attrs = parseAttrs();\n    const selfClosing = source[i] === '/' ? (i++, true) : false;\n    if (source[i] === '>') i++;\n    const parseChildren = acc => {\n      var _a;\n      if (i >= source.length) return acc;\n      if (source[i] === '<' && source[i + 1] === '/') {\n        i += 2;\n        while (i < source.length && /[-A-Za-z0-9]/.test((_a = source[i]) !== null && _a !== void 0 ? _a : '')) i++;\n        while (i < source.length && source[i] !== '>') i++;\n        if (source[i] === '>') i++;\n        return acc;\n      }\n      const child = source[i] === '<' ? parseElement() : parseText();\n      return child == null ? acc : parseChildren(acc.concat(child));\n    };\n    const children = selfClosing ? [] : parseChildren([]);\n    const end = baseOffset + i;\n    return {\n      kind: 'element',\n      tag,\n      start: baseOffset + start,\n      end,\n      attrs,\n      children,\n      selfClosing\n    };\n  };\n  const parseNodes = acc => {\n    skipWs();\n    if (i >= source.length) return acc;\n    const node = source[i] === '<' ? parseElement() : parseText();\n    return node == null ? acc : parseNodes(acc.concat(node));\n  };\n  const nodes = parseNodes([]);\n  return {\n    nodes,\n    diagnostics: diags\n  };\n}\n/** Map absolute offset to 1-based {line, column}. */\nfunction absoluteToLineCol(text, abs) {\n  var _a;\n  const slice = text.slice(0, Math.min(abs, text.length));\n  const lines = slice.split('\\n');\n  const line = lines.length;\n  const column = ((_a = lines[lines.length - 1]) !== null && _a !== void 0 ? _a : '').length + 1;\n  return {\n    line,\n    column\n  };\n}\n/** Plain-object check that excludes arrays and class instances. */\nfunction isPlainObject(v) {\n  if (Object.prototype.toString.call(v) !== '[object Object]') return false;\n  const proto = Object.getPrototypeOf(v);\n  return proto === Object.prototype || proto === null;\n}\n/** Ensure values are JSON-serializable according to policy. */\nfunction ensureSerializable(value) {\n  if (value == null || typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n    return true;\n  }\n  if (typeof value === 'bigint') return 'BigInt';\n  if (typeof value === 'function') return 'function';\n  if (typeof value === 'symbol') return 'symbol';\n  if (value instanceof Date) return 'Date';\n  if (value instanceof Map) return 'Map';\n  if (value instanceof Set) return 'Set';\n  if (Array.isArray(value)) {\n    const firstBad = value.map(ensureSerializable).find(r => r !== true);\n    return firstBad !== null && firstBad !== void 0 ? firstBad : true;\n  }\n  if (isPlainObject(value)) {\n    try {\n      JSON.stringify(value);\n      return true;\n    } catch (_a) {\n      return 'circular';\n    }\n  }\n  return 'class-instance';\n}\n/** Lower a UiAst element into an HBNode, collecting diagnostics functionally. */\nfunction lowerToHB(node, exprsByToken) {\n  if (node.kind === 'text') return {\n    hb: null,\n    diagnostics: []\n  };\n  const foldAttrs = entries => {\n    return entries.reduce((acc, [k, span]) => {\n      const raw = span.value;\n      if (raw.startsWith(PLACEHOLDER_PREFIX)) {\n        const val = exprsByToken.get(raw);\n        const ser = ensureSerializable(val);\n        return ser !== true ? {\n          props: acc.props,\n          diagnostics: acc.diagnostics.concat({\n            code: 'E1301',\n            severity: 'error',\n            message: `${raw} is not JSON-serializable (${ser}).`,\n            start: span.start,\n            end: span.end,\n            line: 0,\n            column: 0,\n            snippet: raw\n          })\n        } : {\n          props: Object.assign(Object.assign({}, acc.props), {\n            [k]: val\n          }),\n          diagnostics: acc.diagnostics\n        };\n      }\n      const value = raw === 'true' ? true : raw === 'false' ? false : raw === 'null' ? null : /^-?\\d+(?:\\.\\d+)?$/.test(raw) ? Number(raw) : raw;\n      return {\n        props: Object.assign(Object.assign({}, acc.props), {\n          [k]: value\n        }),\n        diagnostics: acc.diagnostics\n      };\n    }, {\n      props: {},\n      diagnostics: []\n    });\n  };\n  const {\n    props,\n    diagnostics: attrDiags\n  } = foldAttrs(Object.entries(node.attrs));\n  const childrenLowered = node.children.map(c => lowerToHB(c, exprsByToken));\n  const childDiags = childrenLowered.flatMap(r => r.diagnostics);\n  const children = childrenLowered.map(r => r.hb).filter(h => h != null);\n  const hb = children.length ? {\n    $tag: node.tag,\n    $children: children,\n    $props: props\n  } : {\n    $tag: node.tag,\n    $children: [],\n    $props: props\n  };\n  return {\n    hb,\n    diagnostics: attrDiags.concat(childDiags)\n  };\n}\n/**\n * Lower a UiAst element into a flexible HB node that can represent text children\n * (when component policy is 'text'). This variant requires access to the component\n * registry (by name or selector) to know each component's children policy.\n */\nfunction lowerWithPolicy(node, exprsByToken, byName) {\n  if (node.kind === 'text') return null;\n  const foldAttrs = entries => {\n    return entries.reduce((acc, [k, span]) => {\n      const raw = span.value;\n      if (raw.startsWith(PLACEHOLDER_PREFIX)) {\n        const val = exprsByToken.get(raw);\n        return Object.assign(Object.assign({}, acc), {\n          [k]: val\n        });\n      }\n      const value = raw === 'true' ? true : raw === 'false' ? false : raw === 'null' ? null : /^-?\\d+(?:\\.\\d+)?$/.test(raw) ? Number(raw) : raw;\n      return Object.assign(Object.assign({}, acc), {\n        [k]: value\n      });\n    }, {});\n  };\n  const props = foldAttrs(Object.entries(node.attrs));\n  const comp = byName.get(node.tag);\n  const policy = comp ? comp.children : undefined;\n  if (policy === 'text') {\n    // Concatenate only text children (preserve placeholders) as content\n    const content = node.children.map(c => c.kind === 'text' ? c.text : '').join('');\n    const elementChildren = node.children.map(c => c.kind === 'element' ? lowerWithPolicy(c, exprsByToken, byName) : null).filter(h => h != null);\n    // Include a meta property for validation; stripped out for injection later\n    return {\n      $tag: node.tag,\n      $children: content,\n      $elementChildren: elementChildren,\n      $props: props\n    };\n  }\n  // Default behavior: lower element children only (ignore text nodes)\n  const loweredChildren = node.children.map(c => c.kind === 'element' ? lowerWithPolicy(c, exprsByToken, byName) : null).filter(h => h != null);\n  return {\n    $tag: node.tag,\n    $children: loweredChildren,\n    $props: props\n  };\n}\n/** Compute Levenshtein distance for nearest-name suggestions. */\nfunction levenshtein(a, b) {\n  const dp = Array.from({\n    length: a.length + 1\n  }, (_, i) => Array.from({\n    length: b.length + 1\n  }, (_, j) => i === 0 ? j : j === 0 ? i : 0));\n  for (let i = 1; i <= a.length; i++) {\n    for (let j = 1; j <= b.length; j++) {\n      const cost = a[i - 1] === b[j - 1] ? 0 : 1;\n      dp[i][j] = Math.min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + cost);\n    }\n  }\n  return dp[a.length][b.length];\n}\n/** Validate examples against component registry; returns diagnostics (functional). */\nfunction validateExamples(examples, blocks, components, toLineCol) {\n  const byName = new Map();\n  const allNames = [];\n  components.forEach(c => {\n    if (c && typeof c.name === 'string') {\n      byName.set(c.name, c);\n      allNames.push(c.name);\n    }\n    // Support Angular-style selector aliases\n    if (c && typeof c.selector === 'string') {\n      const sel = c.selector;\n      byName.set(sel, c);\n      allNames.push(sel);\n    }\n  });\n  const visit = (node, blk) => {\n    const comp = byName.get(node.$tag);\n    if (!comp) {\n      const suggestions = allNames.map(n => ({\n        n,\n        d: levenshtein(n.toLowerCase(), node.$tag.toLowerCase())\n      })).sort((a, b) => a.d - b.d).slice(0, 1).map(x => x.n);\n      return [Object.assign(Object.assign({\n        code: 'E1001',\n        severity: 'error',\n        message: `<${node.$tag}> not found.` + (suggestions.length ? ` Did you mean <${suggestions[0]}>?` : ''),\n        start: blk.innerStart,\n        end: blk.innerEnd\n      }, toLineCol(blk.innerStart)), {\n        snippet: blk.source\n      })];\n    }\n    const diags = [];\n    if (comp.props && typeof comp.props === 'object') {\n      const definedProps = new Set(Object.keys(comp.props));\n      const nodeProps = node.$props || {};\n      definedProps.forEach(key => {\n        if (!(key in nodeProps)) {\n          diags.push(Object.assign(Object.assign({\n            code: 'E1102',\n            severity: 'error',\n            message: `<${node.$tag}> missing required prop \"${key}\".`,\n            start: blk.innerStart,\n            end: blk.innerEnd\n          }, toLineCol(blk.innerStart)), {\n            snippet: blk.source\n          }));\n        }\n      });\n      Object.entries(nodeProps).forEach(([k, v]) => {\n        var _a;\n        if (!definedProps.has(k)) {\n          diags.push(Object.assign(Object.assign({\n            code: 'W2001',\n            severity: 'warning',\n            message: `Prop \"${k}\" is not defined on <${node.$tag}>.`,\n            start: blk.innerStart,\n            end: blk.innerEnd\n          }, toLineCol(blk.innerStart)), {\n            snippet: blk.source\n          }));\n        } else {\n          try {\n            const schema = (_a = comp.props) === null || _a === void 0 ? void 0 : _a[k];\n            if (schema && typeof schema.validate === 'function') {\n              schema.validate(v);\n            }\n          } catch (e) {\n            diags.push(Object.assign(Object.assign({\n              code: 'E1203',\n              severity: 'error',\n              message: `Prop \"${k}\" on <${node.$tag}> failed schema validation: \\n\\n${e.message}`,\n              start: blk.innerStart,\n              end: blk.innerEnd\n            }, toLineCol(blk.innerStart)), {\n              snippet: blk.source\n            }));\n          }\n        }\n      });\n    }\n    const policy = comp.children;\n    const arrayChildren = Array.isArray(node.$children) ? node.$children : [];\n    if (policy === 'text') {\n      // Text-only components: any element child is not allowed\n      const hasElementChildren = Array.isArray(node.$elementChildren) ? node.$elementChildren.length > 0 : arrayChildren.length > 0;\n      if (hasElementChildren) {\n        diags.push(Object.assign(Object.assign({\n          code: 'W2101',\n          severity: 'warning',\n          message: `<${node.$tag}> expects text children, element found.`,\n          start: blk.innerStart,\n          end: blk.innerEnd\n        }, toLineCol(blk.innerStart)), {\n          snippet: blk.source\n        }));\n      }\n      // no recursion for text children\n      return diags;\n    }\n    if (policy === false && arrayChildren.length) {\n      diags.push(Object.assign(Object.assign({\n        code: 'W2101',\n        severity: 'warning',\n        message: `<${node.$tag}> does not accept children.`,\n        start: blk.innerStart,\n        end: blk.innerEnd\n      }, toLineCol(blk.innerStart)), {\n        snippet: blk.source\n      }));\n    } else if (Array.isArray(policy) && arrayChildren.length) {\n      const allowed = new Set(policy.map(p => p.name));\n      arrayChildren.forEach(ch => {\n        if (!allowed.has(ch.$tag)) {\n          diags.push(Object.assign(Object.assign({\n            code: 'W2101',\n            severity: 'warning',\n            message: `<${node.$tag}> children restricted; \"${ch.$tag}\" not allowed.`,\n            start: blk.innerStart,\n            end: blk.innerEnd\n          }, toLineCol(blk.innerStart)), {\n            snippet: blk.source\n          }));\n        }\n      });\n    }\n    const childDiags = arrayChildren.flatMap(c => visit(c, blk));\n    return diags.concat(childDiags);\n  };\n  return examples.flatMap((tree, idx) => tree.flatMap(n => blocks[idx] ? visit(n, blocks[idx]) : []));\n}\n/** Replace <ui> blocks with inline JSON fences or placeholders. */\nfunction injectExamples(text, blocks, examples, mode) {\n  if (mode === 'none') return text;\n  const parts = blocks.reduce((acc, blk, i) => {\n    const pre = text.slice(acc.cursor, blk.start);\n    const mid = mode === 'inline' ? `\\n\\n${JSON.stringify(examples[i], null, 2)}\\n\\n` : `[See compiled UI example ${String.fromCharCode('A'.charCodeAt(0) + i)}]`;\n    return {\n      cursor: blk.end,\n      out: acc.out + pre + mid\n    };\n  }, {\n    cursor: 0,\n    out: ''\n  });\n  return parts.out + text.slice(parts.cursor);\n}\n/**\n * @public\n */\nfunction prompt(strings, ...exprs) {\n  const {\n    text,\n    placeholders\n  } = weavePlaceholders(strings, exprs);\n  const exprsByToken = new Map(placeholders.map((p, i) => [p, exprs[i]]));\n  const blocks = findUiBlocks(text);\n  const parsed = blocks.map(b => parseUi(b.source, b.innerStart));\n  const astBlocks = parsed.map(p => p.nodes);\n  const parseDiagnostics = parsed.flatMap(p => p.diagnostics).map(d => Object.assign(Object.assign({}, d), absoluteToLineCol(text, d.start)));\n  const lowered = astBlocks.map(ast => ast.map(n => lowerToHB(n, exprsByToken)));\n  const loweredTrees = lowered.map(nodes => nodes.map(r => r.hb).filter(x => x != null));\n  const lowerDiagnostics = lowered.flatMap(nodes => nodes.flatMap(r => r.diagnostics)).map(d => Object.assign(Object.assign({}, d), absoluteToLineCol(text, d.start)));\n  let diagnostics = parseDiagnostics.concat(lowerDiagnostics);\n  function compile(components, schema) {\n    // Build component lookup by name and selector for policy-aware lowering\n    const byName = new Map();\n    components.forEach(c => {\n      if (c && typeof c.name === 'string') byName.set(c.name, c);\n      if (c && typeof c.selector === 'string') byName.set(c.selector, c);\n    });\n    // Lower AST using the component children policy (supports 'text')\n    const policyExamples = astBlocks.map(ast => ast.map(n => lowerWithPolicy(n, exprsByToken, byName)).filter(n => n != null));\n    // Prepare a cleaned version for injection without meta helper properties\n    const cleanForInjection = nodes => nodes.map(n => {\n      const _a = n,\n        {\n          $tag,\n          $children\n        } = _a,\n        rest = __rest(_a, [\"$tag\", \"$children\"]);\n      const cleaned = {\n        $tag\n      };\n      if (Array.isArray($children)) {\n        cleaned.$children = cleanForInjection($children);\n      } else {\n        cleaned.$children = $children;\n      }\n      // Copy non-internal props (ignore $elementChildren)\n      Object.entries(rest).forEach(([k, v]) => {\n        if (k !== '$elementChildren') cleaned[k] = v;\n      });\n      return cleaned;\n    });\n    const validation = validateExamples(policyExamples, blocks, components, o => absoluteToLineCol(text, o));\n    diagnostics = parseDiagnostics.concat(lowerDiagnostics).concat(validation);\n    const cleaned = policyExamples.map(tree => cleanForInjection(tree));\n    // If an explicit UI schema is provided, downlevel examples for streaming\n    // just before emitting them inside JSON fences.\n    const toInject = cleaned.map(tree => {\n      try {\n        return schema.toStreaming({\n          ui: tree\n        });\n      } catch (_a) {\n        return '';\n      }\n    });\n    // If no components are provided, do not inline JSON fences; preserve author text.\n    const mode = components.length > 0 ? 'inline' : 'none';\n    return injectExamples(text, blocks, toInject, mode);\n  }\n  return {\n    compile,\n    examples: loweredTrees,\n    get diagnostics() {\n      return diagnostics;\n    },\n    meta: {\n      uiBlocks: blocks.map(b => ({\n        start: b.start,\n        end: b.end,\n        source: b.source\n      }))\n    }\n  };\n}\n\n/**\n * Creates a function with an input schema.\n *\n * @public\n * @param cfg - The configuration for the function containing:\n *   - `name`: The name of the function\n *   - `description`: The description of the function\n *   - `args`: The args schema of the function\n *   - `result`: The result schema of the function\n *   - `handler`: The handler of the function\n * @returns The function reference.\n */\nfunction createRuntimeFunctionImpl(cfg) {\n  if (!('args' in cfg) && !('result' in cfg)) {\n    return {\n      name: cfg.name,\n      description: cfg.description,\n      handler: function (_, abortSignal) {\n        return cfg.handler(abortSignal);\n      }\n    };\n  }\n  if (!('args' in cfg)) {\n    return {\n      name: cfg.name,\n      description: cfg.description,\n      result: cfg.result,\n      handler: function (_, abortSignal) {\n        return cfg.handler(abortSignal);\n      }\n    };\n  }\n  if (!('result' in cfg)) {\n    return {\n      name: cfg.name,\n      description: cfg.description,\n      args: cfg.args,\n      handler: cfg.handler\n    };\n  }\n  return {\n    name: cfg.name,\n    description: cfg.description,\n    args: cfg.args,\n    result: cfg.result,\n    handler: cfg.handler\n  };\n}\nfunction attachFunctionToContext(context, transport, definition, attachTo, abortSignal) {\n  const {\n    name,\n    args: argsSchema,\n    result: resultSchema,\n    handler\n  } = definition;\n  const fnHandle = context.newAsyncifiedFunction(name, (...args) => {\n    if (argsSchema === undefined && resultSchema === undefined) {\n      return handler(null, abortSignal).then(() => context.undefined);\n    }\n    if (argsSchema === undefined) {\n      return handler(null, abortSignal).then(result => transport.sendObject(result));\n    }\n    if (resultSchema === undefined) {\n      const resolvedArgs = transport.receiveObject(args[0]);\n      return handler(resolvedArgs, abortSignal).then(() => context.undefined);\n    }\n    const resolvedArgs = transport.receiveObject(args[0]);\n    return handler(resolvedArgs, abortSignal).then(result => transport.sendObject(result));\n  });\n  context.setProp(attachTo, name, fnHandle);\n  return fnHandle;\n}\n\nclass RuntimeTransport {\n  constructor(context) {\n    this.context = context;\n    const jsonResult = context.getProp(context.global, 'JSON');\n    const stringifyResult = context.getProp(jsonResult, 'stringify');\n    const parseResult = context.getProp(jsonResult, 'parse');\n    this.jsonHandle = jsonResult;\n    this.stringifyHandle = stringifyResult;\n    this.parseHandle = parseResult;\n  }\n  sendObject(object) {\n    const asString = JSON.stringify(object);\n    const stringHandle = this.context.newString(asString);\n    const result = this.context.callFunction(this.parseHandle, this.jsonHandle, stringHandle);\n    stringHandle.dispose();\n    return result;\n  }\n  sendError(name, message) {\n    return this.context.newError({\n      name,\n      message\n    });\n  }\n  receiveObject(handle) {\n    const result = this.context.callFunction(this.stringifyHandle, this.jsonHandle, handle);\n    const stringHandle = result.unwrap();\n    const asString = this.context.getString(stringHandle);\n    stringHandle.dispose();\n    return JSON.parse(asString);\n  }\n}\n\nfunction installDateTimeFormat(ctx) {\n  const formatHandle = ctx.newFunction('format', (dateHandle, localeHandle, optionsHandle) => {\n    const date = ctx.dump(dateHandle);\n    const locale = ctx.dump(localeHandle);\n    const options = ctx.dump(optionsHandle);\n    const result = new Intl.DateTimeFormat(locale, options).format(new Date(date));\n    return ctx.newString(result);\n  });\n  ctx.setProp(ctx.global, '__hb__Intl.DateTimeFormat.format', formatHandle);\n  ctx.evalCode(`\n    class DateTimeFormat {\n      constructor(locale, options) {\n        this.locale = locale;\n        this.options = options;\n      }\n\n      format(date) {\n        return globalThis[\"__hb__Intl.DateTimeFormat.format\"].call(\n          this,\n          date,\n          this.locale,\n          this.options\n        );\n      }\n    }\n\n    globalThis.Intl.DateTimeFormat = DateTimeFormat;\n  `);\n}\n\nfunction installIntl(ctx) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const IntlHandle = ctx.newObject();\n    ctx.setProp(ctx.global, 'Intl', IntlHandle);\n    installDateTimeFormat(ctx);\n  });\n}\n\n/**\n * Creates a new runtime.\n *\n * @public\n * @param options - The options for creating the runtime containing:\n *   - `timeout`: The timeout for the runtime\n *   - `functions`: The functions that are available in the runtime\n * @returns A reference to the runtime.\n */\nfunction createRuntimeImpl(options) {\n  const {\n    timeout = 1000,\n    functions\n  } = options;\n  const description = functions.map(fn => {\n    const argsWithType = fn.args ? `args: ${fn.args.toTypeScript()}` : '';\n    const returnType = fn.result ? fn.result.toTypeScript() : 'void';\n    return [`### ${fn.name}`, fn.description, '', `**Type Signature:**`, `\\`\\`\\`typescript`, `${fn.name}(${argsWithType}): ${returnType}`, `\\`\\`\\``].join('\\n');\n  }).join('\\n\\n');\n  return {\n    functions,\n    timeout,\n    describe() {\n      return description;\n    },\n    run(code, abortSignal) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const signal = abortSignal ? AbortSignal.any([abortSignal, AbortSignal.timeout(timeout)]) : AbortSignal.timeout(timeout);\n        const [{\n          newQuickJSAsyncWASMModuleFromVariant\n        }, variant] = yield Promise.all([__webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_hashbrownai_core_0_3_0_node_modules_hashbrownai_core_ind-673761\").then(__webpack_require__.bind(__webpack_require__, /*! ./index.esm4.js */ \"(app-pages-browser)/./node_modules/.pnpm/@hashbrownai+core@0.3.0/node_modules/@hashbrownai/core/index.esm4.js\")), __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_hashbrownai_core_0_3_0_node_modules_hashbrownai_core_ind-3a8ec2\").then(__webpack_require__.bind(__webpack_require__, /*! ./index.esm2.js */ \"(app-pages-browser)/./node_modules/.pnpm/@hashbrownai+core@0.3.0/node_modules/@hashbrownai/core/index.esm2.js\")).then(m => m.default)]);\n        const QuickJS = yield newQuickJSAsyncWASMModuleFromVariant(variant);\n        const runtime = QuickJS.newRuntime({\n          interruptHandler: () => {\n            return signal.aborted;\n          }\n        });\n        const vm = runtime.newContext();\n        const transport = new RuntimeTransport(vm);\n        installIntl(vm);\n        options.functions.forEach(fn => {\n          attachFunctionToContext(vm, transport, fn, vm.global, signal);\n        });\n        const result = yield vm.evalCodeAsync(code);\n        if (result.error) {\n          const response = {\n            error: vm.dump(result.error)\n          };\n          result.error.dispose();\n          vm.dispose();\n          return response;\n        } else {\n          const response = {\n            result: vm.dump(result.value)\n          };\n          result.value.dispose();\n          vm.dispose();\n          return response;\n        }\n      });\n    }\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Flattens a component hierarchy into a map of component names to their definitions.\n * This includes nested components defined in the children property.\n *\n * @public\n */\nfunction flattenComponents(components) {\n  const componentMap = new Map();\n  function processComponent(component) {\n    componentMap.set(component.name, component);\n    if (component.children && Array.isArray(component.children)) {\n      component.children.forEach(processComponent);\n    }\n  }\n  components.forEach(processComponent);\n  return componentMap;\n}\n/**\n * Creates a schema for a list of exposed components, allowing for the definition\n * of component structures and their relationships.\n *\n * @public\n * @param components - An array of components to create schemas for.\n * @returns A schema representing the structure of the components.\n */\nfunction createComponentSchema(components) {\n  const weakMap = new WeakMap();\n  const elements = anyOf(components.map(component => createSchema(component)));\n  function createSchema(component) {\n    var _a, _b, _c, _d;\n    if (weakMap.has(component.component)) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      return weakMap.get(component.component);\n    }\n    const children = component.children;\n    if (children === 'any') {\n      const schema = object$1(component.description, {\n        $tag: literal(component.name),\n        $props: object$1('Component Props', (_a = component.props) !== null && _a !== void 0 ? _a : {}),\n        get $children() {\n          return array('Child Elements', elements);\n        }\n      });\n      weakMap.set(component.component, schema);\n      return schema;\n    } else if (children === 'text') {\n      const schema = object$1(component.description, {\n        $tag: literal(component.name),\n        $props: object$1('Component Props', (_b = component.props) !== null && _b !== void 0 ? _b : {}),\n        $children: string('Content')\n      });\n      weakMap.set(component.component, schema);\n      return schema;\n    } else if (children && Array.isArray(children)) {\n      const schema = object$1(component.description, {\n        $tag: literal(component.name),\n        $props: object$1('Component Props', (_c = component.props) !== null && _c !== void 0 ? _c : {}),\n        get $children() {\n          return array('Child Elements', anyOf(children.map(child => createSchema(child))));\n        }\n      });\n      weakMap.set(component.component, schema);\n      return schema;\n    } else {\n      const schema = object$1(component.description, {\n        $tag: literal(component.name),\n        $props: object$1('Component Props', (_d = component.props) !== null && _d !== void 0 ? _d : {})\n      });\n      weakMap.set(component.component, schema);\n      return schema;\n    }\n  }\n  return elements;\n}\n\nvar index = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    createComponentSchema: createComponentSchema,\n    flattenComponents: flattenComponents\n});\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Deep structural comparison that \"just works\" on primitives too.\n * @public\n */\nfunction deepEqual(a, b, seen = new WeakMap()) {\n  // 1. Fast‑path for strict equality – catches most primitives & identical references.\n  if (a === b) {\n    // Distinguish +0 and –0 (JS treats them as equal but spec says they’re not “SameValue”)\n    return a !== 0 || 1 / a === 1 / b;\n  }\n  // 2. Handle the one primitive pair that fails `===`: NaN\n  if (Number.isNaN(a) && Number.isNaN(b)) return true;\n  // 3. If types differ (and neither is null/undefined), we’re already unequal.\n  const ta = typeof a,\n    tb = typeof b;\n  if (ta !== tb) return false;\n  if (ta !== 'object' && ta !== 'function') return false; // all remaining primitives handled above\n  // 4. Null is `object` in JS but can’t be equal to anything reached here.\n  if (a === null || b === null) return false;\n  // 5. Protect against cycles (A↔B, etc.)\n  if (seen.get(a) === b) return true;\n  seen.set(a, b);\n  /** Helper used below */\n  const eq = (x, y) => deepEqual(x, y, seen);\n  // ========== Built‑ins with bespoke semantics ==========\n  if (a instanceof Date || b instanceof Date) return a instanceof Date && b instanceof Date && a.getTime() === b.getTime();\n  if (a instanceof RegExp || b instanceof RegExp) return a instanceof RegExp && b instanceof RegExp && a.source === b.source && a.flags === b.flags;\n  if (ArrayBuffer.isView(a) || ArrayBuffer.isView(b)) {\n    if (!(ArrayBuffer.isView(a) && ArrayBuffer.isView(b))) return false;\n    if (a.byteLength !== b.byteLength) return false;\n    // DataView covers every TypedArray behind the scenes\n    const dvA = new DataView(a.buffer, a.byteOffset);\n    const dvB = new DataView(b.buffer, b.byteOffset);\n    for (let i = 0; i < dvA.byteLength; i++) {\n      if (dvA.getUint8(i) !== dvB.getUint8(i)) return false;\n    }\n    return true;\n  }\n  if (Array.isArray(a)) {\n    if (!Array.isArray(b) || a.length !== b.length) return false;\n    for (let i = 0; i < a.length; i++) if (!eq(a[i], b[i])) return false;\n    return true;\n  }\n  if (a instanceof Set || b instanceof Set) {\n    if (!(a instanceof Set && b instanceof Set) || a.size !== b.size) return false;\n    outer: for (const va of a) {\n      for (const vb of b) if (eq(va, vb)) continue outer;\n      return false; // no match found\n    }\n    return true;\n  }\n  if (a instanceof Map || b instanceof Map) {\n    if (!(a instanceof Map && b instanceof Map) || a.size !== b.size) return false;\n    outer: for (const [ka, va] of a) {\n      for (const [kb, vb] of b) {\n        if (eq(ka, kb) && eq(va, vb)) continue outer;\n      }\n      return false;\n    }\n    return true;\n  }\n  // ========== Plain objects + class instances (prototype doesn’t matter) ==========\n  const keysA = Reflect.ownKeys(a);\n  const keysB = Reflect.ownKeys(b);\n  if (keysA.length !== keysB.length) return false;\n  for (const k of keysA) {\n    if (!keysB.includes(k) || !eq(a[k], b[k])) return false;\n  }\n  return true;\n}\n\nvar types = /*#__PURE__*/Object.freeze({\n    __proto__: null\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@hashbrownai+core@0.3.0/node_modules/@hashbrownai/core/index.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/polyfills/process.js":
/*!***************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/polyfills/process.js ***!
  \***************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar _global_process, _global_process1;\nmodule.exports = ((_global_process = __webpack_require__.g.process) == null ? void 0 : _global_process.env) && typeof ((_global_process1 = __webpack_require__.g.process) == null ? void 0 : _global_process1.env) === \"object\" ? __webpack_require__.g.process : __webpack_require__(/*! next/dist/compiled/process */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/process/browser.js\");\n\n//# sourceMappingURL=process.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE0LjIuMzJfcmVhY3QtZG9tQDE4LjMuMV9yZWFjdEAxOC4zLjFfX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3BvbHlmaWxscy9wcm9jZXNzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSxxQ0FBcUMscUJBQU0saUZBQWlGLHFCQUFNLGtFQUFrRSxxQkFBTSxXQUFXLG1CQUFPLENBQUMsd0xBQTRCOztBQUV6UCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxNC4yLjMyX3JlYWN0LWRvbUAxOC4zLjFfcmVhY3RAMTguMy4xX19yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC9wb2x5ZmlsbHMvcHJvY2Vzcy5qcz85NGRmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9nbG9iYWxfcHJvY2VzcywgX2dsb2JhbF9wcm9jZXNzMTtcbm1vZHVsZS5leHBvcnRzID0gKChfZ2xvYmFsX3Byb2Nlc3MgPSBnbG9iYWwucHJvY2VzcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9nbG9iYWxfcHJvY2Vzcy5lbnYpICYmIHR5cGVvZiAoKF9nbG9iYWxfcHJvY2VzczEgPSBnbG9iYWwucHJvY2VzcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9nbG9iYWxfcHJvY2VzczEuZW52KSA9PT0gXCJvYmplY3RcIiA/IGdsb2JhbC5wcm9jZXNzIDogcmVxdWlyZShcIm5leHQvZGlzdC9jb21waWxlZC9wcm9jZXNzXCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9jZXNzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/polyfills/process.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/process/browser.js":
/*!****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/process/browser.js ***!
  \****************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(function(){var e={229:function(e){var t=e.exports={};var r;var n;function defaultSetTimout(){throw new Error(\"setTimeout has not been defined\")}function defaultClearTimeout(){throw new Error(\"clearTimeout has not been defined\")}(function(){try{if(typeof setTimeout===\"function\"){r=setTimeout}else{r=defaultSetTimout}}catch(e){r=defaultSetTimout}try{if(typeof clearTimeout===\"function\"){n=clearTimeout}else{n=defaultClearTimeout}}catch(e){n=defaultClearTimeout}})();function runTimeout(e){if(r===setTimeout){return setTimeout(e,0)}if((r===defaultSetTimout||!r)&&setTimeout){r=setTimeout;return setTimeout(e,0)}try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}function runClearTimeout(e){if(n===clearTimeout){return clearTimeout(e)}if((n===defaultClearTimeout||!n)&&clearTimeout){n=clearTimeout;return clearTimeout(e)}try{return n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}var i=[];var o=false;var u;var a=-1;function cleanUpNextTick(){if(!o||!u){return}o=false;if(u.length){i=u.concat(i)}else{a=-1}if(i.length){drainQueue()}}function drainQueue(){if(o){return}var e=runTimeout(cleanUpNextTick);o=true;var t=i.length;while(t){u=i;i=[];while(++a<t){if(u){u[a].run()}}a=-1;t=i.length}u=null;o=false;runClearTimeout(e)}t.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1){for(var r=1;r<arguments.length;r++){t[r-1]=arguments[r]}}i.push(new Item(e,t));if(i.length===1&&!o){runTimeout(drainQueue)}};function Item(e,t){this.fun=e;this.array=t}Item.prototype.run=function(){this.fun.apply(null,this.array)};t.title=\"browser\";t.browser=true;t.env={};t.argv=[];t.version=\"\";t.versions={};function noop(){}t.on=noop;t.addListener=noop;t.once=noop;t.off=noop;t.removeListener=noop;t.removeAllListeners=noop;t.emit=noop;t.prependListener=noop;t.prependOnceListener=noop;t.listeners=function(e){return[]};t.binding=function(e){throw new Error(\"process.binding is not supported\")};t.cwd=function(){return\"/\"};t.chdir=function(e){throw new Error(\"process.chdir is not supported\")};t.umask=function(){return 0}}};var t={};function __nccwpck_require__(r){var n=t[r];if(n!==undefined){return n.exports}var i=t[r]={exports:{}};var o=true;try{e[r](i,i.exports,__nccwpck_require__);o=false}finally{if(o)delete t[r]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var r=__nccwpck_require__(229);module.exports=r})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE0LjIuMzJfcmVhY3QtZG9tQDE4LjMuMV9yZWFjdEAxOC4zLjFfX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsWUFBWSxPQUFPLGdCQUFnQixtQkFBbUIsTUFBTSxNQUFNLDRCQUE0QixtREFBbUQsK0JBQStCLHFEQUFxRCxZQUFZLElBQUksbUNBQW1DLGFBQWEsS0FBSyxvQkFBb0IsU0FBUyxtQkFBbUIsSUFBSSxxQ0FBcUMsZUFBZSxLQUFLLHVCQUF1QixTQUFTLHVCQUF1QixJQUFJLHVCQUF1QixtQkFBbUIsdUJBQXVCLDJDQUEyQyxhQUFhLHVCQUF1QixJQUFJLGNBQWMsU0FBUyxJQUFJLHdCQUF3QixTQUFTLDBCQUEwQiw0QkFBNEIscUJBQXFCLHVCQUF1QixnREFBZ0QsZUFBZSx1QkFBdUIsSUFBSSxZQUFZLFNBQVMsSUFBSSxzQkFBc0IsU0FBUyx3QkFBd0IsU0FBUyxZQUFZLE1BQU0sU0FBUywyQkFBMkIsV0FBVyxPQUFPLFFBQVEsYUFBYSxjQUFjLEtBQUssS0FBSyxhQUFhLGNBQWMsc0JBQXNCLE1BQU0sT0FBTyxrQ0FBa0MsT0FBTyxlQUFlLFNBQVMsSUFBSSxLQUFLLGFBQWEsTUFBTSxZQUFZLEtBQUssV0FBVyxPQUFPLFFBQVEsbUJBQW1CLHVCQUF1QixvQ0FBb0MsdUJBQXVCLFlBQVksbUJBQW1CLEtBQUsscUJBQXFCLHNCQUFzQixxQkFBcUIseUJBQXlCLG1CQUFtQixXQUFXLGFBQWEsOEJBQThCLGlDQUFpQyxrQkFBa0IsZUFBZSxTQUFTLFVBQVUsYUFBYSxjQUFjLGlCQUFpQixVQUFVLG1CQUFtQixZQUFZLFdBQVcsc0JBQXNCLDBCQUEwQixZQUFZLHVCQUF1QiwyQkFBMkIsd0JBQXdCLFVBQVUsc0JBQXNCLHFEQUFxRCxpQkFBaUIsV0FBVyxvQkFBb0IsbURBQW1ELG1CQUFtQixZQUFZLFNBQVMsZ0NBQWdDLFdBQVcsa0JBQWtCLGlCQUFpQixZQUFZLFlBQVksV0FBVyxJQUFJLHNDQUFzQyxRQUFRLFFBQVEsaUJBQWlCLGlCQUFpQixtRUFBbUUsU0FBUyxLQUFLLCtCQUErQixpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL25leHRAMTQuMi4zMl9yZWFjdC1kb21AMTguMy4xX3JlYWN0QDE4LjMuMV9fcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcHJvY2Vzcy9icm93c2VyLmpzP2I0ZDUiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7dmFyIGU9ezIyOTpmdW5jdGlvbihlKXt2YXIgdD1lLmV4cG9ydHM9e307dmFyIHI7dmFyIG47ZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpe3Rocm93IG5ldyBFcnJvcihcInNldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcIil9ZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCgpe3Rocm93IG5ldyBFcnJvcihcImNsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX0oZnVuY3Rpb24oKXt0cnl7aWYodHlwZW9mIHNldFRpbWVvdXQ9PT1cImZ1bmN0aW9uXCIpe3I9c2V0VGltZW91dH1lbHNle3I9ZGVmYXVsdFNldFRpbW91dH19Y2F0Y2goZSl7cj1kZWZhdWx0U2V0VGltb3V0fXRyeXtpZih0eXBlb2YgY2xlYXJUaW1lb3V0PT09XCJmdW5jdGlvblwiKXtuPWNsZWFyVGltZW91dH1lbHNle249ZGVmYXVsdENsZWFyVGltZW91dH19Y2F0Y2goZSl7bj1kZWZhdWx0Q2xlYXJUaW1lb3V0fX0pKCk7ZnVuY3Rpb24gcnVuVGltZW91dChlKXtpZihyPT09c2V0VGltZW91dCl7cmV0dXJuIHNldFRpbWVvdXQoZSwwKX1pZigocj09PWRlZmF1bHRTZXRUaW1vdXR8fCFyKSYmc2V0VGltZW91dCl7cj1zZXRUaW1lb3V0O3JldHVybiBzZXRUaW1lb3V0KGUsMCl9dHJ5e3JldHVybiByKGUsMCl9Y2F0Y2godCl7dHJ5e3JldHVybiByLmNhbGwobnVsbCxlLDApfWNhdGNoKHQpe3JldHVybiByLmNhbGwodGhpcyxlLDApfX19ZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KGUpe2lmKG49PT1jbGVhclRpbWVvdXQpe3JldHVybiBjbGVhclRpbWVvdXQoZSl9aWYoKG49PT1kZWZhdWx0Q2xlYXJUaW1lb3V0fHwhbikmJmNsZWFyVGltZW91dCl7bj1jbGVhclRpbWVvdXQ7cmV0dXJuIGNsZWFyVGltZW91dChlKX10cnl7cmV0dXJuIG4oZSl9Y2F0Y2godCl7dHJ5e3JldHVybiBuLmNhbGwobnVsbCxlKX1jYXRjaCh0KXtyZXR1cm4gbi5jYWxsKHRoaXMsZSl9fX12YXIgaT1bXTt2YXIgbz1mYWxzZTt2YXIgdTt2YXIgYT0tMTtmdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKXtpZighb3x8IXUpe3JldHVybn1vPWZhbHNlO2lmKHUubGVuZ3RoKXtpPXUuY29uY2F0KGkpfWVsc2V7YT0tMX1pZihpLmxlbmd0aCl7ZHJhaW5RdWV1ZSgpfX1mdW5jdGlvbiBkcmFpblF1ZXVlKCl7aWYobyl7cmV0dXJufXZhciBlPXJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtvPXRydWU7dmFyIHQ9aS5sZW5ndGg7d2hpbGUodCl7dT1pO2k9W107d2hpbGUoKythPHQpe2lmKHUpe3VbYV0ucnVuKCl9fWE9LTE7dD1pLmxlbmd0aH11PW51bGw7bz1mYWxzZTtydW5DbGVhclRpbWVvdXQoZSl9dC5uZXh0VGljaz1mdW5jdGlvbihlKXt2YXIgdD1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aC0xKTtpZihhcmd1bWVudHMubGVuZ3RoPjEpe2Zvcih2YXIgcj0xO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspe3Rbci0xXT1hcmd1bWVudHNbcl19fWkucHVzaChuZXcgSXRlbShlLHQpKTtpZihpLmxlbmd0aD09PTEmJiFvKXtydW5UaW1lb3V0KGRyYWluUXVldWUpfX07ZnVuY3Rpb24gSXRlbShlLHQpe3RoaXMuZnVuPWU7dGhpcy5hcnJheT10fUl0ZW0ucHJvdG90eXBlLnJ1bj1mdW5jdGlvbigpe3RoaXMuZnVuLmFwcGx5KG51bGwsdGhpcy5hcnJheSl9O3QudGl0bGU9XCJicm93c2VyXCI7dC5icm93c2VyPXRydWU7dC5lbnY9e307dC5hcmd2PVtdO3QudmVyc2lvbj1cIlwiO3QudmVyc2lvbnM9e307ZnVuY3Rpb24gbm9vcCgpe310Lm9uPW5vb3A7dC5hZGRMaXN0ZW5lcj1ub29wO3Qub25jZT1ub29wO3Qub2ZmPW5vb3A7dC5yZW1vdmVMaXN0ZW5lcj1ub29wO3QucmVtb3ZlQWxsTGlzdGVuZXJzPW5vb3A7dC5lbWl0PW5vb3A7dC5wcmVwZW5kTGlzdGVuZXI9bm9vcDt0LnByZXBlbmRPbmNlTGlzdGVuZXI9bm9vcDt0Lmxpc3RlbmVycz1mdW5jdGlvbihlKXtyZXR1cm5bXX07dC5iaW5kaW5nPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkXCIpfTt0LmN3ZD1mdW5jdGlvbigpe3JldHVyblwiL1wifTt0LmNoZGlyPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZFwiKX07dC51bWFzaz1mdW5jdGlvbigpe3JldHVybiAwfX19O3ZhciB0PXt9O2Z1bmN0aW9uIF9fbmNjd3Bja19yZXF1aXJlX18ocil7dmFyIG49dFtyXTtpZihuIT09dW5kZWZpbmVkKXtyZXR1cm4gbi5leHBvcnRzfXZhciBpPXRbcl09e2V4cG9ydHM6e319O3ZhciBvPXRydWU7dHJ5e2Vbcl0oaSxpLmV4cG9ydHMsX19uY2N3cGNrX3JlcXVpcmVfXyk7bz1mYWxzZX1maW5hbGx5e2lmKG8pZGVsZXRlIHRbcl19cmV0dXJuIGkuZXhwb3J0c31pZih0eXBlb2YgX19uY2N3cGNrX3JlcXVpcmVfXyE9PVwidW5kZWZpbmVkXCIpX19uY2N3cGNrX3JlcXVpcmVfXy5hYj1fX2Rpcm5hbWUrXCIvXCI7dmFyIHI9X19uY2N3cGNrX3JlcXVpcmVfXygyMjkpO21vZHVsZS5leHBvcnRzPXJ9KSgpOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/process/browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/page.tsx":
/*!**************************!*\
  !*** ./src/app/page.tsx ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ HomePage; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _components_HashbrownSummary__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/components/HashbrownSummary */ \"(app-pages-browser)/./src/components/HashbrownSummary.tsx\");\n/* harmony import */ var _lib_providers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/providers */ \"(app-pages-browser)/./src/lib/providers.ts\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\nconst providerEntries = Object.entries(_lib_providers__WEBPACK_IMPORTED_MODULE_3__.providerMetadata);\nfunction HomePage() {\n    _s();\n    const [provider, setProvider] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"openai\");\n    const [prompt, setPrompt] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"Give me a one sentence update proving this API key is active right now.\");\n    const [result, setResult] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const providerLabel = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>_lib_providers__WEBPACK_IMPORTED_MODULE_3__.providerMetadata[provider].label, [\n        provider\n    ]);\n    async function handleSubmit(event) {\n        event.preventDefault();\n        setIsLoading(true);\n        setError(null);\n        try {\n            const response = await fetch(\"/api/check\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    provider,\n                    prompt\n                })\n            });\n            const json = await response.json();\n            if (!response.ok || !json.success) {\n                const message = json.success ? \"Request failed with status \".concat(response.status) : json.error;\n                setError(message);\n                setResult(null);\n                return;\n            }\n            setResult(json);\n        } catch (err) {\n            setError(err instanceof Error ? err.message : \"Unexpected error while reaching server\");\n            setResult(null);\n        } finally{\n            setIsLoading(false);\n        }\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"main\", {\n        className: \"mx-auto flex min-h-screen max-w-5xl flex-col gap-12 px-6 py-10\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"header\", {\n                className: \"flex flex-col gap-4 text-balance text-center sm:text-left\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                        className: \"text-4xl font-semibold tracking-tight text-white\",\n                        children: \"Tea Olive\"\n                    }, void 0, false, {\n                        fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                        lineNumber: 59,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"text-base text-white/70\",\n                        children: \"Run a quick prompt against OpenAI, Claude, or Gemini to confirm their API keys still work. Inspect the raw payloads like you would in Postman, then let Hashbrown craft a friendly summary for you.\"\n                    }, void 0, false, {\n                        fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                        lineNumber: 60,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                lineNumber: 58,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"section\", {\n                className: \"flex flex-col gap-6 rounded-3xl border border-white/10 bg-slate-950/70 p-8 shadow-xl ring-1 ring-white/5\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"form\", {\n                        className: \"flex flex-col gap-6\",\n                        onSubmit: handleSubmit,\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"grid gap-4 sm:grid-cols-[200px_1fr] sm:items-center\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                        className: \"text-sm font-medium text-white/80\",\n                                        htmlFor: \"service\",\n                                        children: \"Service\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                                        lineNumber: 70,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"select\", {\n                                        id: \"service\",\n                                        value: provider,\n                                        onChange: (event)=>setProvider(event.target.value),\n                                        className: \"w-full rounded-lg border border-white/10 bg-slate-900/80 px-3 py-2 text-sm text-white focus:border-brand focus:outline-none focus:ring-2 focus:ring-brand\",\n                                        children: providerEntries.map((param)=>{\n                                            let [id, meta] = param;\n                                            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                value: id,\n                                                children: meta.label\n                                            }, id, false, {\n                                                fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                                                lineNumber: 80,\n                                                columnNumber: 17\n                                            }, this);\n                                        })\n                                    }, void 0, false, {\n                                        fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                                        lineNumber: 73,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                                lineNumber: 69,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"grid gap-3\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                        className: \"text-sm font-medium text-white/80\",\n                                        htmlFor: \"prompt\",\n                                        children: \"Prompt\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                                        lineNumber: 88,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"textarea\", {\n                                        id: \"prompt\",\n                                        value: prompt,\n                                        onChange: (event)=>setPrompt(event.target.value),\n                                        rows: 4,\n                                        className: \"w-full rounded-lg border border-white/10 bg-slate-900/80 px-3 py-2 text-sm text-white focus:border-brand focus:outline-none focus:ring-2 focus:ring-brand\",\n                                        placeholder: \"Ask the provider to prove your API key works.\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                                        lineNumber: 91,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                                lineNumber: 87,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                type: \"submit\",\n                                className: \"inline-flex items-center justify-center rounded-lg bg-brand px-4 py-2 text-sm font-semibold text-white shadow-lg shadow-brand/30 transition hover:bg-brand/90 focus:outline-none focus:ring-2 focus:ring-brand focus:ring-offset-2 focus:ring-offset-slate-950 disabled:cursor-not-allowed disabled:opacity-60\",\n                                disabled: isLoading,\n                                children: isLoading ? \"Checking...\" : \"Run check\"\n                            }, void 0, false, {\n                                fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                                lineNumber: 101,\n                                columnNumber: 11\n                            }, this),\n                            error ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"rounded-lg border border-rose-500/60 bg-rose-500/10 p-4 text-sm text-rose-100\",\n                                children: error\n                            }, void 0, false, {\n                                fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                                lineNumber: 110,\n                                columnNumber: 13\n                            }, this) : null\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                        lineNumber: 68,\n                        columnNumber: 9\n                    }, this),\n                    result ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"grid gap-6 lg:grid-cols-2\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"section\", {\n                                className: \"flex flex-col gap-4 rounded-2xl border border-white/10 bg-slate-900/60 p-6\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"header\", {\n                                        className: \"flex flex-col gap-2\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                                className: \"text-lg font-semibold text-white/90\",\n                                                children: \"Run details\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                                                lineNumber: 120,\n                                                columnNumber: 17\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                className: \"text-sm text-white/60\",\n                                                children: [\n                                                    \"HTTP status \",\n                                                    result.status,\n                                                    \" - \",\n                                                    result.durationMs.toLocaleString(),\n                                                    \" ms - Model\",\n                                                    \" \",\n                                                    result.modelUsed\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                                                lineNumber: 121,\n                                                columnNumber: 17\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                                        lineNumber: 119,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"rounded-lg bg-black/40 p-4 text-sm text-white/80\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                className: \"font-medium text-white/70\",\n                                                children: \"Prompt\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                                                lineNumber: 127,\n                                                columnNumber: 17\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                className: \"mt-1 whitespace-pre-wrap text-white/90\",\n                                                children: result.prompt\n                                            }, void 0, false, {\n                                                fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                                                lineNumber: 128,\n                                                columnNumber: 17\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                                        lineNumber: 126,\n                                        columnNumber: 15\n                                    }, this),\n                                    result.textOutput ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"rounded-lg bg-black/40 p-4 text-sm text-white/80\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                className: \"font-medium text-white/70\",\n                                                children: \"Model output\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                                                lineNumber: 132,\n                                                columnNumber: 19\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                className: \"mt-1 whitespace-pre-wrap text-white/90\",\n                                                children: result.textOutput\n                                            }, void 0, false, {\n                                                fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                                                lineNumber: 133,\n                                                columnNumber: 19\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                                        lineNumber: 131,\n                                        columnNumber: 17\n                                    }, this) : null\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                                lineNumber: 118,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"section\", {\n                                className: \"flex flex-col gap-4 rounded-2xl border border-white/10 bg-slate-900/60 p-6\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                        className: \"text-lg font-semibold text-white/90\",\n                                        children: \"Raw payloads\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                                        lineNumber: 139,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(PayloadBlock, {\n                                        label: \"Request\",\n                                        data: result.requestPayload\n                                    }, void 0, false, {\n                                        fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                                        lineNumber: 140,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(PayloadBlock, {\n                                        label: \"Response\",\n                                        data: result.responsePayload\n                                    }, void 0, false, {\n                                        fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                                        lineNumber: 141,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                                lineNumber: 138,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                        lineNumber: 117,\n                        columnNumber: 11\n                    }, this) : null\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                lineNumber: 67,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"section\", {\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_HashbrownSummary__WEBPACK_IMPORTED_MODULE_2__.HashbrownSummary, {\n                    provider: provider,\n                    providerLabel: providerLabel,\n                    result: result\n                }, void 0, false, {\n                    fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                    lineNumber: 148,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                lineNumber: 147,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n        lineNumber: 57,\n        columnNumber: 5\n    }, this);\n}\n_s(HomePage, \"/X4lDxbjRLtQSJL+JwZeyim3C9o=\");\n_c = HomePage;\nfunction PayloadBlock(param) {\n    let { label, data } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex flex-col gap-2\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                className: \"text-sm font-medium text-white/70\",\n                children: label\n            }, void 0, false, {\n                fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                lineNumber: 157,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"pre\", {\n                className: \"max-h-72 overflow-auto rounded-xl bg-black/60 p-4 text-xs leading-relaxed text-emerald-200\",\n                children: safeJson(data)\n            }, void 0, false, {\n                fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n                lineNumber: 158,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/app/page.tsx\",\n        lineNumber: 156,\n        columnNumber: 5\n    }, this);\n}\n_c1 = PayloadBlock;\nfunction safeJson(data) {\n    try {\n        return JSON.stringify(data, null, 2);\n    } catch (error) {\n        return \"Unable to serialise payload: \".concat(error instanceof Error ? error.message : \"unknown error\");\n    }\n}\nvar _c, _c1;\n$RefreshReg$(_c, \"HomePage\");\n$RefreshReg$(_c1, \"PayloadBlock\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/page.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/HashbrownSummary.tsx":
/*!*********************************************!*\
  !*** ./src/components/HashbrownSummary.tsx ***!
  \*********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HashbrownSummary: function() { return /* binding */ HashbrownSummary; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _hashbrownai_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @hashbrownai/core */ \"(app-pages-browser)/./node_modules/.pnpm/@hashbrownai+core@0.3.0/node_modules/@hashbrownai/core/index.esm.js\");\n/* harmony import */ var _hashbrownai_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @hashbrownai/react */ \"(app-pages-browser)/./node_modules/.pnpm/@hashbrownai+react@0.3.0_@hashbrownai+core@0.3.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@hashbrownai/react/index.esm.js\");\n/* harmony import */ var _lib_providers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/providers */ \"(app-pages-browser)/./src/lib/providers.ts\");\n/* harmony import */ var _hashbrown_KeyValueList__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./hashbrown/KeyValueList */ \"(app-pages-browser)/./src/components/hashbrown/KeyValueList.tsx\");\n/* harmony import */ var _hashbrown_Note__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./hashbrown/Note */ \"(app-pages-browser)/./src/components/hashbrown/Note.tsx\");\n/* harmony import */ var _hashbrown_SummaryCard__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./hashbrown/SummaryCard */ \"(app-pages-browser)/./src/components/hashbrown/SummaryCard.tsx\");\n/* __next_internal_client_entry_do_not_use__ HashbrownSummary auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\nfunction safeStringify(value) {\n    let space = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2, maxLength = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 6000;\n    try {\n        const json = JSON.stringify(value, null, space);\n        if (!json) return \"\";\n        return json.length > maxLength ? \"\".concat(json.slice(0, maxLength), \"...\") : json;\n    } catch (error) {\n        return \"Unable to stringify value: \".concat(error instanceof Error ? error.message : \"unknown error\");\n    }\n}\nconst exposedComponents = [\n    (0,_hashbrownai_react__WEBPACK_IMPORTED_MODULE_6__.exposeComponent)(_hashbrown_SummaryCard__WEBPACK_IMPORTED_MODULE_5__.SummaryCard, {\n        name: \"SummaryCard\",\n        description: \"Use this to summarise whether the API key test succeeded or failed.\",\n        props: {\n            title: _hashbrownai_core__WEBPACK_IMPORTED_MODULE_7__.s.string(\"Short title for the summary card.\"),\n            body: _hashbrownai_core__WEBPACK_IMPORTED_MODULE_7__.s.string(\"Detailed explanation in plain text.\"),\n            tone: _hashbrownai_core__WEBPACK_IMPORTED_MODULE_7__.s.string(\"Visual tone for the card. Use success, info, warning, or danger to reflect the result.\")\n        }\n    }),\n    (0,_hashbrownai_react__WEBPACK_IMPORTED_MODULE_6__.exposeComponent)(_hashbrown_KeyValueList__WEBPACK_IMPORTED_MODULE_3__.KeyValueList, {\n        name: \"KeyValueList\",\n        description: \"Display useful metadata about the API call such as latency and HTTP status.\",\n        props: {\n            heading: _hashbrownai_core__WEBPACK_IMPORTED_MODULE_7__.s.string(\"Section heading.\"),\n            items: _hashbrownai_core__WEBPACK_IMPORTED_MODULE_7__.s.array(\"Key metrics or facts about the API response.\", _hashbrownai_core__WEBPACK_IMPORTED_MODULE_7__.s.object(\"Individual key/value pair.\", {\n                label: _hashbrownai_core__WEBPACK_IMPORTED_MODULE_7__.s.string(\"Label to display.\"),\n                value: _hashbrownai_core__WEBPACK_IMPORTED_MODULE_7__.s.string(\"Associated value.\")\n            }))\n        }\n    }),\n    (0,_hashbrownai_react__WEBPACK_IMPORTED_MODULE_6__.exposeComponent)(_hashbrown_Note__WEBPACK_IMPORTED_MODULE_4__.Note, {\n        name: \"Note\",\n        description: \"Show helpful guidance or follow-up steps for the user.\",\n        props: {\n            text: _hashbrownai_core__WEBPACK_IMPORTED_MODULE_7__.s.string(\"Content for the note.\")\n        },\n        children: false\n    })\n];\nfunction HashbrownSummary(param) {\n    let { provider, providerLabel, result } = param;\n    const url = \"/api/hashbrown/\".concat(provider);\n    if (!result) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"rounded-2xl border border-dashed border-white/10 bg-slate-950/60 p-6 text-sm text-white/60\",\n            children: \"Run a check and we will generate a quick summary here.\"\n        }, void 0, false, {\n            fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/components/HashbrownSummary.tsx\",\n            lineNumber: 72,\n            columnNumber: 7\n        }, this);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_hashbrownai_react__WEBPACK_IMPORTED_MODULE_6__.HashbrownProvider, {\n        url: url,\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(SummaryRuntime, {\n            provider: provider,\n            providerLabel: providerLabel,\n            result: result\n        }, void 0, false, {\n            fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/components/HashbrownSummary.tsx\",\n            lineNumber: 80,\n            columnNumber: 7\n        }, this)\n    }, \"\".concat(provider, \"-\").concat(result.status, \"-\").concat(result.durationMs), false, {\n        fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/components/HashbrownSummary.tsx\",\n        lineNumber: 79,\n        columnNumber: 5\n    }, this);\n}\n_c = HashbrownSummary;\nfunction SummaryRuntime(param) {\n    let { provider, providerLabel, result } = param;\n    _s();\n    const lastPayloadRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    var _result_modelUsed;\n    const summaryModel = provider === \"gemini\" ? \"gemini-2.5-flash\" : (_result_modelUsed = result.modelUsed) !== null && _result_modelUsed !== void 0 ? _result_modelUsed : _lib_providers__WEBPACK_IMPORTED_MODULE_2__.providerMetadata[provider].defaultModel;\n    const model = summaryModel;\n    const payloadForAi = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        return safeStringify({\n            provider,\n            providerLabel,\n            prompt: result.prompt,\n            status: result.status,\n            latencyMs: result.durationMs,\n            modelUsed: summaryModel,\n            textOutput: result.textOutput,\n            responsePayload: result.responsePayload\n        }, 2, 6000);\n    }, [\n        provider,\n        providerLabel,\n        result,\n        summaryModel\n    ]);\n    const { messages, sendMessage, stop, setMessages, isReceiving, isSending, error } = (0,_hashbrownai_react__WEBPACK_IMPORTED_MODULE_6__.useUiChat)({\n        debugName: \"api-summary\",\n        model,\n        system: \"You help developers understand whether an API key check succeeded. Use the provided components to share a clear status, key metrics, and any follow-up advice. Focus on being concise.\",\n        components: exposedComponents\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!payloadForAi) return;\n        if (lastPayloadRef.current === payloadForAi) return;\n        lastPayloadRef.current = payloadForAi;\n        if (isReceiving || isSending) {\n            stop(true);\n        }\n        setMessages([]);\n        sendMessage({\n            role: \"user\",\n            content: \"Here is the latest API check result in JSON format. Summarize it for the user and call out whether the key worked.\\n\".concat(payloadForAi)\n        });\n    }, [\n        payloadForAi,\n        sendMessage,\n        setMessages,\n        stop,\n        isReceiving,\n        isSending\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex flex-col gap-4 rounded-2xl border border-white/10 bg-slate-950/60 p-6\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"header\", {\n                className: \"flex items-center justify-between\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                        className: \"text-lg font-semibold text-white/90\",\n                        children: \"Hashbrown summary\"\n                    }, void 0, false, {\n                        fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/components/HashbrownSummary.tsx\",\n                        lineNumber: 142,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                        className: \"rounded-full border border-white/10 bg-white/5 px-3 py-1 text-xs uppercase tracking-wide text-white/60\",\n                        children: providerLabel\n                    }, void 0, false, {\n                        fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/components/HashbrownSummary.tsx\",\n                        lineNumber: 143,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/components/HashbrownSummary.tsx\",\n                lineNumber: 141,\n                columnNumber: 7\n            }, this),\n            error ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"rounded-lg border border-rose-500/60 bg-rose-500/10 p-4 text-sm text-rose-100\",\n                children: error.message\n            }, void 0, false, {\n                fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/components/HashbrownSummary.tsx\",\n                lineNumber: 149,\n                columnNumber: 9\n            }, this) : null,\n            (isReceiving || isSending) && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex items-center gap-2 text-sm text-white/60\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"h-3 w-3 animate-pulse rounded-full bg-white/40\"\n                    }, void 0, false, {\n                        fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/components/HashbrownSummary.tsx\",\n                        lineNumber: 156,\n                        columnNumber: 11\n                    }, this),\n                    \"Generating summary...\"\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/components/HashbrownSummary.tsx\",\n                lineNumber: 155,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex flex-col gap-4\",\n                children: messages.filter((entry)=>entry.role === \"assistant\").map((entry, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex flex-col gap-4\",\n                        children: entry.ui && entry.ui.length > 0 ? entry.ui : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"rounded-lg border border-white/10 bg-slate-900/80 p-4 text-sm text-white/80\",\n                            children: typeof entry.content === \"string\" ? entry.content : \"Assistant response received.\"\n                        }, void 0, false, {\n                            fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/components/HashbrownSummary.tsx\",\n                            lineNumber: 169,\n                            columnNumber: 17\n                        }, this)\n                    }, index, false, {\n                        fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/components/HashbrownSummary.tsx\",\n                        lineNumber: 165,\n                        columnNumber: 13\n                    }, this))\n            }, void 0, false, {\n                fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/components/HashbrownSummary.tsx\",\n                lineNumber: 161,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/components/HashbrownSummary.tsx\",\n        lineNumber: 140,\n        columnNumber: 5\n    }, this);\n}\n_s(SummaryRuntime, \"4wYtmODSKQuavZKjpLd5QZQCVJo=\", false, function() {\n    return [\n        _hashbrownai_react__WEBPACK_IMPORTED_MODULE_6__.useUiChat\n    ];\n});\n_c1 = SummaryRuntime;\nvar _c, _c1;\n$RefreshReg$(_c, \"HashbrownSummary\");\n$RefreshReg$(_c1, \"SummaryRuntime\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/HashbrownSummary.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/hashbrown/KeyValueList.tsx":
/*!***************************************************!*\
  !*** ./src/components/hashbrown/KeyValueList.tsx ***!
  \***************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeyValueList: function() { return /* binding */ KeyValueList; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* __next_internal_client_entry_do_not_use__ KeyValueList auto */ \nfunction KeyValueList(param) {\n    let { heading, items } = param;\n    if (!items.length) {\n        return null;\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"section\", {\n        className: \"flex flex-col gap-2 rounded-xl border border-white/10 bg-slate-900/60 p-4 ring-1 ring-inset ring-white/5\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h4\", {\n                className: \"text-sm font-semibold uppercase tracking-wide text-white/60\",\n                children: heading\n            }, void 0, false, {\n                fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/components/hashbrown/KeyValueList.tsx\",\n                lineNumber: 18,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"dl\", {\n                className: \"grid grid-cols-1 gap-3 text-sm sm:grid-cols-2\",\n                children: items.map((item)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex flex-col gap-1 rounded-lg bg-slate-900/70 p-3 ring-1 ring-white/5\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"dt\", {\n                                className: \"text-xs uppercase tracking-wide text-white/40\",\n                                children: item.label\n                            }, void 0, false, {\n                                fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/components/hashbrown/KeyValueList.tsx\",\n                                lineNumber: 25,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"dd\", {\n                                className: \"text-white/85 break-words\",\n                                children: item.value\n                            }, void 0, false, {\n                                fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/components/hashbrown/KeyValueList.tsx\",\n                                lineNumber: 26,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, item.label, true, {\n                        fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/components/hashbrown/KeyValueList.tsx\",\n                        lineNumber: 21,\n                        columnNumber: 11\n                    }, this))\n            }, void 0, false, {\n                fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/components/hashbrown/KeyValueList.tsx\",\n                lineNumber: 19,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/components/hashbrown/KeyValueList.tsx\",\n        lineNumber: 17,\n        columnNumber: 5\n    }, this);\n}\n_c = KeyValueList;\nvar _c;\n$RefreshReg$(_c, \"KeyValueList\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL2hhc2hicm93bi9LZXlWYWx1ZUxpc3QudHN4IiwibWFwcGluZ3MiOiI7Ozs7OztBQVVPLFNBQVNBLGFBQWEsS0FBcUM7UUFBckMsRUFBRUMsT0FBTyxFQUFFQyxLQUFLLEVBQXFCLEdBQXJDO0lBQzNCLElBQUksQ0FBQ0EsTUFBTUMsTUFBTSxFQUFFO1FBQ2pCLE9BQU87SUFDVDtJQUVBLHFCQUNFLDhEQUFDQztRQUFRQyxXQUFVOzswQkFDakIsOERBQUNDO2dCQUFHRCxXQUFVOzBCQUErREo7Ozs7OzswQkFDN0UsOERBQUNNO2dCQUFHRixXQUFVOzBCQUNYSCxNQUFNTSxHQUFHLENBQUMsQ0FBQ0MscUJBQ1YsOERBQUNDO3dCQUVDTCxXQUFVOzswQ0FFViw4REFBQ007Z0NBQUdOLFdBQVU7MENBQWlESSxLQUFLRyxLQUFLOzs7Ozs7MENBQ3pFLDhEQUFDQztnQ0FBR1IsV0FBVTswQ0FBNkJJLEtBQUtLLEtBQUs7Ozs7Ozs7dUJBSmhETCxLQUFLRyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7O0FBVTNCO0tBckJnQloiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvaGFzaGJyb3duL0tleVZhbHVlTGlzdC50c3g/NjExNiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2V5VmFsdWVMaXN0UHJvcHMge1xuICBoZWFkaW5nOiBzdHJpbmc7XG4gIGl0ZW1zOiBBcnJheTx7XG4gICAgbGFiZWw6IHN0cmluZztcbiAgICB2YWx1ZTogc3RyaW5nO1xuICB9Pjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEtleVZhbHVlTGlzdCh7IGhlYWRpbmcsIGl0ZW1zIH06IEtleVZhbHVlTGlzdFByb3BzKSB7XG4gIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgZ2FwLTIgcm91bmRlZC14bCBib3JkZXIgYm9yZGVyLXdoaXRlLzEwIGJnLXNsYXRlLTkwMC82MCBwLTQgcmluZy0xIHJpbmctaW5zZXQgcmluZy13aGl0ZS81XCI+XG4gICAgICA8aDQgY2xhc3NOYW1lPVwidGV4dC1zbSBmb250LXNlbWlib2xkIHVwcGVyY2FzZSB0cmFja2luZy13aWRlIHRleHQtd2hpdGUvNjBcIj57aGVhZGluZ308L2g0PlxuICAgICAgPGRsIGNsYXNzTmFtZT1cImdyaWQgZ3JpZC1jb2xzLTEgZ2FwLTMgdGV4dC1zbSBzbTpncmlkLWNvbHMtMlwiPlxuICAgICAgICB7aXRlbXMubWFwKChpdGVtKSA9PiAoXG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAga2V5PXtpdGVtLmxhYmVsfVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiZmxleCBmbGV4LWNvbCBnYXAtMSByb3VuZGVkLWxnIGJnLXNsYXRlLTkwMC83MCBwLTMgcmluZy0xIHJpbmctd2hpdGUvNVwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGR0IGNsYXNzTmFtZT1cInRleHQteHMgdXBwZXJjYXNlIHRyYWNraW5nLXdpZGUgdGV4dC13aGl0ZS80MFwiPntpdGVtLmxhYmVsfTwvZHQ+XG4gICAgICAgICAgICA8ZGQgY2xhc3NOYW1lPVwidGV4dC13aGl0ZS84NSBicmVhay13b3Jkc1wiPntpdGVtLnZhbHVlfTwvZGQ+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICkpfVxuICAgICAgPC9kbD5cbiAgICA8L3NlY3Rpb24+XG4gICk7XG59XG4iXSwibmFtZXMiOlsiS2V5VmFsdWVMaXN0IiwiaGVhZGluZyIsIml0ZW1zIiwibGVuZ3RoIiwic2VjdGlvbiIsImNsYXNzTmFtZSIsImg0IiwiZGwiLCJtYXAiLCJpdGVtIiwiZGl2IiwiZHQiLCJsYWJlbCIsImRkIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/hashbrown/KeyValueList.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/hashbrown/Note.tsx":
/*!*******************************************!*\
  !*** ./src/components/hashbrown/Note.tsx ***!
  \*******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Note: function() { return /* binding */ Note; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* __next_internal_client_entry_do_not_use__ Note auto */ \nfunction Note(param) {\n    let { text } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"rounded-lg border border-white/10 bg-slate-900/70 p-4 text-sm leading-relaxed text-white/75\",\n        children: text\n    }, void 0, false, {\n        fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/components/hashbrown/Note.tsx\",\n        lineNumber: 9,\n        columnNumber: 5\n    }, this);\n}\n_c = Note;\nvar _c;\n$RefreshReg$(_c, \"Note\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL2hhc2hicm93bi9Ob3RlLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFNTyxTQUFTQSxLQUFLLEtBQW1CO1FBQW5CLEVBQUVDLElBQUksRUFBYSxHQUFuQjtJQUNuQixxQkFDRSw4REFBQ0M7UUFBSUMsV0FBVTtrQkFDWkY7Ozs7OztBQUdQO0tBTmdCRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvY29tcG9uZW50cy9oYXNoYnJvd24vTm90ZS50c3g/ZmU2OCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTm90ZVByb3BzIHtcbiAgdGV4dDogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTm90ZSh7IHRleHQgfTogTm90ZVByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJyb3VuZGVkLWxnIGJvcmRlciBib3JkZXItd2hpdGUvMTAgYmctc2xhdGUtOTAwLzcwIHAtNCB0ZXh0LXNtIGxlYWRpbmctcmVsYXhlZCB0ZXh0LXdoaXRlLzc1XCI+XG4gICAgICB7dGV4dH1cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiJdLCJuYW1lcyI6WyJOb3RlIiwidGV4dCIsImRpdiIsImNsYXNzTmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/hashbrown/Note.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/hashbrown/SummaryCard.tsx":
/*!**************************************************!*\
  !*** ./src/components/hashbrown/SummaryCard.tsx ***!
  \**************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SummaryCard: function() { return /* binding */ SummaryCard; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! clsx */ \"(app-pages-browser)/./node_modules/.pnpm/clsx@2.1.1/node_modules/clsx/dist/clsx.mjs\");\n/* __next_internal_client_entry_do_not_use__ SummaryCard auto */ \n\nconst toneStyles = {\n    success: \"border-emerald-500/80 bg-emerald-500/10 text-emerald-100\",\n    info: \"border-sky-500/80 bg-sky-500/10 text-sky-100\",\n    warning: \"border-amber-500/80 bg-amber-500/10 text-amber-100\",\n    danger: \"border-rose-500/80 bg-rose-500/10 text-rose-100\"\n};\nfunction SummaryCard(param) {\n    let { title, body, tone = \"info\" } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"flex flex-col gap-2 rounded-xl border p-4 shadow-sm ring-1 ring-inset ring-white/5 backdrop-blur\", toneStyles[tone]),\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                className: \"text-lg font-semibold leading-tight text-white/90\",\n                children: title\n            }, void 0, false, {\n                fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/components/hashbrown/SummaryCard.tsx\",\n                lineNumber: 26,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                className: \"whitespace-pre-wrap text-sm leading-relaxed text-white/80\",\n                children: body\n            }, void 0, false, {\n                fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/components/hashbrown/SummaryCard.tsx\",\n                lineNumber: 27,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/ohong/Library/Mobile Documents/com~apple~CloudDocs/dev/tea-olive/web/src/components/hashbrown/SummaryCard.tsx\",\n        lineNumber: 20,\n        columnNumber: 5\n    }, this);\n}\n_c = SummaryCard;\nvar _c;\n$RefreshReg$(_c, \"SummaryCard\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL2hhc2hicm93bi9TdW1tYXJ5Q2FyZC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUV3QjtBQVF4QixNQUFNQyxhQUFvRTtJQUN4RUMsU0FBUztJQUNUQyxNQUFNO0lBQ05DLFNBQVM7SUFDVEMsUUFBUTtBQUNWO0FBRU8sU0FBU0MsWUFBWSxLQUFnRDtRQUFoRCxFQUFFQyxLQUFLLEVBQUVDLElBQUksRUFBRUMsT0FBTyxNQUFNLEVBQW9CLEdBQWhEO0lBQzFCLHFCQUNFLDhEQUFDQztRQUNDQyxXQUFXWCxnREFBSUEsQ0FDYixvR0FDQUMsVUFBVSxDQUFDUSxLQUFLOzswQkFHbEIsOERBQUNHO2dCQUFHRCxXQUFVOzBCQUFxREo7Ozs7OzswQkFDbkUsOERBQUNNO2dCQUFFRixXQUFVOzBCQUE2REg7Ozs7Ozs7Ozs7OztBQUdoRjtLQVpnQkYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvaGFzaGJyb3duL1N1bW1hcnlDYXJkLnRzeD8wOWNiIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcblxuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3VtbWFyeUNhcmRQcm9wcyB7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIGJvZHk6IHN0cmluZztcbiAgdG9uZT86ICdzdWNjZXNzJyB8ICdpbmZvJyB8ICd3YXJuaW5nJyB8ICdkYW5nZXInO1xufVxuXG5jb25zdCB0b25lU3R5bGVzOiBSZWNvcmQ8Tm9uTnVsbGFibGU8U3VtbWFyeUNhcmRQcm9wc1sndG9uZSddPiwgc3RyaW5nPiA9IHtcbiAgc3VjY2VzczogJ2JvcmRlci1lbWVyYWxkLTUwMC84MCBiZy1lbWVyYWxkLTUwMC8xMCB0ZXh0LWVtZXJhbGQtMTAwJyxcbiAgaW5mbzogJ2JvcmRlci1za3ktNTAwLzgwIGJnLXNreS01MDAvMTAgdGV4dC1za3ktMTAwJyxcbiAgd2FybmluZzogJ2JvcmRlci1hbWJlci01MDAvODAgYmctYW1iZXItNTAwLzEwIHRleHQtYW1iZXItMTAwJyxcbiAgZGFuZ2VyOiAnYm9yZGVyLXJvc2UtNTAwLzgwIGJnLXJvc2UtNTAwLzEwIHRleHQtcm9zZS0xMDAnLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIFN1bW1hcnlDYXJkKHsgdGl0bGUsIGJvZHksIHRvbmUgPSAnaW5mbycgfTogU3VtbWFyeUNhcmRQcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT17Y2xzeChcbiAgICAgICAgJ2ZsZXggZmxleC1jb2wgZ2FwLTIgcm91bmRlZC14bCBib3JkZXIgcC00IHNoYWRvdy1zbSByaW5nLTEgcmluZy1pbnNldCByaW5nLXdoaXRlLzUgYmFja2Ryb3AtYmx1cicsXG4gICAgICAgIHRvbmVTdHlsZXNbdG9uZV0sXG4gICAgICApfVxuICAgID5cbiAgICAgIDxoMyBjbGFzc05hbWU9XCJ0ZXh0LWxnIGZvbnQtc2VtaWJvbGQgbGVhZGluZy10aWdodCB0ZXh0LXdoaXRlLzkwXCI+e3RpdGxlfTwvaDM+XG4gICAgICA8cCBjbGFzc05hbWU9XCJ3aGl0ZXNwYWNlLXByZS13cmFwIHRleHQtc20gbGVhZGluZy1yZWxheGVkIHRleHQtd2hpdGUvODBcIj57Ym9keX08L3A+XG4gICAgPC9kaXY+XG4gICk7XG59XG4iXSwibmFtZXMiOlsiY2xzeCIsInRvbmVTdHlsZXMiLCJzdWNjZXNzIiwiaW5mbyIsIndhcm5pbmciLCJkYW5nZXIiLCJTdW1tYXJ5Q2FyZCIsInRpdGxlIiwiYm9keSIsInRvbmUiLCJkaXYiLCJjbGFzc05hbWUiLCJoMyIsInAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/hashbrown/SummaryCard.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/providers.ts":
/*!******************************!*\
  !*** ./src/lib/providers.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   callClaude: function() { return /* binding */ callClaude; },\n/* harmony export */   callGemini: function() { return /* binding */ callGemini; },\n/* harmony export */   callOpenAI: function() { return /* binding */ callOpenAI; },\n/* harmony export */   getProviderCall: function() { return /* binding */ getProviderCall; },\n/* harmony export */   parseProviderRequest: function() { return /* binding */ parseProviderRequest; },\n/* harmony export */   providerMetadata: function() { return /* binding */ providerMetadata; }\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(app-pages-browser)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/types.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/polyfills/process.js\");\n\nconst providerRequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    provider: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        \"openai\",\n        \"claude\",\n        \"gemini\"\n    ]),\n    prompt: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1, \"Prompt is required\")\n});\nfunction parseProviderRequest(json) {\n    return providerRequestSchema.parse(json);\n}\nvar _process_env_OPENAI_MODEL, _process_env_ANTHROPIC_MODEL, _process_env_GEMINI_MODEL;\nconst providerMetadata = {\n    openai: {\n        label: \"OpenAI\",\n        defaultModel: (_process_env_OPENAI_MODEL = process.env.OPENAI_MODEL) !== null && _process_env_OPENAI_MODEL !== void 0 ? _process_env_OPENAI_MODEL : \"gpt-4o-mini\",\n        envKey: \"OPENAI_API_KEY\"\n    },\n    claude: {\n        label: \"Claude\",\n        defaultModel: (_process_env_ANTHROPIC_MODEL = process.env.ANTHROPIC_MODEL) !== null && _process_env_ANTHROPIC_MODEL !== void 0 ? _process_env_ANTHROPIC_MODEL : \"claude-3-5-sonnet-20240620\",\n        envKey: \"ANTHROPIC_API_KEY\"\n    },\n    gemini: {\n        label: \"Gemini\",\n        defaultModel: (_process_env_GEMINI_MODEL = process.env.GEMINI_MODEL) !== null && _process_env_GEMINI_MODEL !== void 0 ? _process_env_GEMINI_MODEL : \"gemini-2.5-flash-lite\",\n        envKey: \"GEMINI_API_KEY\"\n    }\n};\nasync function callOpenAI(param) {\n    let { prompt, system, model, signal } = param;\n    var _choice_message;\n    const apiKey = process.env.OPENAI_API_KEY;\n    if (!apiKey) {\n        throw new Error(\"OPENAI_API_KEY is not set\");\n    }\n    var _process_env_OPENAI_BASE_URL;\n    const baseUrl = (_process_env_OPENAI_BASE_URL = process.env.OPENAI_BASE_URL) !== null && _process_env_OPENAI_BASE_URL !== void 0 ? _process_env_OPENAI_BASE_URL : \"https://api.openai.com\";\n    const url = \"\".concat(baseUrl.replace(/\\/$/, \"\"), \"/v1/chat/completions\");\n    const body = {\n        model: model !== null && model !== void 0 ? model : providerMetadata.openai.defaultModel,\n        messages: [\n            {\n                role: \"system\",\n                content: system !== null && system !== void 0 ? system : \"You help test whether an OpenAI API key works by echoing the user prompt clearly.\"\n            },\n            {\n                role: \"user\",\n                content: prompt\n            }\n        ],\n        temperature: 0\n    };\n    const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: \"Bearer \".concat(apiKey)\n        },\n        body: JSON.stringify(body),\n        signal\n    });\n    const raw = await response.json().catch(()=>undefined);\n    let text = null;\n    const choice = Array.isArray(raw === null || raw === void 0 ? void 0 : raw.choices) ? raw.choices[0] : undefined;\n    if (choice === null || choice === void 0 ? void 0 : (_choice_message = choice.message) === null || _choice_message === void 0 ? void 0 : _choice_message.content) {\n        text = choice.message.content;\n    }\n    return {\n        rawResponse: raw,\n        textOutput: text,\n        requestPayload: body,\n        status: response.status\n    };\n}\nasync function callClaude(param) {\n    let { prompt, system, model, signal } = param;\n    const apiKey = process.env.ANTHROPIC_API_KEY;\n    if (!apiKey) {\n        throw new Error(\"ANTHROPIC_API_KEY is not set\");\n    }\n    var _process_env_ANTHROPIC_BASE_URL;\n    const baseUrl = (_process_env_ANTHROPIC_BASE_URL = process.env.ANTHROPIC_BASE_URL) !== null && _process_env_ANTHROPIC_BASE_URL !== void 0 ? _process_env_ANTHROPIC_BASE_URL : \"https://api.anthropic.com\";\n    const url = \"\".concat(baseUrl.replace(/\\/$/, \"\"), \"/v1/messages\");\n    var _process_env_ANTHROPIC_MAX_TOKENS;\n    const body = {\n        model: model !== null && model !== void 0 ? model : providerMetadata.claude.defaultModel,\n        system: system !== null && system !== void 0 ? system : \"You help verify the Anthropic Claude API key.\",\n        max_tokens: Number((_process_env_ANTHROPIC_MAX_TOKENS = process.env.ANTHROPIC_MAX_TOKENS) !== null && _process_env_ANTHROPIC_MAX_TOKENS !== void 0 ? _process_env_ANTHROPIC_MAX_TOKENS : 1024),\n        messages: [\n            {\n                role: \"user\",\n                content: prompt\n            }\n        ]\n    };\n    var _process_env_ANTHROPIC_VERSION;\n    const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"x-api-key\": apiKey,\n            \"anthropic-version\": (_process_env_ANTHROPIC_VERSION = process.env.ANTHROPIC_VERSION) !== null && _process_env_ANTHROPIC_VERSION !== void 0 ? _process_env_ANTHROPIC_VERSION : \"2023-06-01\"\n        },\n        body: JSON.stringify(body),\n        signal\n    });\n    const raw = await response.json().catch(()=>undefined);\n    let text = null;\n    if (Array.isArray(raw === null || raw === void 0 ? void 0 : raw.content)) {\n        text = raw.content.map((part)=>{\n            if (typeof (part === null || part === void 0 ? void 0 : part.text) === \"string\") return part.text;\n            return typeof part === \"string\" ? part : undefined;\n        }).filter(Boolean).join(\"\\n\");\n    }\n    return {\n        rawResponse: raw,\n        textOutput: text,\n        requestPayload: body,\n        status: response.status\n    };\n}\nasync function callGemini(param) {\n    let { prompt, system, model, signal } = param;\n    var _candidates__content, _candidates_;\n    const apiKey = process.env.GEMINI_API_KEY;\n    if (!apiKey) {\n        throw new Error(\"GEMINI_API_KEY is not set\");\n    }\n    const chosenModel = model !== null && model !== void 0 ? model : providerMetadata.gemini.defaultModel;\n    var _process_env_GEMINI_API_BASE;\n    const baseUrl = (_process_env_GEMINI_API_BASE = process.env.GEMINI_API_BASE) !== null && _process_env_GEMINI_API_BASE !== void 0 ? _process_env_GEMINI_API_BASE : \"https://generativelanguage.googleapis.com\";\n    const url = \"\".concat(baseUrl.replace(/\\/$/, \"\"), \"/v1beta/models/\").concat(chosenModel, \":generateContent?key=\").concat(apiKey);\n    const body = {\n        contents: [\n            {\n                role: \"user\",\n                parts: [\n                    {\n                        text: prompt\n                    }\n                ]\n            }\n        ],\n        systemInstruction: system ? {\n            parts: [\n                {\n                    text: system\n                }\n            ]\n        } : undefined\n    };\n    const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body),\n        signal\n    });\n    const raw = await response.json().catch(()=>undefined);\n    let text = null;\n    const candidates = Array.isArray(raw === null || raw === void 0 ? void 0 : raw.candidates) ? raw.candidates : [];\n    if (candidates.length > 0 && Array.isArray((_candidates_ = candidates[0]) === null || _candidates_ === void 0 ? void 0 : (_candidates__content = _candidates_.content) === null || _candidates__content === void 0 ? void 0 : _candidates__content.parts)) {\n        text = candidates[0].content.parts.map((part)=>typeof (part === null || part === void 0 ? void 0 : part.text) === \"string\" ? part.text : null).filter(Boolean).join(\"\\n\");\n    }\n    return {\n        rawResponse: raw,\n        textOutput: text,\n        requestPayload: body,\n        status: response.status\n    };\n}\nfunction getProviderCall(provider) {\n    switch(provider){\n        case \"openai\":\n            return callOpenAI;\n        case \"claude\":\n            return callClaude;\n        case \"gemini\":\n            return callGemini;\n        default:\n            throw new Error(\"Unsupported provider: \".concat(provider));\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/providers.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!********************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \********************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider'); // TODO: Delete with enableRenderableContext\n\nvar REACT_CONSUMER_TYPE = Symbol.for('react.consumer');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\nvar enableRenderableContext = false;\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false;\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n}\n\nvar REACT_CLIENT_REFERENCE$2 = Symbol.for('react.client.reference'); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  if (typeof type === 'function') {\n    if (type.$$typeof === REACT_CLIENT_REFERENCE$2) {\n      // TODO: Create a convention for naming client references with debug info.\n      return null;\n    }\n\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n    case REACT_CACHE_TYPE:\n      {\n        return 'Cache';\n      }\n\n  }\n\n  if (typeof type === 'object') {\n    {\n      if (typeof type.tag === 'number') {\n        error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n      }\n    }\n\n    switch (type.$$typeof) {\n      case REACT_PROVIDER_TYPE:\n        {\n          var provider = type;\n          return getContextName(provider._context) + '.Provider';\n        }\n\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n\n        {\n          return getContextName(context) + '.Consumer';\n        }\n\n      case REACT_CONSUMER_TYPE:\n        {\n          return null;\n        }\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n    }\n  }\n\n  return null;\n}\n\n// $FlowFixMe[method-unbinding]\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar assign = Object.assign;\n\n/*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object'; // $FlowFixMe[incompatible-return]\n\n    return type;\n  }\n} // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar REACT_CLIENT_REFERENCE$1 = Symbol.for('react.client.reference');\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || enableRenderableContext  || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n/**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */\n\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */\n\n\n  var RunInRootFrame = {\n    DetermineComponentFrameRoot: function () {\n      var control;\n\n      try {\n        // This should throw.\n        if (construct) {\n          // Something should be setting the props in the constructor.\n          var Fake = function () {\n            throw Error();\n          }; // $FlowFixMe[prop-missing]\n\n\n          Object.defineProperty(Fake.prototype, 'props', {\n            set: function () {\n              // We use a throwing setter instead of frozen or non-writable props\n              // because that won't throw in a non-strict mode function.\n              throw Error();\n            }\n          });\n\n          if (typeof Reflect === 'object' && Reflect.construct) {\n            // We construct a different control for this case to include any extra\n            // frames added by the construct call.\n            try {\n              Reflect.construct(Fake, []);\n            } catch (x) {\n              control = x;\n            }\n\n            Reflect.construct(fn, [], Fake);\n          } else {\n            try {\n              Fake.call();\n            } catch (x) {\n              control = x;\n            } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n            fn.call(Fake.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (x) {\n            control = x;\n          } // TODO(luna): This will currently only throw if the function component\n          // tries to access React/ReactDOM/props. We should probably make this throw\n          // in simple components too\n\n\n          var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n          // component, which we don't yet support. Attach a noop catch handler to\n          // silence the error.\n          // TODO: Implement component stacks for async client components?\n\n          if (maybePromise && typeof maybePromise.catch === 'function') {\n            maybePromise.catch(function () {});\n          }\n        }\n      } catch (sample) {\n        // This is inlined manually because closure doesn't do it for us.\n        if (sample && control && typeof sample.stack === 'string') {\n          return [sample.stack, control.stack];\n        }\n      }\n\n      return [null, null];\n    }\n  }; // $FlowFixMe[prop-missing]\n\n  RunInRootFrame.DetermineComponentFrameRoot.displayName = 'DetermineComponentFrameRoot';\n  var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, 'name'); // Before ES6, the `name` property was not configurable.\n\n  if (namePropDescriptor && namePropDescriptor.configurable) {\n    // V8 utilizes a function's `name` property when generating a stack trace.\n    Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // Configurable properties can be updated even if its writable descriptor\n    // is set to `false`.\n    // $FlowFixMe[cannot-write]\n    'name', {\n      value: 'DetermineComponentFrameRoot'\n    });\n  }\n\n  try {\n    var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),\n        sampleStack = _RunInRootFrame$Deter[0],\n        controlStack = _RunInRootFrame$Deter[1];\n\n    if (sampleStack && controlStack) {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sampleStack.split('\\n');\n      var controlLines = controlStack.split('\\n');\n      var s = 0;\n      var c = 0;\n\n      while (s < sampleLines.length && !sampleLines[s].includes('DetermineComponentFrameRoot')) {\n        s++;\n      }\n\n      while (c < controlLines.length && !controlLines[c].includes('DetermineComponentFrameRoot')) {\n        c++;\n      } // We couldn't find our intentionally injected common root frame, attempt\n      // to find another common root frame by search from the bottom of the\n      // control stack...\n\n\n      if (s === sampleLines.length || c === controlLines.length) {\n        s = sampleLines.length - 1;\n        c = controlLines.length - 1;\n\n        while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n          // We expect at least one stack frame to be shared.\n          // Typically this will be the root most one. However, stack frames may be\n          // cut off due to maximum stack limits. In this case, one maybe cut off\n          // earlier than the other. We assume that the sample is longer or the same\n          // and there for cut off earlier. So we should find the root most frame in\n          // the sample somewhere in the control.\n          c--;\n        }\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                if (true) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\nvar REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference');\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    {\n      var warnAboutAccessingRef = function () {\n        if (!specialPropRefWarningShown) {\n          specialPropRefWarningShown = true;\n\n          error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n        }\n      };\n\n      warnAboutAccessingRef.isReactWarning = true;\n      Object.defineProperty(props, 'ref', {\n        get: warnAboutAccessingRef,\n        configurable: true\n      });\n    }\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nfunction ReactElement(type, key, _ref, self, source, owner, props) {\n  var ref;\n\n  {\n    ref = _ref;\n  }\n\n  var element;\n\n  {\n    // In prod, `ref` is a regular property. It will be removed in a\n    // future release.\n    element = {\n      // This tag allows us to uniquely identify this as a React Element\n      $$typeof: REACT_ELEMENT_TYPE,\n      // Built-in properties that belong on the element\n      type: type,\n      key: key,\n      ref: ref,\n      props: props,\n      // Record the component responsible for creating this element.\n      _owner: owner\n    };\n  }\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // debugInfo contains Server Component debug information.\n\n    Object.defineProperty(element, '_debugInfo', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: null\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n}\nvar didWarnAboutKeySpread = {};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV$1(type, config, maybeKey, isStaticChildren, source, self) {\n  {\n    if (!isValidElementType(type)) {\n      // This is an invalid element type.\n      //\n      // We warn in this case but don't throw. We expect the element creation to\n      // succeed and there will likely be errors in render.\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    } else {\n      // This is a valid element type.\n      // Skip key warning if the type isn't valid since our key validation logic\n      // doesn't expect a non-string/function type and can throw confusing\n      // errors. We don't want exception behavior to differ between dev and\n      // prod. (Rendering will throw with a helpful message and as soon as the\n      // type is fixed, the key warnings will appear.)\n      var children = config.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    } // Warn about key spread regardless of whether the type is valid.\n\n\n    if (hasOwnProperty.call(config, 'key')) {\n      var componentName = getComponentNameFromType(type);\n      var keys = Object.keys(config).filter(function (k) {\n        return k !== 'key';\n      });\n      var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';\n\n      if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n        var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n\n        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + '  let props = %s;\\n' + '  <%s {...props} />\\n' + 'React keys must be passed directly to JSX without using spread:\\n' + '  let props = %s;\\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);\n\n        didWarnAboutKeySpread[componentName + beforeExample] = true;\n      }\n    }\n\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      {\n        ref = config.ref;\n      }\n\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && // Skip over reserved prop names\n      propName !== 'key' && (propName !== 'ref')) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    var element = ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    }\n\n    return element;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object' || !node) {\n      return;\n    }\n\n    if (node.$$typeof === REACT_CLIENT_REFERENCE) ; else if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\nvar ownerHasKeyUseWarning = {};\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement(null);\n  }\n}\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = getComponentNameFromType(parentType);\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  // TODO: Move this to render phase instead of at element creation.\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement(null);\n    }\n  }\n}\n\nvar jsxDEV = jsxDEV$1 ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \**********************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE0LjIuMzJfcmVhY3QtZG9tQDE4LjMuMV9yZWFjdEAxOC4zLjFfX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJLEtBQXFDLEVBQUUsRUFFMUMsQ0FBQztBQUNGLEVBQUUsMFFBQXNFO0FBQ3hFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE0LjIuMzJfcmVhY3QtZG9tQDE4LjMuMV9yZWFjdEAxOC4zLjFfX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz81MWJiIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@hashbrownai+react@0.3.0_@hashbrownai+core@0.3.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@hashbrownai/react/index.esm.js":
/*!**********************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@hashbrownai+react@0.3.0_@hashbrownai+core@0.3.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@hashbrownai/react/index.esm.js ***!
  \**********************************************************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HashbrownProvider: function() { return /* binding */ HashbrownProvider; },\n/* harmony export */   exposeComponent: function() { return /* binding */ exposeComponent; },\n/* harmony export */   useChat: function() { return /* binding */ useChat; },\n/* harmony export */   useCompletion: function() { return /* binding */ useCompletion; },\n/* harmony export */   useRuntime: function() { return /* binding */ useRuntime; },\n/* harmony export */   useRuntimeFunction: function() { return /* binding */ useRuntimeFunction; },\n/* harmony export */   useStructuredChat: function() { return /* binding */ useStructuredChat; },\n/* harmony export */   useStructuredCompletion: function() { return /* binding */ useStructuredCompletion; },\n/* harmony export */   useTool: function() { return /* binding */ useTool; },\n/* harmony export */   useToolJavaScript: function() { return /* binding */ useToolJavaScript; },\n/* harmony export */   useUiChat: function() { return /* binding */ useUiChat; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/jsx-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _hashbrownai_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @hashbrownai/core */ \"(app-pages-browser)/./node_modules/.pnpm/@hashbrownai+core@0.3.0/node_modules/@hashbrownai/core/index.esm.js\");\n\n\n\n\n/**\n * Creates an object used to expose a component for use by the LLM.\n *\n * @example\n * ```ts\n * exposeComponent(\n *   CardComponent, // The React component to be exposed.\n *   { // The exposed component configuration.\n *     name: 'CardComponent',\n *     description: 'Show a card with children components to the user',\n *     children: 'any',\n *     props: {\n *       title: s.string('The title of the card'),\n *       description: s.streaming.string('The description of the card'),\n *     },\n *   },\n * });\n * ```\n *\n * @returns An object representing the component in order to expose it to the LLM.\n * @public\n */\nfunction exposeComponent(\n/**\n * The component to be exposed.\n */\ncomponent,\n/**\n * The configuration object for the component, excluding the component itself.\n */\nconfig) {\n  return Object.assign({\n    component\n  }, config);\n}\n\nconst HashbrownContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n/**\n * The context for the Hashbrown provider.  This is used to store the URL and middleware for contacting the Hashbrown endpoint.\n *\n * @public\n * @example\n * ```ts\n * <HashbrownProvider url=\"https://your.api.local/chat\">\n *   <App />\n * </HashbrownProvider>\n * ```\n */\nconst HashbrownProvider = (\n/**\n * The options for the Hashbrown provider.\n */\nprops) => {\n  const {\n    url,\n    middleware,\n    children\n  } = props;\n  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(HashbrownContext.Provider, {\n    value: {\n      url,\n      middleware\n    },\n    children: children\n  });\n};\n\n/**\n * Connects a Hashbrown Signal to React's reactivity system\n *\n * @param signal - The signal to connect to React\n * @returns The value contained in the signal\n */\nfunction useHashbrownSignal(signal) {\n  const lastValue = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(signal());\n  const hasSkippedFirstCall = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n  const equality = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((a, b) => (0,_hashbrownai_core__WEBPACK_IMPORTED_MODULE_2__[\"ɵdeepEqual\"])(a, b), []);\n  const read = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {\n    const value = signal();\n    if (!equality(value, lastValue.current)) {\n      lastValue.current = value;\n    }\n    return lastValue.current;\n  }, [signal, equality]);\n  const subscribe = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(onStoreChange => {\n    let lastRead;\n    const cleanup = signal.subscribe(value => {\n      if (!hasSkippedFirstCall.current) {\n        hasSkippedFirstCall.current = true;\n        return;\n      }\n      const currentValue = read();\n      if (currentValue !== lastRead) {\n        lastRead = currentValue;\n        onStoreChange();\n      }\n    });\n    return () => {\n      cleanup();\n      hasSkippedFirstCall.current = false;\n    };\n  }, [signal, read]);\n  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStore)(subscribe, read);\n}\n\n/**\n * This React hook creates a chat instance used to interact with the LLM.\n * The result object contains functions and state enabling you to send and recieve messages and monitor the state of the chat.\n *\n * The `useChat` hook provides the most basic functionality for un-structured chats.  Unstructured chats include things like general chats and natural language controls.\n *\n * @public\n * @returns An object containing chat state and functions to interact with the chat.\n * @typeParam Tools - The set of tool definitions available to the chat.\n * @example\n * This example demonstrates how to use the `useChat` hook to create a simple chat component.\n *\n * ```tsx\n * const MyChatComponent = () => {\n *   const { messages, sendMessage, status } = useChat({\n *     model: 'gpt-4o',\n *     system: 'You are a helpful assistant.',\n *     tools: [],\n *   });\n *\n *   const handleSendMessage = () => {\n *     sendMessage({ role: 'user', content: 'Hello, how are you?' });\n *   };\n *\n *   return (\n *     <div>\n *       <button onClick={handleSendMessage}>Send Message</button>\n *       <div>Status: {status}</div>\n *       <ul>\n *         {messages.map((msg, index) => (\n *           <li key={index}>{msg.content}</li>\n *         ))}\n *       </ul>\n *     </div>\n *   );\n * };\n * ```\n */\nfunction useChat(\n/**\n * The options for the chat.\n */\noptions) {\n  var _a;\n  const tools = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    var _a;\n    return (_a = options.tools) !== null && _a !== void 0 ? _a : [];\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  (_a = options.tools) !== null && _a !== void 0 ? _a : []);\n  const config = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(HashbrownContext);\n  if (!config) {\n    throw new Error('HashbrownContext not found');\n  }\n  const hashbrownRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n  if (!hashbrownRef.current) {\n    hashbrownRef.current = (0,_hashbrownai_core__WEBPACK_IMPORTED_MODULE_2__.fryHashbrown)({\n      apiUrl: config.url,\n      middleware: config.middleware,\n      debugName: options.debugName,\n      model: options.model,\n      system: options.system,\n      tools,\n      debounce: options.debounceTime,\n      retries: options.retries\n    });\n  }\n  function getHashbrown() {\n    const instance = hashbrownRef.current;\n    if (!instance) {\n      throw new Error('Hashbrown not found');\n    }\n    return instance;\n  }\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    return getHashbrown().sizzle();\n  }, []);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    getHashbrown().updateOptions({\n      apiUrl: config.url,\n      middleware: config.middleware,\n      debugName: options.debugName,\n      model: options.model,\n      system: options.system,\n      tools,\n      debounce: options.debounceTime,\n      retries: options.retries\n    });\n  }, [config.url, config.middleware, options.debounceTime, options.debugName, options.model, options.retries, options.system, tools]);\n  const internalMessages = useHashbrownSignal(getHashbrown().messages);\n  const isReceiving = useHashbrownSignal(getHashbrown().isReceiving);\n  const isSending = useHashbrownSignal(getHashbrown().isSending);\n  const isRunningToolCalls = useHashbrownSignal(getHashbrown().isRunningToolCalls);\n  const exhaustedRetries = useHashbrownSignal(getHashbrown().exhaustedRetries);\n  const error = useHashbrownSignal(getHashbrown().error);\n  const lastAssistantMessage = useHashbrownSignal(getHashbrown().lastAssistantMessage);\n  const sendMessage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(message => {\n    getHashbrown().sendMessage(message);\n  }, []);\n  const setMessages = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(messages => {\n    getHashbrown().setMessages(messages);\n  }, []);\n  const reload = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {\n    const lastMessage = internalMessages[internalMessages.length - 1];\n    if (lastMessage.role === 'assistant') {\n      getHashbrown().setMessages(internalMessages.slice(0, -1));\n      return true;\n    }\n    return false;\n  }, [internalMessages]);\n  const stop = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((clearStreamingMessage = false) => {\n    getHashbrown().stop(clearStreamingMessage);\n  }, []);\n  return {\n    messages: internalMessages,\n    sendMessage,\n    setMessages,\n    stop,\n    reload,\n    error,\n    isReceiving,\n    isSending,\n    isRunningToolCalls,\n    exhaustedRetries,\n    lastAssistantMessage\n  };\n}\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\r\n\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\n/**\n * This React hook creates a change instance used to interact with the LLM.\n * The result object contains functions and state enabling you to send and recieve messages and monitor the state of the chat.\n *\n * @public\n * @remarks\n * The `useCompletion` hook provides functionality for completing unstructured inputs with predicted unstructured outputs.  This is useful for things like natural language autocompletions.\n *\n * @example\n * ```ts\n * const { output } = useCompletion({\n *   model: 'gpt-4o-mini',\n *   input: firstName,\n *   system: `Help the user generate a last name for the given first name.`,\n * });\n * ```\n */\nfunction useCompletion(\n/**\n * The options to configure the completion chat.\n */\noptions) {\n  const _a = useChat(Object.assign({}, options)),\n    {\n      setMessages\n    } = _a,\n    chat = __rest(_a, [\"setMessages\"]);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    if (!options.input) return;\n    setMessages([{\n      role: 'user',\n      content: options.input\n    }]);\n  }, [setMessages, options.input]);\n  const output = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    const message = chat.messages.find(message => message.role === 'assistant' && !(message.toolCalls && message.toolCalls.length) && message.content);\n    if (!message) return null;\n    if (typeof message.content !== 'string') return null;\n    return message.content;\n  }, [chat.messages]);\n  return {\n    output,\n    reload: chat.reload,\n    error: chat.error,\n    isReceiving: chat.isReceiving,\n    isSending: chat.isSending,\n    isRunningToolCalls: chat.isRunningToolCalls,\n    exhaustedRetries: chat.exhaustedRetries\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Creates a new runtime.\n *\n * @param options - The options for creating the runtime.\n * @returns A reference to the runtime.\n *\n * @public\n */\nfunction useRuntime(options) {\n  var _a;\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const functions = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => options.functions, (_a = options.functions) !== null && _a !== void 0 ? _a : []);\n  const runtime = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => (0,_hashbrownai_core__WEBPACK_IMPORTED_MODULE_2__[\"ɵcreateRuntimeImpl\"])({\n    functions,\n    timeout: options.timeout\n  }), [functions, options.timeout]);\n  return runtime;\n}\n\n/* eslint-disable no-redeclare */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * @public\n */\nfunction useRuntimeFunction(cfg) {\n  const argsSchemaRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)('args' in cfg ? cfg.args : undefined);\n  const resultSchemaRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)('result' in cfg ? cfg.result : undefined);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const handler = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(cfg.handler, cfg.deps);\n  const fn = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    return (0,_hashbrownai_core__WEBPACK_IMPORTED_MODULE_2__[\"ɵcreateRuntimeFunctionImpl\"])({\n      args: argsSchemaRef.current,\n      result: resultSchemaRef.current,\n      handler,\n      name: cfg.name,\n      description: cfg.description\n    });\n  }, [handler, cfg.name, cfg.description]);\n  return fn;\n}\n\n/**\n * This React hook creates a chat instance used to interact with the LLM.\n * The result object contains functions and state enabling you to send and receive messages and monitor the state of the chat.\n *\n * @public\n * @remarks\n * The `useStructuredChat` hook provides functionality for structured chats. Structured chats are used when you want to use the LLM to generate structured data according to a defined schema. This is particularly useful for:\n * - Generating typed data structures\n * - Creating form responses\n * - Building UI components\n * - Extracting information into a specific format\n *\n * @returns An object containing chat state and functions to interact with the chat.\n *\n * @example\n * In this example, the LLM will respond with a JSON object containing the translations of the input message into English, Spanish, and French.\n * ```tsx\n * const { messages, sendMessage } = useStructuredChat({\n *   model: 'gpt-4o',\n *   system: 'You are a helpful translator that provides accurate translations.',\n *   schema: s.object('Translations', {\n *     english: s.string('English translation'),\n *     spanish: s.string('Spanish translation'),\n *     french: s.string('French translation')\n *   }),\n * });\n * ```\n */\nfunction useStructuredChat(options) {\n  var _a;\n  const config = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(HashbrownContext);\n  if (!config) {\n    throw new Error('HashbrownContext not found');\n  }\n  const tools = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    var _a;\n    return (_a = options.tools) !== null && _a !== void 0 ? _a : [];\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  (_a = options.tools) !== null && _a !== void 0 ? _a : []);\n  const [schema] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(options.schema);\n  const hashbrown = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n  if (!hashbrown.current) {\n    hashbrown.current = (0,_hashbrownai_core__WEBPACK_IMPORTED_MODULE_2__.fryHashbrown)({\n      apiUrl: config.url,\n      middleware: config.middleware,\n      model: options.model,\n      system: options.system,\n      responseSchema: schema,\n      tools,\n      debugName: options.debugName,\n      debounce: options.debounceTime,\n      retries: options.retries\n    });\n  }\n  function getHashbrown() {\n    const instance = hashbrown.current;\n    if (!instance) {\n      throw new Error('Hashbrown not found');\n    }\n    return instance;\n  }\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    return getHashbrown().sizzle();\n  }, []);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    getHashbrown().updateOptions({\n      apiUrl: config.url,\n      middleware: config.middleware,\n      model: options.model,\n      system: options.system,\n      responseSchema: schema,\n      tools,\n      debugName: options.debugName,\n      debounce: options.debounceTime,\n      retries: options.retries\n    });\n  }, [config.url, config.middleware, options.model, options.system, options.debugName, schema, tools, options.debounceTime, options.retries]);\n  const internalMessages = useHashbrownSignal(hashbrown.current.messages);\n  const isReceiving = useHashbrownSignal(hashbrown.current.isReceiving);\n  const isSending = useHashbrownSignal(hashbrown.current.isSending);\n  const isRunningToolCalls = useHashbrownSignal(hashbrown.current.isRunningToolCalls);\n  const exhaustedRetries = useHashbrownSignal(hashbrown.current.exhaustedRetries);\n  const error = useHashbrownSignal(hashbrown.current.error);\n  const lastAssistantMessage = useHashbrownSignal(hashbrown.current.lastAssistantMessage);\n  const sendMessage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(message => {\n    getHashbrown().sendMessage(message);\n  }, []);\n  const stop = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((clearStreamingMessage = false) => {\n    getHashbrown().stop(clearStreamingMessage);\n  }, []);\n  const resendMessages = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {\n    getHashbrown().resendMessages();\n  }, []);\n  const setMessages = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(messages => {\n    getHashbrown().setMessages(messages);\n  }, []);\n  const reload = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {\n    const lastMessage = internalMessages[internalMessages.length - 1];\n    if (lastMessage.role === 'assistant') {\n      getHashbrown().setMessages(internalMessages.slice(0, -1));\n      return true;\n    }\n    return false;\n  }, [internalMessages]);\n  return {\n    messages: internalMessages,\n    stop,\n    sendMessage,\n    resendMessages,\n    setMessages,\n    reload,\n    error,\n    isReceiving,\n    isSending,\n    isRunningToolCalls,\n    exhaustedRetries,\n    lastAssistantMessage\n  };\n}\n\n/**\n * This React hook creates a completion instance that predicts structured data based on input context.\n * The result object contains the predicted structured output and state for monitoring the completion.\n *\n * @public\n * @typeParam Input - The type of the input to predict from.\n * @typeParam Schema - The schema to use for the chat.\n * @remarks\n * The `useStructuredCompletion` hook provides functionality for predicting structured data based on input context. This is particularly useful for:\n * - Smart form field suggestions\n * - Context-aware recommendations\n * - Predictive UI generation\n * - Intelligent defaults\n *\n * @returns An object containing the predicted structured output and completion state.\n *\n * @example\n * In this example, the LLM will predict a color palette based on a given theme or mood.\n * ```tsx\n * const { output } = useStructuredCompletion({\n *   model: 'gpt-4o',\n *   system: `Predict a color palette based on the given mood or theme. For example,\n *   if the theme is \"Calm Ocean\", suggest appropriate colors.`,\n *   input: theme,\n *   schema: s.object('Color Palette', {\n *     colors: s.array(\n *       'The colors in the palette',\n *       s.string('Hex color code')\n *     )\n *   })\n * });\n * ```\n */\nfunction useStructuredCompletion(options) {\n  const _a = useStructuredChat(Object.assign({}, options)),\n    {\n      setMessages\n    } = _a,\n    chat = __rest(_a, [\"setMessages\"]);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    if (!options.input) return;\n    setMessages([{\n      role: 'user',\n      content: options.input\n    }]);\n  }, [setMessages, options.input]);\n  const output = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    const message = chat.messages.find(message => message.role === 'assistant' && message.content);\n    if (!message) return null;\n    return message.content;\n  }, [chat.messages]);\n  return {\n    output,\n    reload: chat.reload,\n    error: chat.error,\n    isReceiving: chat.isReceiving,\n    isSending: chat.isSending,\n    isRunningToolCalls: chat.isRunningToolCalls,\n    exhaustedRetries: chat.exhaustedRetries\n  };\n}\n\n/* eslint no-redeclare: off */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * @public\n */\nfunction useTool(input) {\n  const {\n    name,\n    description,\n    handler,\n    deps\n  } = input;\n  // assumes the schema will never change\n  const [schema] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('schema' in input ? input.schema : _hashbrownai_core__WEBPACK_IMPORTED_MODULE_2__.s.object('Empty schema', {}));\n  // assumes the handler should only change if its deps change,\n  //   which enables the use of anonymous functions in the handler.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const stableHandler = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(handler, deps);\n  const tool = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    return {\n      name,\n      description,\n      schema,\n      handler: stableHandler\n    };\n  }, [name, description, schema, stableHandler]);\n  return tool;\n}\n\n/**\n * Creates a tool that allows the LLM to run JavaScript code. It is run\n * in a stateful JavaScript environment, with no access to the internet, the DOM,\n * or any function that you have not explicitly defined.\n *\n * @public\n * @param options - The options for creating the tool.\n * @returns The tool.\n */\nfunction useToolJavaScript({\n  runtime\n}) {\n  return useTool({\n    name: 'javascript',\n    description: ['Whenever you send a message containing JavaScript code to javascript, it will be', 'executed in a stateful JavaScript environment. javascript will respond with the output', `of the execution or time out after ${runtime.timeout / 1000} seconds. Internet access`, 'for this session is disabled. Do not make external web requests or API calls as they', 'will fail.', '', 'Important: Prefer calling javascript once with a large amount of code, rather than calling it', 'multiple times with smaller amounts of code.', '', 'The following functions are available to you:', runtime.describe()].join('\\n'),\n    schema: _hashbrownai_core__WEBPACK_IMPORTED_MODULE_2__.s.streaming.object('The result', {\n      code: _hashbrownai_core__WEBPACK_IMPORTED_MODULE_2__.s.streaming.string('The JavaScript code to run')\n    }),\n    deps: [runtime],\n    handler: (_a, abortSignal_1) => __awaiter(this, [_a, abortSignal_1], void 0, function* ({\n      code\n    }, abortSignal) {\n      return runtime.run(code, abortSignal);\n    })\n  });\n}\n\n/**\n * This React hook creates a chat instance that can generate and render UI components.\n * The result object contains functions and state enabling you to send and receive messages and monitor the state of the chat.\n *\n * @public\n * @typeParam Tools - The set of tool definitions available to the chat.\n * @remarks\n * The `useUiChat` hook provides functionality for generating UI components through chat. This is particularly useful for:\n * - Dynamic UI generation\n * - Interactive chat interfaces\n * - Component-based responses\n * - Building chat-based UIs\n *\n * @returns An object containing chat state, functions to interact with the chat, and rendered UI components.\n *\n * @example\n * In this example, the LLM will respond with a UI component that can be rendered directly in your React application.\n * ```tsx\n * const { messages, sendMessage } = useUiChat({\n *   model: 'gpt-4o',\n *   system: 'You are a helpful assistant that can generate UI components.',\n *   components: [\n *     exposeComponent(Button, {\n *       name: 'Button',\n *       description: 'A clickable button component',\n *       props: {\n *         label: s.string('The text to display on the button'),\n *         onClick: s.function('Function to call when clicked')\n *       }\n *     })\n *   ]\n * });\n * ```\n */\nconst useUiChat = options => {\n  const {\n      components: initialComponents\n    } = options,\n    chatOptions = __rest(options, [\"components\"]);\n  const [components, setComponents] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(initialComponents);\n  const [flattenedComponents] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(_hashbrownai_core__WEBPACK_IMPORTED_MODULE_2__[\"ɵui\"].flattenComponents(initialComponents));\n  const ui = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    return _hashbrownai_core__WEBPACK_IMPORTED_MODULE_2__.s.object('UI', {\n      ui: _hashbrownai_core__WEBPACK_IMPORTED_MODULE_2__.s.streaming.array('List of elements', _hashbrownai_core__WEBPACK_IMPORTED_MODULE_2__[\"ɵui\"].createComponentSchema(components))\n    });\n  }, [components]);\n  const systemAsString = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    if (typeof chatOptions.system === 'string') {\n      return chatOptions.system;\n    }\n    const output = chatOptions.system.compile(components, ui);\n    if (chatOptions.system.diagnostics.length > 0) {\n      throw new Error(`System prompt has ${chatOptions.system.diagnostics.length} errors: \\n\\n${chatOptions.system.diagnostics.map(d => d.message).join('\\n\\n')}`);\n    }\n    return output;\n  }, [chatOptions.system, components, ui]);\n  const chat = useStructuredChat(Object.assign(Object.assign({}, chatOptions), {\n    schema: ui,\n    system: systemAsString\n  }));\n  const buildContent = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((nodes, parentKey = '') => {\n    if (typeof nodes === 'string') {\n      return nodes;\n    }\n    const elements = nodes.map((element, index) => {\n      var _a;\n      const key = `${parentKey}_${index}`;\n      const {\n        $tag,\n        $children,\n        $props\n      } = element;\n      const componentType = (_a = flattenedComponents.get($tag)) === null || _a === void 0 ? void 0 : _a.component;\n      if ($tag && componentType) {\n        const children = element.$children ? buildContent($children, key) : null;\n        return /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(componentType, Object.assign(Object.assign({}, $props), {\n          children,\n          key\n        }));\n      }\n      throw new Error(`Unknown element type. ${$tag}`);\n    });\n    return elements;\n  }, [flattenedComponents]);\n  const uiChatMessages = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    return chat.messages.map(message => {\n      var _a;\n      if (message.role === 'assistant') {\n        return Object.assign(Object.assign({}, message), {\n          ui: ((_a = message.content) === null || _a === void 0 ? void 0 : _a.ui) ? buildContent(message.content.ui) : null\n        });\n      }\n      return message;\n    });\n  }, [buildContent, chat.messages]);\n  const lastAssistantMessage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    return uiChatMessages.findLast(message => message.role === 'assistant');\n  }, [uiChatMessages]);\n  return Object.assign(Object.assign({}, chat), {\n    messages: uiChatMessages,\n    setComponents,\n    lastAssistantMessage\n  });\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@hashbrownai+react@0.3.0_@hashbrownai+core@0.3.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@hashbrownai/react/index.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/clsx@2.1.1/node_modules/clsx/dist/clsx.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/.pnpm/clsx@2.1.1/node_modules/clsx/dist/clsx.mjs ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clsx: function() { return /* binding */ clsx; }\n/* harmony export */ });\nfunction r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f)}else for(f in e)e[f]&&(n&&(n+=\" \"),n+=f);return n}function clsx(){for(var e,t,f=0,n=\"\",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}/* harmony default export */ __webpack_exports__[\"default\"] = (clsx);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jbHN4QDIuMS4xL25vZGVfbW9kdWxlcy9jbHN4L2Rpc3QvY2xzeC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGNBQWMsYUFBYSwrQ0FBK0MsZ0RBQWdELGVBQWUsUUFBUSxJQUFJLDBDQUEwQyx5Q0FBeUMsU0FBZ0IsZ0JBQWdCLHdDQUF3QyxJQUFJLG1EQUFtRCxTQUFTLCtEQUFlLElBQUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2Nsc3hAMi4xLjEvbm9kZV9tb2R1bGVzL2Nsc3gvZGlzdC9jbHN4Lm1qcz9kMDY4Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHIoZSl7dmFyIHQsZixuPVwiXCI7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGV8fFwibnVtYmVyXCI9PXR5cGVvZiBlKW4rPWU7ZWxzZSBpZihcIm9iamVjdFwiPT10eXBlb2YgZSlpZihBcnJheS5pc0FycmF5KGUpKXt2YXIgbz1lLmxlbmd0aDtmb3IodD0wO3Q8bzt0KyspZVt0XSYmKGY9cihlW3RdKSkmJihuJiYobis9XCIgXCIpLG4rPWYpfWVsc2UgZm9yKGYgaW4gZSllW2ZdJiYobiYmKG4rPVwiIFwiKSxuKz1mKTtyZXR1cm4gbn1leHBvcnQgZnVuY3Rpb24gY2xzeCgpe2Zvcih2YXIgZSx0LGY9MCxuPVwiXCIsbz1hcmd1bWVudHMubGVuZ3RoO2Y8bztmKyspKGU9YXJndW1lbnRzW2ZdKSYmKHQ9cihlKSkmJihuJiYobis9XCIgXCIpLG4rPXQpO3JldHVybiBufWV4cG9ydCBkZWZhdWx0IGNsc3g7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/clsx@2.1.1/node_modules/clsx/dist/clsx.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/ZodError.js":
/*!************************************************************************!*\
  !*** ./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/ZodError.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ZodError: function() { return /* binding */ ZodError; },\n/* harmony export */   ZodIssueCode: function() { return /* binding */ ZodIssueCode; },\n/* harmony export */   quotelessJson: function() { return /* binding */ quotelessJson; }\n/* harmony export */ });\n/* harmony import */ var _helpers_util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers/util.js */ \"(app-pages-browser)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/helpers/util.js\");\n\nconst ZodIssueCode = _helpers_util_js__WEBPACK_IMPORTED_MODULE_0__.util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nconst quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    get errors() {\n        return this.issues;\n    }\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    static assert(value) {\n        if (!(value instanceof ZodError)) {\n            throw new Error(`Not a ZodError: ${value}`);\n        }\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, _helpers_util_js__WEBPACK_IMPORTED_MODULE_0__.util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                const firstEl = sub.path[0];\n                fieldErrors[firstEl] = fieldErrors[firstEl] || [];\n                fieldErrors[firstEl].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS96b2RAMy4yNS43Ni9ub2RlX21vZHVsZXMvem9kL3YzL1pvZEVycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBeUM7QUFDbEMscUJBQXFCLGtEQUFJO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFEO0FBQ3JEO0FBQ0EsMERBQTBEO0FBQzFELGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsTUFBTTtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsa0RBQUk7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3pvZEAzLjI1Ljc2L25vZGVfbW9kdWxlcy96b2QvdjMvWm9kRXJyb3IuanM/NmZmNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1dGlsIH0gZnJvbSBcIi4vaGVscGVycy91dGlsLmpzXCI7XG5leHBvcnQgY29uc3QgWm9kSXNzdWVDb2RlID0gdXRpbC5hcnJheVRvRW51bShbXG4gICAgXCJpbnZhbGlkX3R5cGVcIixcbiAgICBcImludmFsaWRfbGl0ZXJhbFwiLFxuICAgIFwiY3VzdG9tXCIsXG4gICAgXCJpbnZhbGlkX3VuaW9uXCIsXG4gICAgXCJpbnZhbGlkX3VuaW9uX2Rpc2NyaW1pbmF0b3JcIixcbiAgICBcImludmFsaWRfZW51bV92YWx1ZVwiLFxuICAgIFwidW5yZWNvZ25pemVkX2tleXNcIixcbiAgICBcImludmFsaWRfYXJndW1lbnRzXCIsXG4gICAgXCJpbnZhbGlkX3JldHVybl90eXBlXCIsXG4gICAgXCJpbnZhbGlkX2RhdGVcIixcbiAgICBcImludmFsaWRfc3RyaW5nXCIsXG4gICAgXCJ0b29fc21hbGxcIixcbiAgICBcInRvb19iaWdcIixcbiAgICBcImludmFsaWRfaW50ZXJzZWN0aW9uX3R5cGVzXCIsXG4gICAgXCJub3RfbXVsdGlwbGVfb2ZcIixcbiAgICBcIm5vdF9maW5pdGVcIixcbl0pO1xuZXhwb3J0IGNvbnN0IHF1b3RlbGVzc0pzb24gPSAob2JqKSA9PiB7XG4gICAgY29uc3QganNvbiA9IEpTT04uc3RyaW5naWZ5KG9iaiwgbnVsbCwgMik7XG4gICAgcmV0dXJuIGpzb24ucmVwbGFjZSgvXCIoW15cIl0rKVwiOi9nLCBcIiQxOlwiKTtcbn07XG5leHBvcnQgY2xhc3MgWm9kRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgZ2V0IGVycm9ycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNzdWVzO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihpc3N1ZXMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5pc3N1ZXMgPSBbXTtcbiAgICAgICAgdGhpcy5hZGRJc3N1ZSA9IChzdWIpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaXNzdWVzID0gWy4uLnRoaXMuaXNzdWVzLCBzdWJdO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFkZElzc3VlcyA9IChzdWJzID0gW10pID0+IHtcbiAgICAgICAgICAgIHRoaXMuaXNzdWVzID0gWy4uLnRoaXMuaXNzdWVzLCAuLi5zdWJzXTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgYWN0dWFsUHJvdG8gPSBuZXcudGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGJhbi9iYW5cbiAgICAgICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBhY3R1YWxQcm90byk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9fcHJvdG9fXyA9IGFjdHVhbFByb3RvO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubmFtZSA9IFwiWm9kRXJyb3JcIjtcbiAgICAgICAgdGhpcy5pc3N1ZXMgPSBpc3N1ZXM7XG4gICAgfVxuICAgIGZvcm1hdChfbWFwcGVyKSB7XG4gICAgICAgIGNvbnN0IG1hcHBlciA9IF9tYXBwZXIgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChpc3N1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc3N1ZS5tZXNzYWdlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZmllbGRFcnJvcnMgPSB7IF9lcnJvcnM6IFtdIH07XG4gICAgICAgIGNvbnN0IHByb2Nlc3NFcnJvciA9IChlcnJvcikgPT4ge1xuICAgICAgICAgICAgZm9yIChjb25zdCBpc3N1ZSBvZiBlcnJvci5pc3N1ZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNzdWUuY29kZSA9PT0gXCJpbnZhbGlkX3VuaW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNzdWUudW5pb25FcnJvcnMubWFwKHByb2Nlc3NFcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLmNvZGUgPT09IFwiaW52YWxpZF9yZXR1cm5fdHlwZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NFcnJvcihpc3N1ZS5yZXR1cm5UeXBlRXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc3N1ZS5jb2RlID09PSBcImludmFsaWRfYXJndW1lbnRzXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0Vycm9yKGlzc3VlLmFyZ3VtZW50c0Vycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNzdWUucGF0aC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGRFcnJvcnMuX2Vycm9ycy5wdXNoKG1hcHBlcihpc3N1ZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnIgPSBmaWVsZEVycm9ycztcbiAgICAgICAgICAgICAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaSA8IGlzc3VlLnBhdGgubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbCA9IGlzc3VlLnBhdGhbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXJtaW5hbCA9IGkgPT09IGlzc3VlLnBhdGgubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGVybWluYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyW2VsXSA9IGN1cnJbZWxdIHx8IHsgX2Vycm9yczogW10gfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiAodHlwZW9mIGVsID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBjdXJyW2VsXSA9IGN1cnJbZWxdIHx8IHsgX2Vycm9yczogW10gfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB9IGVsc2UgaWYgKHR5cGVvZiBlbCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgY29uc3QgZXJyb3JBcnJheTogYW55ID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBlcnJvckFycmF5Ll9lcnJvcnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGN1cnJbZWxdID0gY3VycltlbF0gfHwgZXJyb3JBcnJheTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyW2VsXSA9IGN1cnJbZWxdIHx8IHsgX2Vycm9yczogW10gfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyW2VsXS5fZXJyb3JzLnB1c2gobWFwcGVyKGlzc3VlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyID0gY3VycltlbF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHByb2Nlc3NFcnJvcih0aGlzKTtcbiAgICAgICAgcmV0dXJuIGZpZWxkRXJyb3JzO1xuICAgIH1cbiAgICBzdGF0aWMgYXNzZXJ0KHZhbHVlKSB7XG4gICAgICAgIGlmICghKHZhbHVlIGluc3RhbmNlb2YgWm9kRXJyb3IpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vdCBhIFpvZEVycm9yOiAke3ZhbHVlfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlO1xuICAgIH1cbiAgICBnZXQgbWVzc2FnZSgpIHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMuaXNzdWVzLCB1dGlsLmpzb25TdHJpbmdpZnlSZXBsYWNlciwgMik7XG4gICAgfVxuICAgIGdldCBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc3N1ZXMubGVuZ3RoID09PSAwO1xuICAgIH1cbiAgICBmbGF0dGVuKG1hcHBlciA9IChpc3N1ZSkgPT4gaXNzdWUubWVzc2FnZSkge1xuICAgICAgICBjb25zdCBmaWVsZEVycm9ycyA9IHt9O1xuICAgICAgICBjb25zdCBmb3JtRXJyb3JzID0gW107XG4gICAgICAgIGZvciAoY29uc3Qgc3ViIG9mIHRoaXMuaXNzdWVzKSB7XG4gICAgICAgICAgICBpZiAoc3ViLnBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0RWwgPSBzdWIucGF0aFswXTtcbiAgICAgICAgICAgICAgICBmaWVsZEVycm9yc1tmaXJzdEVsXSA9IGZpZWxkRXJyb3JzW2ZpcnN0RWxdIHx8IFtdO1xuICAgICAgICAgICAgICAgIGZpZWxkRXJyb3JzW2ZpcnN0RWxdLnB1c2gobWFwcGVyKHN1YikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9ybUVycm9ycy5wdXNoKG1hcHBlcihzdWIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBmb3JtRXJyb3JzLCBmaWVsZEVycm9ycyB9O1xuICAgIH1cbiAgICBnZXQgZm9ybUVycm9ycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmxhdHRlbigpO1xuICAgIH1cbn1cblpvZEVycm9yLmNyZWF0ZSA9IChpc3N1ZXMpID0+IHtcbiAgICBjb25zdCBlcnJvciA9IG5ldyBab2RFcnJvcihpc3N1ZXMpO1xuICAgIHJldHVybiBlcnJvcjtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/ZodError.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/errors.js":
/*!**********************************************************************!*\
  !*** ./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/errors.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultErrorMap: function() { return /* reexport safe */ _locales_en_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; },\n/* harmony export */   getErrorMap: function() { return /* binding */ getErrorMap; },\n/* harmony export */   setErrorMap: function() { return /* binding */ setErrorMap; }\n/* harmony export */ });\n/* harmony import */ var _locales_en_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./locales/en.js */ \"(app-pages-browser)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/locales/en.js\");\n\nlet overrideErrorMap = _locales_en_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS96b2RAMy4yNS43Ni9ub2RlX21vZHVsZXMvem9kL3YzL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQThDO0FBQzlDLHVCQUF1QixzREFBZTtBQUNYO0FBQ3BCO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vem9kQDMuMjUuNzYvbm9kZV9tb2R1bGVzL3pvZC92My9lcnJvcnMuanM/OGJhMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVmYXVsdEVycm9yTWFwIGZyb20gXCIuL2xvY2FsZXMvZW4uanNcIjtcbmxldCBvdmVycmlkZUVycm9yTWFwID0gZGVmYXVsdEVycm9yTWFwO1xuZXhwb3J0IHsgZGVmYXVsdEVycm9yTWFwIH07XG5leHBvcnQgZnVuY3Rpb24gc2V0RXJyb3JNYXAobWFwKSB7XG4gICAgb3ZlcnJpZGVFcnJvck1hcCA9IG1hcDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRFcnJvck1hcCgpIHtcbiAgICByZXR1cm4gb3ZlcnJpZGVFcnJvck1hcDtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/errors.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/helpers/errorUtil.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/helpers/errorUtil.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   errorUtil: function() { return /* binding */ errorUtil; }\n/* harmony export */ });\nvar errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    // biome-ignore lint:\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message?.message;\n})(errorUtil || (errorUtil = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS96b2RAMy4yNS43Ni9ub2RlX21vZHVsZXMvem9kL3YzL2hlbHBlcnMvZXJyb3JVdGlsLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTztBQUNQO0FBQ0Esc0VBQXNFLFVBQVU7QUFDaEY7QUFDQTtBQUNBLENBQUMsOEJBQThCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS96b2RAMy4yNS43Ni9ub2RlX21vZHVsZXMvem9kL3YzL2hlbHBlcnMvZXJyb3JVdGlsLmpzPzEzZmMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBlcnJvclV0aWw7XG4oZnVuY3Rpb24gKGVycm9yVXRpbCkge1xuICAgIGVycm9yVXRpbC5lcnJUb09iaiA9IChtZXNzYWdlKSA9PiB0eXBlb2YgbWVzc2FnZSA9PT0gXCJzdHJpbmdcIiA/IHsgbWVzc2FnZSB9IDogbWVzc2FnZSB8fCB7fTtcbiAgICAvLyBiaW9tZS1pZ25vcmUgbGludDpcbiAgICBlcnJvclV0aWwudG9TdHJpbmcgPSAobWVzc2FnZSkgPT4gdHlwZW9mIG1lc3NhZ2UgPT09IFwic3RyaW5nXCIgPyBtZXNzYWdlIDogbWVzc2FnZT8ubWVzc2FnZTtcbn0pKGVycm9yVXRpbCB8fCAoZXJyb3JVdGlsID0ge30pKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/helpers/errorUtil.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/helpers/parseUtil.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/helpers/parseUtil.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DIRTY: function() { return /* binding */ DIRTY; },\n/* harmony export */   EMPTY_PATH: function() { return /* binding */ EMPTY_PATH; },\n/* harmony export */   INVALID: function() { return /* binding */ INVALID; },\n/* harmony export */   OK: function() { return /* binding */ OK; },\n/* harmony export */   ParseStatus: function() { return /* binding */ ParseStatus; },\n/* harmony export */   addIssueToContext: function() { return /* binding */ addIssueToContext; },\n/* harmony export */   isAborted: function() { return /* binding */ isAborted; },\n/* harmony export */   isAsync: function() { return /* binding */ isAsync; },\n/* harmony export */   isDirty: function() { return /* binding */ isDirty; },\n/* harmony export */   isValid: function() { return /* binding */ isValid; },\n/* harmony export */   makeIssue: function() { return /* binding */ makeIssue; }\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors.js */ \"(app-pages-browser)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/errors.js\");\n/* harmony import */ var _locales_en_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../locales/en.js */ \"(app-pages-browser)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/locales/en.js\");\n\n\nconst makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    if (issueData.message !== undefined) {\n        return {\n            ...issueData,\n            path: fullPath,\n            message: issueData.message,\n        };\n    }\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: errorMessage,\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const overrideMap = (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.getErrorMap)();\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap, // contextual error map is first priority\n            ctx.schemaErrorMap, // then schema-bound map if available\n            overrideMap, // then global override map\n            overrideMap === _locales_en_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] ? undefined : _locales_en_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], // then global default map\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            const key = await pair.key;\n            const value = await pair.value;\n            syncPairs.push({\n                key,\n                value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (key.value !== \"__proto__\" && (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\",\n});\nconst DIRTY = (value) => ({ status: \"dirty\", value });\nconst OK = (value) => ({ status: \"valid\", value });\nconst isAborted = (x) => x.status === \"aborted\";\nconst isDirty = (x) => x.status === \"dirty\";\nconst isValid = (x) => x.status === \"valid\";\nconst isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS96b2RAMy4yNS43Ni9ub2RlX21vZHVsZXMvem9kL3YzL2hlbHBlcnMvcGFyc2VVdGlsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBMkM7QUFDSTtBQUN4QztBQUNQLFlBQVksbUNBQW1DO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxrQ0FBa0M7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNBO0FBQ1Asd0JBQXdCLHVEQUFXO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsc0RBQWUsZUFBZSxzREFBZTtBQUN6RTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsYUFBYTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNPO0FBQ1A7QUFDQSxDQUFDO0FBQ00sNEJBQTRCLHdCQUF3QjtBQUNwRCx5QkFBeUIsd0JBQXdCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS96b2RAMy4yNS43Ni9ub2RlX21vZHVsZXMvem9kL3YzL2hlbHBlcnMvcGFyc2VVdGlsLmpzPzgxODkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0RXJyb3JNYXAgfSBmcm9tIFwiLi4vZXJyb3JzLmpzXCI7XG5pbXBvcnQgZGVmYXVsdEVycm9yTWFwIGZyb20gXCIuLi9sb2NhbGVzL2VuLmpzXCI7XG5leHBvcnQgY29uc3QgbWFrZUlzc3VlID0gKHBhcmFtcykgPT4ge1xuICAgIGNvbnN0IHsgZGF0YSwgcGF0aCwgZXJyb3JNYXBzLCBpc3N1ZURhdGEgfSA9IHBhcmFtcztcbiAgICBjb25zdCBmdWxsUGF0aCA9IFsuLi5wYXRoLCAuLi4oaXNzdWVEYXRhLnBhdGggfHwgW10pXTtcbiAgICBjb25zdCBmdWxsSXNzdWUgPSB7XG4gICAgICAgIC4uLmlzc3VlRGF0YSxcbiAgICAgICAgcGF0aDogZnVsbFBhdGgsXG4gICAgfTtcbiAgICBpZiAoaXNzdWVEYXRhLm1lc3NhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uaXNzdWVEYXRhLFxuICAgICAgICAgICAgcGF0aDogZnVsbFBhdGgsXG4gICAgICAgICAgICBtZXNzYWdlOiBpc3N1ZURhdGEubWVzc2FnZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgbGV0IGVycm9yTWVzc2FnZSA9IFwiXCI7XG4gICAgY29uc3QgbWFwcyA9IGVycm9yTWFwc1xuICAgICAgICAuZmlsdGVyKChtKSA9PiAhIW0pXG4gICAgICAgIC5zbGljZSgpXG4gICAgICAgIC5yZXZlcnNlKCk7XG4gICAgZm9yIChjb25zdCBtYXAgb2YgbWFwcykge1xuICAgICAgICBlcnJvck1lc3NhZ2UgPSBtYXAoZnVsbElzc3VlLCB7IGRhdGEsIGRlZmF1bHRFcnJvcjogZXJyb3JNZXNzYWdlIH0pLm1lc3NhZ2U7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIC4uLmlzc3VlRGF0YSxcbiAgICAgICAgcGF0aDogZnVsbFBhdGgsXG4gICAgICAgIG1lc3NhZ2U6IGVycm9yTWVzc2FnZSxcbiAgICB9O1xufTtcbmV4cG9ydCBjb25zdCBFTVBUWV9QQVRIID0gW107XG5leHBvcnQgZnVuY3Rpb24gYWRkSXNzdWVUb0NvbnRleHQoY3R4LCBpc3N1ZURhdGEpIHtcbiAgICBjb25zdCBvdmVycmlkZU1hcCA9IGdldEVycm9yTWFwKCk7XG4gICAgY29uc3QgaXNzdWUgPSBtYWtlSXNzdWUoe1xuICAgICAgICBpc3N1ZURhdGE6IGlzc3VlRGF0YSxcbiAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICBlcnJvck1hcHM6IFtcbiAgICAgICAgICAgIGN0eC5jb21tb24uY29udGV4dHVhbEVycm9yTWFwLCAvLyBjb250ZXh0dWFsIGVycm9yIG1hcCBpcyBmaXJzdCBwcmlvcml0eVxuICAgICAgICAgICAgY3R4LnNjaGVtYUVycm9yTWFwLCAvLyB0aGVuIHNjaGVtYS1ib3VuZCBtYXAgaWYgYXZhaWxhYmxlXG4gICAgICAgICAgICBvdmVycmlkZU1hcCwgLy8gdGhlbiBnbG9iYWwgb3ZlcnJpZGUgbWFwXG4gICAgICAgICAgICBvdmVycmlkZU1hcCA9PT0gZGVmYXVsdEVycm9yTWFwID8gdW5kZWZpbmVkIDogZGVmYXVsdEVycm9yTWFwLCAvLyB0aGVuIGdsb2JhbCBkZWZhdWx0IG1hcFxuICAgICAgICBdLmZpbHRlcigoeCkgPT4gISF4KSxcbiAgICB9KTtcbiAgICBjdHguY29tbW9uLmlzc3Vlcy5wdXNoKGlzc3VlKTtcbn1cbmV4cG9ydCBjbGFzcyBQYXJzZVN0YXR1cyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSBcInZhbGlkXCI7XG4gICAgfVxuICAgIGRpcnR5KCkge1xuICAgICAgICBpZiAodGhpcy52YWx1ZSA9PT0gXCJ2YWxpZFwiKVxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IFwiZGlydHlcIjtcbiAgICB9XG4gICAgYWJvcnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlICE9PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBcImFib3J0ZWRcIjtcbiAgICB9XG4gICAgc3RhdGljIG1lcmdlQXJyYXkoc3RhdHVzLCByZXN1bHRzKSB7XG4gICAgICAgIGNvbnN0IGFycmF5VmFsdWUgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBzIG9mIHJlc3VsdHMpIHtcbiAgICAgICAgICAgIGlmIChzLnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICBpZiAocy5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgIGFycmF5VmFsdWUucHVzaChzLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGFycmF5VmFsdWUgfTtcbiAgICB9XG4gICAgc3RhdGljIGFzeW5jIG1lcmdlT2JqZWN0QXN5bmMoc3RhdHVzLCBwYWlycykge1xuICAgICAgICBjb25zdCBzeW5jUGFpcnMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBwYWlyIG9mIHBhaXJzKSB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBhd2FpdCBwYWlyLmtleTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgcGFpci52YWx1ZTtcbiAgICAgICAgICAgIHN5bmNQYWlycy5wdXNoKHtcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VPYmplY3RTeW5jKHN0YXR1cywgc3luY1BhaXJzKTtcbiAgICB9XG4gICAgc3RhdGljIG1lcmdlT2JqZWN0U3luYyhzdGF0dXMsIHBhaXJzKSB7XG4gICAgICAgIGNvbnN0IGZpbmFsT2JqZWN0ID0ge307XG4gICAgICAgIGZvciAoY29uc3QgcGFpciBvZiBwYWlycykge1xuICAgICAgICAgICAgY29uc3QgeyBrZXksIHZhbHVlIH0gPSBwYWlyO1xuICAgICAgICAgICAgaWYgKGtleS5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgaWYgKHZhbHVlLnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICBpZiAoa2V5LnN0YXR1cyA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgaWYgKHZhbHVlLnN0YXR1cyA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgaWYgKGtleS52YWx1ZSAhPT0gXCJfX3Byb3RvX19cIiAmJiAodHlwZW9mIHZhbHVlLnZhbHVlICE9PSBcInVuZGVmaW5lZFwiIHx8IHBhaXIuYWx3YXlzU2V0KSkge1xuICAgICAgICAgICAgICAgIGZpbmFsT2JqZWN0W2tleS52YWx1ZV0gPSB2YWx1ZS52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGZpbmFsT2JqZWN0IH07XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IElOVkFMSUQgPSBPYmplY3QuZnJlZXplKHtcbiAgICBzdGF0dXM6IFwiYWJvcnRlZFwiLFxufSk7XG5leHBvcnQgY29uc3QgRElSVFkgPSAodmFsdWUpID0+ICh7IHN0YXR1czogXCJkaXJ0eVwiLCB2YWx1ZSB9KTtcbmV4cG9ydCBjb25zdCBPSyA9ICh2YWx1ZSkgPT4gKHsgc3RhdHVzOiBcInZhbGlkXCIsIHZhbHVlIH0pO1xuZXhwb3J0IGNvbnN0IGlzQWJvcnRlZCA9ICh4KSA9PiB4LnN0YXR1cyA9PT0gXCJhYm9ydGVkXCI7XG5leHBvcnQgY29uc3QgaXNEaXJ0eSA9ICh4KSA9PiB4LnN0YXR1cyA9PT0gXCJkaXJ0eVwiO1xuZXhwb3J0IGNvbnN0IGlzVmFsaWQgPSAoeCkgPT4geC5zdGF0dXMgPT09IFwidmFsaWRcIjtcbmV4cG9ydCBjb25zdCBpc0FzeW5jID0gKHgpID0+IHR5cGVvZiBQcm9taXNlICE9PSBcInVuZGVmaW5lZFwiICYmIHggaW5zdGFuY2VvZiBQcm9taXNlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/helpers/parseUtil.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/helpers/util.js":
/*!****************************************************************************!*\
  !*** ./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/helpers/util.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ZodParsedType: function() { return /* binding */ ZodParsedType; },\n/* harmony export */   getParsedType: function() { return /* binding */ getParsedType; },\n/* harmony export */   objectUtil: function() { return /* binding */ objectUtil; },\n/* harmony export */   util: function() { return /* binding */ util; }\n/* harmony export */ });\nvar util;\n(function (util) {\n    util.assertEqual = (_) => { };\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && Number.isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array.map((val) => (typeof val === \"string\" ? `'${val}'` : val)).join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nvar objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second, // second overwrites first\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nconst getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return Number.isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then && typeof data.then === \"function\" && data.catch && typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS96b2RAMy4yNS43Ni9ub2RlX21vZHVsZXMvem9kL3YzL2hlbHBlcnMvdXRpbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBaUUsSUFBSTtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvQkFBb0I7QUFDZDtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxnQ0FBZ0M7QUFDMUI7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS96b2RAMy4yNS43Ni9ub2RlX21vZHVsZXMvem9kL3YzL2hlbHBlcnMvdXRpbC5qcz8xNTlmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgdXRpbDtcbihmdW5jdGlvbiAodXRpbCkge1xuICAgIHV0aWwuYXNzZXJ0RXF1YWwgPSAoXykgPT4geyB9O1xuICAgIGZ1bmN0aW9uIGFzc2VydElzKF9hcmcpIHsgfVxuICAgIHV0aWwuYXNzZXJ0SXMgPSBhc3NlcnRJcztcbiAgICBmdW5jdGlvbiBhc3NlcnROZXZlcihfeCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICB9XG4gICAgdXRpbC5hc3NlcnROZXZlciA9IGFzc2VydE5ldmVyO1xuICAgIHV0aWwuYXJyYXlUb0VudW0gPSAoaXRlbXMpID0+IHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgICAgICAgICAgb2JqW2l0ZW1dID0gaXRlbTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH07XG4gICAgdXRpbC5nZXRWYWxpZEVudW1WYWx1ZXMgPSAob2JqKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbGlkS2V5cyA9IHV0aWwub2JqZWN0S2V5cyhvYmopLmZpbHRlcigoaykgPT4gdHlwZW9mIG9ialtvYmpba11dICE9PSBcIm51bWJlclwiKTtcbiAgICAgICAgY29uc3QgZmlsdGVyZWQgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrIG9mIHZhbGlkS2V5cykge1xuICAgICAgICAgICAgZmlsdGVyZWRba10gPSBvYmpba107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHV0aWwub2JqZWN0VmFsdWVzKGZpbHRlcmVkKTtcbiAgICB9O1xuICAgIHV0aWwub2JqZWN0VmFsdWVzID0gKG9iaikgPT4ge1xuICAgICAgICByZXR1cm4gdXRpbC5vYmplY3RLZXlzKG9iaikubWFwKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqW2VdO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHV0aWwub2JqZWN0S2V5cyA9IHR5cGVvZiBPYmplY3Qua2V5cyA9PT0gXCJmdW5jdGlvblwiIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgYmFuL2JhblxuICAgICAgICA/IChvYmopID0+IE9iamVjdC5rZXlzKG9iaikgLy8gZXNsaW50LWRpc2FibGUtbGluZSBiYW4vYmFuXG4gICAgICAgIDogKG9iamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qga2V5cyA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGtleXM7XG4gICAgICAgIH07XG4gICAgdXRpbC5maW5kID0gKGFyciwgY2hlY2tlcikgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgYXJyKSB7XG4gICAgICAgICAgICBpZiAoY2hlY2tlcihpdGVtKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgdXRpbC5pc0ludGVnZXIgPSB0eXBlb2YgTnVtYmVyLmlzSW50ZWdlciA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgID8gKHZhbCkgPT4gTnVtYmVyLmlzSW50ZWdlcih2YWwpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgYmFuL2JhblxuICAgICAgICA6ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgJiYgTnVtYmVyLmlzRmluaXRlKHZhbCkgJiYgTWF0aC5mbG9vcih2YWwpID09PSB2YWw7XG4gICAgZnVuY3Rpb24gam9pblZhbHVlcyhhcnJheSwgc2VwYXJhdG9yID0gXCIgfCBcIikge1xuICAgICAgICByZXR1cm4gYXJyYXkubWFwKCh2YWwpID0+ICh0eXBlb2YgdmFsID09PSBcInN0cmluZ1wiID8gYCcke3ZhbH0nYCA6IHZhbCkpLmpvaW4oc2VwYXJhdG9yKTtcbiAgICB9XG4gICAgdXRpbC5qb2luVmFsdWVzID0gam9pblZhbHVlcztcbiAgICB1dGlsLmpzb25TdHJpbmdpZnlSZXBsYWNlciA9IChfLCB2YWx1ZSkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImJpZ2ludFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbn0pKHV0aWwgfHwgKHV0aWwgPSB7fSkpO1xuZXhwb3J0IHZhciBvYmplY3RVdGlsO1xuKGZ1bmN0aW9uIChvYmplY3RVdGlsKSB7XG4gICAgb2JqZWN0VXRpbC5tZXJnZVNoYXBlcyA9IChmaXJzdCwgc2Vjb25kKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5maXJzdCxcbiAgICAgICAgICAgIC4uLnNlY29uZCwgLy8gc2Vjb25kIG92ZXJ3cml0ZXMgZmlyc3RcbiAgICAgICAgfTtcbiAgICB9O1xufSkob2JqZWN0VXRpbCB8fCAob2JqZWN0VXRpbCA9IHt9KSk7XG5leHBvcnQgY29uc3QgWm9kUGFyc2VkVHlwZSA9IHV0aWwuYXJyYXlUb0VudW0oW1xuICAgIFwic3RyaW5nXCIsXG4gICAgXCJuYW5cIixcbiAgICBcIm51bWJlclwiLFxuICAgIFwiaW50ZWdlclwiLFxuICAgIFwiZmxvYXRcIixcbiAgICBcImJvb2xlYW5cIixcbiAgICBcImRhdGVcIixcbiAgICBcImJpZ2ludFwiLFxuICAgIFwic3ltYm9sXCIsXG4gICAgXCJmdW5jdGlvblwiLFxuICAgIFwidW5kZWZpbmVkXCIsXG4gICAgXCJudWxsXCIsXG4gICAgXCJhcnJheVwiLFxuICAgIFwib2JqZWN0XCIsXG4gICAgXCJ1bmtub3duXCIsXG4gICAgXCJwcm9taXNlXCIsXG4gICAgXCJ2b2lkXCIsXG4gICAgXCJuZXZlclwiLFxuICAgIFwibWFwXCIsXG4gICAgXCJzZXRcIixcbl0pO1xuZXhwb3J0IGNvbnN0IGdldFBhcnNlZFR5cGUgPSAoZGF0YSkgPT4ge1xuICAgIGNvbnN0IHQgPSB0eXBlb2YgZGF0YTtcbiAgICBzd2l0Y2ggKHQpIHtcbiAgICAgICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUudW5kZWZpbmVkO1xuICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5zdHJpbmc7XG4gICAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgICAgIHJldHVybiBOdW1iZXIuaXNOYU4oZGF0YSkgPyBab2RQYXJzZWRUeXBlLm5hbiA6IFpvZFBhcnNlZFR5cGUubnVtYmVyO1xuICAgICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUuYm9vbGVhbjtcbiAgICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5mdW5jdGlvbjtcbiAgICAgICAgY2FzZSBcImJpZ2ludFwiOlxuICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUuYmlnaW50O1xuICAgICAgICBjYXNlIFwic3ltYm9sXCI6XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5zeW1ib2w7XG4gICAgICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUuYXJyYXk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLm51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YS50aGVuICYmIHR5cGVvZiBkYXRhLnRoZW4gPT09IFwiZnVuY3Rpb25cIiAmJiBkYXRhLmNhdGNoICYmIHR5cGVvZiBkYXRhLmNhdGNoID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5wcm9taXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBNYXAgIT09IFwidW5kZWZpbmVkXCIgJiYgZGF0YSBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLm1hcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgU2V0ICE9PSBcInVuZGVmaW5lZFwiICYmIGRhdGEgaW5zdGFuY2VvZiBTZXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5zZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIERhdGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZGF0YSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5kYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUub2JqZWN0O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUudW5rbm93bjtcbiAgICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/helpers/util.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/locales/en.js":
/*!**************************************************************************!*\
  !*** ./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/locales/en.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ZodError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ZodError.js */ \"(app-pages-browser)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/ZodError.js\");\n/* harmony import */ var _helpers_util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/util.js */ \"(app-pages-browser)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/helpers/util.js\");\n\n\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_type:\n            if (issue.received === _helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, _helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.jsonStringifyReplacer)}`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${_helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.joinValues(issue.keys, \", \")}`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${_helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.joinValues(issue.options)}`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${_helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    _helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"bigint\")\n                message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            _helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.assertNever(issue);\n    }\n    return { message };\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (errorMap);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/locales/en.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/types.js":
/*!*********************************************************************!*\
  !*** ./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/types.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BRAND: function() { return /* binding */ BRAND; },\n/* harmony export */   NEVER: function() { return /* binding */ NEVER; },\n/* harmony export */   Schema: function() { return /* binding */ ZodType; },\n/* harmony export */   ZodAny: function() { return /* binding */ ZodAny; },\n/* harmony export */   ZodArray: function() { return /* binding */ ZodArray; },\n/* harmony export */   ZodBigInt: function() { return /* binding */ ZodBigInt; },\n/* harmony export */   ZodBoolean: function() { return /* binding */ ZodBoolean; },\n/* harmony export */   ZodBranded: function() { return /* binding */ ZodBranded; },\n/* harmony export */   ZodCatch: function() { return /* binding */ ZodCatch; },\n/* harmony export */   ZodDate: function() { return /* binding */ ZodDate; },\n/* harmony export */   ZodDefault: function() { return /* binding */ ZodDefault; },\n/* harmony export */   ZodDiscriminatedUnion: function() { return /* binding */ ZodDiscriminatedUnion; },\n/* harmony export */   ZodEffects: function() { return /* binding */ ZodEffects; },\n/* harmony export */   ZodEnum: function() { return /* binding */ ZodEnum; },\n/* harmony export */   ZodFirstPartyTypeKind: function() { return /* binding */ ZodFirstPartyTypeKind; },\n/* harmony export */   ZodFunction: function() { return /* binding */ ZodFunction; },\n/* harmony export */   ZodIntersection: function() { return /* binding */ ZodIntersection; },\n/* harmony export */   ZodLazy: function() { return /* binding */ ZodLazy; },\n/* harmony export */   ZodLiteral: function() { return /* binding */ ZodLiteral; },\n/* harmony export */   ZodMap: function() { return /* binding */ ZodMap; },\n/* harmony export */   ZodNaN: function() { return /* binding */ ZodNaN; },\n/* harmony export */   ZodNativeEnum: function() { return /* binding */ ZodNativeEnum; },\n/* harmony export */   ZodNever: function() { return /* binding */ ZodNever; },\n/* harmony export */   ZodNull: function() { return /* binding */ ZodNull; },\n/* harmony export */   ZodNullable: function() { return /* binding */ ZodNullable; },\n/* harmony export */   ZodNumber: function() { return /* binding */ ZodNumber; },\n/* harmony export */   ZodObject: function() { return /* binding */ ZodObject; },\n/* harmony export */   ZodOptional: function() { return /* binding */ ZodOptional; },\n/* harmony export */   ZodPipeline: function() { return /* binding */ ZodPipeline; },\n/* harmony export */   ZodPromise: function() { return /* binding */ ZodPromise; },\n/* harmony export */   ZodReadonly: function() { return /* binding */ ZodReadonly; },\n/* harmony export */   ZodRecord: function() { return /* binding */ ZodRecord; },\n/* harmony export */   ZodSchema: function() { return /* binding */ ZodType; },\n/* harmony export */   ZodSet: function() { return /* binding */ ZodSet; },\n/* harmony export */   ZodString: function() { return /* binding */ ZodString; },\n/* harmony export */   ZodSymbol: function() { return /* binding */ ZodSymbol; },\n/* harmony export */   ZodTransformer: function() { return /* binding */ ZodEffects; },\n/* harmony export */   ZodTuple: function() { return /* binding */ ZodTuple; },\n/* harmony export */   ZodType: function() { return /* binding */ ZodType; },\n/* harmony export */   ZodUndefined: function() { return /* binding */ ZodUndefined; },\n/* harmony export */   ZodUnion: function() { return /* binding */ ZodUnion; },\n/* harmony export */   ZodUnknown: function() { return /* binding */ ZodUnknown; },\n/* harmony export */   ZodVoid: function() { return /* binding */ ZodVoid; },\n/* harmony export */   any: function() { return /* binding */ anyType; },\n/* harmony export */   array: function() { return /* binding */ arrayType; },\n/* harmony export */   bigint: function() { return /* binding */ bigIntType; },\n/* harmony export */   boolean: function() { return /* binding */ booleanType; },\n/* harmony export */   coerce: function() { return /* binding */ coerce; },\n/* harmony export */   custom: function() { return /* binding */ custom; },\n/* harmony export */   date: function() { return /* binding */ dateType; },\n/* harmony export */   datetimeRegex: function() { return /* binding */ datetimeRegex; },\n/* harmony export */   discriminatedUnion: function() { return /* binding */ discriminatedUnionType; },\n/* harmony export */   effect: function() { return /* binding */ effectsType; },\n/* harmony export */   \"enum\": function() { return /* binding */ enumType; },\n/* harmony export */   \"function\": function() { return /* binding */ functionType; },\n/* harmony export */   \"instanceof\": function() { return /* binding */ instanceOfType; },\n/* harmony export */   intersection: function() { return /* binding */ intersectionType; },\n/* harmony export */   late: function() { return /* binding */ late; },\n/* harmony export */   lazy: function() { return /* binding */ lazyType; },\n/* harmony export */   literal: function() { return /* binding */ literalType; },\n/* harmony export */   map: function() { return /* binding */ mapType; },\n/* harmony export */   nan: function() { return /* binding */ nanType; },\n/* harmony export */   nativeEnum: function() { return /* binding */ nativeEnumType; },\n/* harmony export */   never: function() { return /* binding */ neverType; },\n/* harmony export */   \"null\": function() { return /* binding */ nullType; },\n/* harmony export */   nullable: function() { return /* binding */ nullableType; },\n/* harmony export */   number: function() { return /* binding */ numberType; },\n/* harmony export */   object: function() { return /* binding */ objectType; },\n/* harmony export */   oboolean: function() { return /* binding */ oboolean; },\n/* harmony export */   onumber: function() { return /* binding */ onumber; },\n/* harmony export */   optional: function() { return /* binding */ optionalType; },\n/* harmony export */   ostring: function() { return /* binding */ ostring; },\n/* harmony export */   pipeline: function() { return /* binding */ pipelineType; },\n/* harmony export */   preprocess: function() { return /* binding */ preprocessType; },\n/* harmony export */   promise: function() { return /* binding */ promiseType; },\n/* harmony export */   record: function() { return /* binding */ recordType; },\n/* harmony export */   set: function() { return /* binding */ setType; },\n/* harmony export */   strictObject: function() { return /* binding */ strictObjectType; },\n/* harmony export */   string: function() { return /* binding */ stringType; },\n/* harmony export */   symbol: function() { return /* binding */ symbolType; },\n/* harmony export */   transformer: function() { return /* binding */ effectsType; },\n/* harmony export */   tuple: function() { return /* binding */ tupleType; },\n/* harmony export */   undefined: function() { return /* binding */ undefinedType; },\n/* harmony export */   union: function() { return /* binding */ unionType; },\n/* harmony export */   unknown: function() { return /* binding */ unknownType; },\n/* harmony export */   \"void\": function() { return /* binding */ voidType; }\n/* harmony export */ });\n/* harmony import */ var _ZodError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ZodError.js */ \"(app-pages-browser)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/ZodError.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./errors.js */ \"(app-pages-browser)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/errors.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./errors.js */ \"(app-pages-browser)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/locales/en.js\");\n/* harmony import */ var _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers/errorUtil.js */ \"(app-pages-browser)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/helpers/errorUtil.js\");\n/* harmony import */ var _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers/parseUtil.js */ \"(app-pages-browser)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/helpers/parseUtil.js\");\n/* harmony import */ var _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/util.js */ \"(app-pages-browser)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/helpers/util.js\");\n\n\n\n\n\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (Array.isArray(this._key)) {\n                this._cachedPath.push(...this._path, ...this._key);\n            }\n            else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result) => {\n    if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isValid)(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error() {\n                if (this._error)\n                    return this._error;\n                const error = new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            },\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        const { message } = params;\n        if (iss.code === \"invalid_enum_value\") {\n            return { message: message ?? ctx.defaultError };\n        }\n        if (typeof ctx.data === \"undefined\") {\n            return { message: message ?? required_error ?? ctx.defaultError };\n        }\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        return { message: message ?? invalid_type_error ?? ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nclass ZodType {\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isAsync)(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                async: params?.async ?? false,\n                contextualErrorMap: params?.errorMap,\n            },\n            path: params?.path || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    \"~validate\"(data) {\n        const ctx = {\n            common: {\n                issues: [],\n                async: !!this[\"~standard\"].async,\n            },\n            path: [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(data),\n        };\n        if (!this[\"~standard\"].async) {\n            try {\n                const result = this._parseSync({ data, path: [], parent: ctx });\n                return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isValid)(result)\n                    ? {\n                        value: result.value,\n                    }\n                    : {\n                        issues: ctx.common.issues,\n                    };\n            }\n            catch (err) {\n                if (err?.message?.toLowerCase()?.includes(\"encountered\")) {\n                    this[\"~standard\"].async = true;\n                }\n                ctx.common = {\n                    issues: [],\n                    async: true,\n                };\n            }\n        }\n        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isValid)(result)\n            ? {\n                value: result.value,\n            }\n            : {\n                issues: ctx.common.issues,\n            });\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params?.errorMap,\n                async: true,\n            },\n            path: params?.path || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n        const result = await ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isAsync)(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\" ? refinementData(val, ctx) : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n        this[\"~standard\"] = {\n            version: 1,\n            vendor: \"zod\",\n            validate: (data) => this[\"~validate\"](data),\n        };\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([this, option], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def),\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[0-9a-z]+$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\nconst nanoidRegex = /^[a-z0-9_-]{21}$/i;\nconst jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/;\nconst durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nlet emojiRegex;\n// faster, simpler, safer\nconst ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\nconst ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/;\n// const ipv6Regex =\n// /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\nconst ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\nconst ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\n// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\nconst base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n// https://base64.guru/standards/base64url\nconst base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;\n// simple\n// const dateRegexSource = `\\\\d{4}-\\\\d{2}-\\\\d{2}`;\n// no leap year validation\n// const dateRegexSource = `\\\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\\\d|2\\\\d))`;\n// with leap year validation\nconst dateRegexSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\nconst dateRegex = new RegExp(`^${dateRegexSource}$`);\nfunction timeRegexSource(args) {\n    let secondsRegexSource = `[0-5]\\\\d`;\n    if (args.precision) {\n        secondsRegexSource = `${secondsRegexSource}\\\\.\\\\d{${args.precision}}`;\n    }\n    else if (args.precision == null) {\n        secondsRegexSource = `${secondsRegexSource}(\\\\.\\\\d+)?`;\n    }\n    const secondsQuantifier = args.precision ? \"+\" : \"?\"; // require seconds if precision is nonzero\n    return `([01]\\\\d|2[0-3]):[0-5]\\\\d(:${secondsRegexSource})${secondsQuantifier}`;\n}\nfunction timeRegex(args) {\n    return new RegExp(`^${timeRegexSource(args)}$`);\n}\n// Adapted from https://stackoverflow.com/a/3143231\nfunction datetimeRegex(args) {\n    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;\n    const opts = [];\n    opts.push(args.local ? `Z?` : `Z`);\n    if (args.offset)\n        opts.push(`([+-]\\\\d{2}:?\\\\d{2})`);\n    regex = `${regex}(${opts.join(\"|\")})`;\n    return new RegExp(`^${regex}$`);\n}\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nfunction isValidJWT(jwt, alg) {\n    if (!jwtRegex.test(jwt))\n        return false;\n    try {\n        const [header] = jwt.split(\".\");\n        if (!header)\n            return false;\n        // Convert base64url to base64\n        const base64 = header\n            .replace(/-/g, \"+\")\n            .replace(/_/g, \"/\")\n            .padEnd(header.length + ((4 - (header.length % 4)) % 4), \"=\");\n        const decoded = JSON.parse(atob(base64));\n        if (typeof decoded !== \"object\" || decoded === null)\n            return false;\n        if (\"typ\" in decoded && decoded?.typ !== \"JWT\")\n            return false;\n        if (!decoded.alg)\n            return false;\n        if (alg && decoded.alg !== alg)\n            return false;\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nfunction isValidCidr(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4CidrRegex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6CidrRegex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nclass ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.string,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const status = new _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                            code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    else if (tooSmall) {\n                        (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                            code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"email\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"emoji\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"uuid\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"nanoid\") {\n                if (!nanoidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"nanoid\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"cuid\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"cuid2\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"ulid\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"url\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"regex\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        validation: { includes: check.value, position: check.position },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            }\n            else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"date\") {\n                const regex = dateRegex;\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        validation: \"date\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"time\") {\n                const regex = timeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        validation: \"time\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"duration\") {\n                if (!durationRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"duration\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"ip\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"jwt\") {\n                if (!isValidJWT(input.data, check.alg)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"jwt\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cidr\") {\n                if (!isValidCidr(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"cidr\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64\") {\n                if (!base64Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"base64\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64url\") {\n                if (!base64urlRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"base64url\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data) => regex.test(data), {\n            validation,\n            code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    emoji(message) {\n        return this._addCheck({ kind: \"emoji\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    nanoid(message) {\n        return this._addCheck({ kind: \"nanoid\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    cuid2(message) {\n        return this._addCheck({ kind: \"cuid2\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    ulid(message) {\n        return this._addCheck({ kind: \"ulid\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    base64(message) {\n        return this._addCheck({ kind: \"base64\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    base64url(message) {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return this._addCheck({\n            kind: \"base64url\",\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    jwt(options) {\n        return this._addCheck({ kind: \"jwt\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(options) });\n    }\n    ip(options) {\n        return this._addCheck({ kind: \"ip\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(options) });\n    }\n    cidr(options) {\n        return this._addCheck({ kind: \"cidr\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(options) });\n    }\n    datetime(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                local: false,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof options?.precision === \"undefined\" ? null : options?.precision,\n            offset: options?.offset ?? false,\n            local: options?.local ?? false,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(options?.message),\n        });\n    }\n    date(message) {\n        return this._addCheck({ kind: \"date\", message });\n    }\n    time(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"time\",\n                precision: null,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"time\",\n            precision: typeof options?.precision === \"undefined\" ? null : options?.precision,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(options?.message),\n        });\n    }\n    duration(message) {\n        return this._addCheck({ kind: \"duration\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options?.position,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(options?.message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    /**\n     * Equivalent to `.min(1)`\n     */\n    nonempty(message) {\n        return this.min(1, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n    }\n    get isDate() {\n        return !!this._def.checks.find((ch) => ch.kind === \"date\");\n    }\n    get isTime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"time\");\n    }\n    get isDuration() {\n        return !!this._def.checks.find((ch) => ch.kind === \"duration\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isNANOID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"nanoid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n    }\n    get isCIDR() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cidr\");\n    }\n    get isBase64() {\n        return !!this._def.checks.find((ch) => ch.kind === \"base64\");\n    }\n    get isBase64url() {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return !!this._def.checks.find((ch) => ch.kind === \"base64url\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: params?.coerce ?? false,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = Number.parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = Number.parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / 10 ** decCount;\n}\nclass ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        let ctx = undefined;\n        const status = new _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.not_finite,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" || (ch.kind === \"multipleOf\" && _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.isInteger(ch.value)));\n    }\n    get isFinite() {\n        let max = null;\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" || ch.kind === \"int\" || ch.kind === \"multipleOf\") {\n                return true;\n            }\n            else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n            else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: params?.coerce || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBigInt extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            try {\n                input.data = BigInt(input.data);\n            }\n            catch {\n                return this._getInvalidInput(input);\n            }\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.bigint) {\n            return this._getInvalidInput(input);\n        }\n        let ctx = undefined;\n        const status = new _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _getInvalidInput(input) {\n        const ctx = this._getOrReturnCtx(input);\n        (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n            code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n            expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.bigint,\n            received: ctx.parsedType,\n        });\n        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params) => {\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: params?.coerce ?? false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: params?.coerce || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        if (Number.isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_date,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const status = new _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        coerce: params?.coerce || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.symbol,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n}\nZodSymbol.create = (params) => {\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nclass ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n            code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n            expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.array) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                    code: tooBig ? _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big : _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\n                    maximum: (tooBig ? def.exactLength.value : undefined),\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message) },\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element),\n        });\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */\n        this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(shape);\n        this._cached = { shape, keys };\n        return this._cached;\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") {\n            }\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    syncPairs.push({\n                        key,\n                        value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        const defaultError = this._def.errorMap?.(issue, ctx).message ?? ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message).message ?? defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: () => ({\n                ...this._def.shape(),\n                ...augmentation,\n            }),\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n                ...this._def.shape(),\n                ...merging._def.shape(),\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        for (const key of _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(mask)) {\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        for (const key of _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(this.shape)) {\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    /**\n     * @deprecated\n     */\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        for (const key of _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(this.shape)) {\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            }\n            else {\n                newShape[key] = fieldSchema.optional();\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        for (const key of _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(this.shape)) {\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            }\n            else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while (newField instanceof ZodOptional) {\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError(result.ctx.common.issues));\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError(issues));\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type) => {\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    }\n    else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    }\n    else if (type instanceof ZodLiteral) {\n        return [type.value];\n    }\n    else if (type instanceof ZodEnum) {\n        return type.options;\n    }\n    else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectValues(type.enum);\n    }\n    else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else if (type instanceof ZodUndefined) {\n        return [undefined];\n    }\n    else if (type instanceof ZodNull) {\n        return [null];\n    }\n    else if (type instanceof ZodOptional) {\n        return [undefined, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodNullable) {\n        return [null, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodBranded) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodReadonly) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodCatch) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else {\n        return [];\n    }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [discriminator],\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues.length) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(a);\n    const bType = (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object && bType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object) {\n        const bKeys = _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(b);\n        const sharedKeys = _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.array && bType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.date && bType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.date && +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isAborted)(parsedLeft) || (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isAborted)(parsedRight)) {\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_intersection_types,\n                });\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n            }\n            if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isDirty)(parsedLeft) || (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isDirty)(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\n// type ZodTupleItems = [ZodTypeAny, ...ZodTypeAny[]];\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.array) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = [...ctx.data]\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (ctx.common.async) {\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.map) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.set) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nclass ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.function) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.makeIssue)({\n                data: args,\n                path: ctx.path,\n                errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, (0,_errors_js__WEBPACK_IMPORTED_MODULE_4__.getErrorMap)(), _errors_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]].filter((x) => !!x),\n                issueData: {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.makeIssue)({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, (0,_errors_js__WEBPACK_IMPORTED_MODULE_4__.getErrorMap)(), _errors_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]].filter((x) => !!x),\n                issueData: {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(async function (...args) {\n                const error = new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError([]);\n                const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(function (...args) {\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args ? args : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                received: ctx.data,\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nclass ZodEnum extends ZodType {\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        if (!this._cache) {\n            this._cache = new Set(this._def.values);\n        }\n        if (!this._cache.has(input.data)) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                received: ctx.data,\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values, newDef = this._def) {\n        return ZodEnum.create(values, {\n            ...this._def,\n            ...newDef,\n        });\n    }\n    exclude(values, newDef = this._def) {\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {\n            ...this._def,\n            ...newDef,\n        });\n    }\n}\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    _parse(input) {\n        const nativeEnumValues = _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.string && ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.number) {\n            const expectedValues = _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectValues(nativeEnumValues);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        if (!this._cache) {\n            this._cache = new Set(_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.getValidEnumValues(this._def.values));\n        }\n        if (!this._cache.has(input.data)) {\n            const expectedValues = _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectValues(nativeEnumValues);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                received: ctx.data,\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nclass ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.promise && ctx.common.async === false) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const promisified = ctx.parsedType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\n            ? this._def.schema.sourceType()\n            : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg) => {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then(async (processed) => {\n                    if (status.value === \"aborted\")\n                        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                    const result = await this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                    if (result.status === \"aborted\")\n                        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                    if (result.status === \"dirty\")\n                        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.DIRTY)(result.value);\n                    if (status.value === \"dirty\")\n                        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.DIRTY)(result.value);\n                    return result;\n                });\n            }\n            else {\n                if (status.value === \"aborted\")\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                const result = this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (result.status === \"aborted\")\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                if (result.status === \"dirty\")\n                    return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.DIRTY)(result.value);\n                if (status.value === \"dirty\")\n                    return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.DIRTY)(result.value);\n                return result;\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (!(0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isValid)(base))\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {\n                    if (!(0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isValid)(base))\n                        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({\n                        status: status.value,\n                        value: result,\n                    }));\n                });\n            }\n        }\n        _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\n\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.undefined) {\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.null) {\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\" ? params.default : () => params.default,\n        ...processCreateParams(params),\n    });\n};\nclass ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: [],\n            },\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx,\n            },\n        });\n        if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isAsync)(result)) {\n            return result.then((result) => {\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\"\n                        ? result.value\n                        : this._def.catchValue({\n                            get error() {\n                                return new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError(newCtx.common.issues);\n                            },\n                            input: newCtx.data,\n                        }),\n                };\n            });\n        }\n        else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\"\n                    ? result.value\n                    : this._def.catchValue({\n                        get error() {\n                            return new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data,\n                    }),\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params) => {\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async () => {\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inResult.status === \"aborted\")\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.DIRTY)(inResult.value);\n                }\n                else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                }\n            };\n            return handleAsync();\n        }\n        else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n            if (inResult.status === \"aborted\")\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value,\n                };\n            }\n            else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\n        });\n    }\n}\nclass ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        const freeze = (data) => {\n            if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isValid)(data)) {\n                data.value = Object.freeze(data.value);\n            }\n            return data;\n        };\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isAsync)(result) ? result.then((data) => freeze(data)) : freeze(result);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodReadonly.create = (type, params) => {\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params),\n    });\n};\n////////////////////////////////////////\n////////////////////////////////////////\n//////////                    //////////\n//////////      z.custom      //////////\n//////////                    //////////\n////////////////////////////////////////\n////////////////////////////////////////\nfunction cleanParams(params, data) {\n    const p = typeof params === \"function\" ? params(data) : typeof params === \"string\" ? { message: params } : params;\n    const p2 = typeof p === \"string\" ? { message: p } : p;\n    return p2;\n}\nfunction custom(check, _params = {}, \n/**\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */\nfatal) {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            const r = check(data);\n            if (r instanceof Promise) {\n                return r.then((r) => {\n                    if (!r) {\n                        const params = cleanParams(_params, data);\n                        const _fatal = params.fatal ?? fatal ?? true;\n                        ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n                    }\n                });\n            }\n            if (!r) {\n                const params = cleanParams(_params, data);\n                const _fatal = params.fatal ?? fatal ?? true;\n                ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n            }\n            return;\n        });\n    return ZodAny.create();\n}\n\nconst late = {\n    object: ZodObject.lazycreate,\n};\nvar ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\n// requires TS 4.4+\nclass Class {\n    constructor(..._) { }\n}\nconst instanceOfType = (\n// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nconst coerce = {\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\n    boolean: ((arg) => ZodBoolean.create({\n        ...arg,\n        coerce: true,\n    })),\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\n};\n\nconst NEVER = _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/types.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fohong%2FLibrary%2FMobile%20Documents%2Fcom~apple~CloudDocs%2Fdev%2Ftea-olive%2Fweb%2Fsrc%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);